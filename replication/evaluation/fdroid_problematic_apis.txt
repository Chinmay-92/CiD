<android.accessibilityservice.AccessibilityService: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow()>:[16,25]
<android.accessibilityservice.AccessibilityService: boolean onKeyEvent(android.view.KeyEvent)>:[18,25]
<android.accessibilityservice.AccessibilityServiceInfo: int getCapabilities()>:[18,25]
<android.accounts.AbstractAccountAuthenticator: void <init>(android.content.Context)>:[5,25]
<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>:[5,25]
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>:[5,25]
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)>:[5,25]
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>:[22,25]
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>:[5,25]
<android.accounts.AccountManager: android.content.Intent newChooseAccountIntent(android.accounts.Account,java.util.ArrayList,java.lang.String[],boolean,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>:[14,25]
<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>:[5,25]
<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)>:[5,25]
<android.accounts.AccountManager: void removeOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener)>:[5,25]
<android.animation.Animator: android.animation.Animator clone()>:[11,25]
<android.animation.Animator: android.animation.Animator setDuration(long)>:[11,25]
<android.animation.Animator: android.animation.TimeInterpolator getInterpolator()>:[18,25]
<android.animation.Animator: boolean isPaused()>:[19,25]
<android.animation.Animator: boolean isRunning()>:[11,25]
<android.animation.Animator: boolean isStarted()>:[14,25]
<android.animation.Animator: void cancel()>:[11,25]
<android.animation.Animator: void end()>:[11,25]
<android.animation.Animator: void setInterpolator(android.animation.TimeInterpolator)>:[11,25]
<android.animation.Animator: void setTarget(java.lang.Object)>:[11,25]
<android.animation.Animator: void start()>:[11,25]
<android.animation.AnimatorInflater: android.animation.Animator loadAnimator(android.content.Context,int)>:[11,25]
<android.animation.AnimatorInflater: android.animation.StateListAnimator loadStateListAnimator(android.content.Context,int)>:[21,25]
<android.animation.AnimatorListenerAdapter: void <init>()>:[11,25]
<android.animation.AnimatorListenerAdapter: void onAnimationEnd(android.animation.Animator)>:[11,25]
<android.animation.AnimatorListenerAdapter: void onAnimationStart(android.animation.Animator)>:[11,25]
<android.animation.AnimatorSet: android.animation.AnimatorSet setDuration(long)>:[11,25]
<android.animation.AnimatorSet: java.util.ArrayList getChildAnimations()>:[11,25]
<android.animation.AnimatorSet: void <init>()>:[11,25]
<android.animation.AnimatorSet: void playTogether(java.util.Collection)>:[11,25]
<android.animation.AnimatorSet: void setInterpolator(android.animation.TimeInterpolator)>:[11,25]
<android.animation.ArgbEvaluator: void <init>()>:[11,25]
<android.animation.LayoutTransition: void <init>()>:[11,25]
<android.animation.LayoutTransition: void enableTransitionType(int)>:[16,25]
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,java.lang.String,java.lang.String,android.graphics.Path)>:[21,25]
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofInt(java.lang.Object,java.lang.String,java.lang.String,android.graphics.Path)>:[21,25]
<android.animation.ObjectAnimator: java.lang.String getPropertyName()>:[11,25]
<android.animation.ObjectAnimator: void <init>()>:[11,25]
<android.animation.ObjectAnimator: void setAutoCancel(boolean)>:[18,25]
<android.animation.ObjectAnimator: void setProperty(android.util.Property)>:[14,25]
<android.animation.ObjectAnimator: void setPropertyName(java.lang.String)>:[11,25]
<android.animation.StateListAnimator: void <init>()>:[21,25]
<android.animation.StateListAnimator: void addState(int[],android.animation.Animator)>:[21,25]
<android.animation.StateListAnimator: void jumpToCurrentState()>:[21,25]
<android.animation.ValueAnimator: android.animation.ValueAnimator setDuration(long)>:[11,25]
<android.animation.ValueAnimator: boolean isRunning()>:[11,25]
<android.animation.ValueAnimator: float getAnimatedFraction()>:[12,25]
<android.animation.ValueAnimator: java.lang.Object getAnimatedValue()>:[11,25]
<android.animation.ValueAnimator: long getDuration()>:[11,25]
<android.animation.ValueAnimator: long getFrameDelay()>:[11,25]
<android.animation.ValueAnimator: void <init>()>:[11,25]
<android.animation.ValueAnimator: void setInterpolator(android.animation.TimeInterpolator)>:[11,25]
<android.app.ActionBar: android.content.Context getThemedContext()>:[14,25]
<android.app.ActionBar: android.view.View getCustomView()>:[11,25]
<android.app.ActionBar: boolean isShowing()>:[11,25]
<android.app.ActionBar: int getDisplayOptions()>:[11,25]
<android.app.ActionBar: int getHeight()>:[11,25]
<android.app.ActionBar: int getNavigationItemCount()>:[11,25]
<android.app.ActionBar: int getNavigationMode()>:[11,25]
<android.app.ActionBar: int getSelectedNavigationIndex()>:[11,25]
<android.app.ActionBar: int getTabCount()>:[11,25]
<android.app.ActionBar: java.lang.CharSequence getSubtitle()>:[11,25]
<android.app.ActionBar: java.lang.CharSequence getTitle()>:[11,25]
<android.app.ActionBar: void hide()>:[11,25]
<android.app.ActionBar: void removeAllTabs()>:[11,25]
<android.app.ActionBar: void removeTabAt(int)>:[11,25]
<android.app.ActionBar: void setBackgroundDrawable(android.graphics.drawable.Drawable)>:[11,25]
<android.app.ActionBar: void setCustomView(android.view.View)>:[11,25]
<android.app.ActionBar: void setCustomView(int)>:[11,25]
<android.app.ActionBar: void setDisplayHomeAsUpEnabled(boolean)>:[11,25]
<android.app.ActionBar: void setDisplayOptions(int)>:[11,25]
<android.app.ActionBar: void setDisplayOptions(int,int)>:[11,25]
<android.app.ActionBar: void setDisplayShowCustomEnabled(boolean)>:[11,25]
<android.app.ActionBar: void setDisplayShowHomeEnabled(boolean)>:[11,25]
<android.app.ActionBar: void setDisplayShowTitleEnabled(boolean)>:[11,25]
<android.app.ActionBar: void setDisplayUseLogoEnabled(boolean)>:[11,25]
<android.app.ActionBar: void setElevation(float)>:[21,25]
<android.app.ActionBar: void setHomeActionContentDescription(int)>:[18,25]
<android.app.ActionBar: void setHomeAsUpIndicator(android.graphics.drawable.Drawable)>:[18,25]
<android.app.ActionBar: void setHomeAsUpIndicator(int)>:[18,25]
<android.app.ActionBar: void setHomeButtonEnabled(boolean)>:[14,25]
<android.app.ActionBar: void setIcon(android.graphics.drawable.Drawable)>:[14,25]
<android.app.ActionBar: void setIcon(int)>:[14,25]
<android.app.ActionBar: void setLogo(android.graphics.drawable.Drawable)>:[14,25]
<android.app.ActionBar: void setLogo(int)>:[14,25]
<android.app.ActionBar: void setNavigationMode(int)>:[11,25]
<android.app.ActionBar: void setSelectedNavigationItem(int)>:[11,25]
<android.app.ActionBar: void setSplitBackgroundDrawable(android.graphics.drawable.Drawable)>:[14,25]
<android.app.ActionBar: void setStackedBackgroundDrawable(android.graphics.drawable.Drawable)>:[14,25]
<android.app.ActionBar: void setSubtitle(int)>:[11,25]
<android.app.ActionBar: void setSubtitle(java.lang.CharSequence)>:[11,25]
<android.app.ActionBar: void setTitle(int)>:[11,25]
<android.app.ActionBar: void setTitle(java.lang.CharSequence)>:[11,25]
<android.app.ActionBar: void show()>:[11,25]
<android.app.Activity: android.app.ActionBar getActionBar()>:[11,25]
<android.app.Activity: android.app.FragmentManager getFragmentManager()>:[11,25]
<android.app.Activity: android.content.Intent getParentActivityIntent()>:[16,25]
<android.app.Activity: android.net.Uri getReferrer()>:[22,25]
<android.app.Activity: android.view.MenuInflater getMenuInflater()>:[1,25]
<android.app.Activity: android.view.Window getWindow()>:[1,25]
<android.app.Activity: boolean dispatchTouchEvent(android.view.MotionEvent)>:[1,25]
<android.app.Activity: boolean isChangingConfigurations()>:[11,25]
<android.app.Activity: boolean isDestroyed()>:[17,25]
<android.app.Activity: boolean navigateUpTo(android.content.Intent)>:[16,25]
<android.app.Activity: boolean onContextItemSelected(android.view.MenuItem)>:[1,25]
<android.app.Activity: boolean onCreateOptionsMenu(android.view.Menu)>:[1,25]
<android.app.Activity: boolean onKeyDown(int,android.view.KeyEvent)>:[1,25]
<android.app.Activity: boolean onOptionsItemSelected(android.view.MenuItem)>:[1,25]
<android.app.Activity: boolean onPrepareOptionsMenu(android.view.Menu)>:[1,25]
<android.app.Activity: boolean shouldShowRequestPermissionRationale(java.lang.String)>:[23,25]
<android.app.Activity: boolean shouldUpRecreateTask(android.content.Intent)>:[16,25]
<android.app.Activity: void <init>()>:[1,25]
<android.app.Activity: void finish()>:[1,25]
<android.app.Activity: void finishAffinity()>:[16,25]
<android.app.Activity: void finishAfterTransition()>:[21,25]
<android.app.Activity: void invalidateOptionsMenu()>:[11,25]
<android.app.Activity: void onActivityResult(int,int,android.content.Intent)>:[1,25]
<android.app.Activity: void onBackPressed()>:[5,25]
<android.app.Activity: void onCreate(android.os.Bundle)>:[1,25]
<android.app.Activity: void onDestroy()>:[1,25]
<android.app.Activity: void onPause()>:[1,25]
<android.app.Activity: void onRequestPermissionsResult(int,java.lang.String[],int[])>:[23,25]
<android.app.Activity: void onRestart()>:[1,25]
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>:[1,25]
<android.app.Activity: void onResume()>:[1,25]
<android.app.Activity: void onSaveInstanceState(android.os.Bundle)>:[1,25]
<android.app.Activity: void onStart()>:[1,25]
<android.app.Activity: void onStop()>:[1,25]
<android.app.Activity: void overridePendingTransition(int,int)>:[5,25]
<android.app.Activity: void recreate()>:[11,25]
<android.app.Activity: void requestPermissions(java.lang.String[],int)>:[23,25]
<android.app.Activity: void setActionBar(android.widget.Toolbar)>:[21,25]
<android.app.Activity: void setTitle(java.lang.CharSequence)>:[1,25]
<android.app.Activity: void showDialog(int)>:[1,25]
<android.app.Activity: void startActivityForResult(android.content.Intent,int,android.os.Bundle)>:[16,25]
<android.app.ActivityManager: boolean isLowRamDevice()>:[19,25]
<android.app.ActivityManager: int getLargeMemoryClass()>:[11,25]
<android.app.ActivityManager: int getLauncherLargeIconDensity()>:[11,25]
<android.app.ActivityManager: int getLauncherLargeIconSize()>:[11,25]
<android.app.ActivityManager: int getMemoryClass()>:[5,25]
<android.app.ActivityOptions: android.app.ActivityOptions makeCustomAnimation(android.content.Context,int,int)>:[16,25]
<android.app.ActivityOptions: android.app.ActivityOptions makeScaleUpAnimation(android.view.View,int,int,int,int)>:[16,25]
<android.app.ActivityOptions: android.app.ActivityOptions makeSceneTransitionAnimation(android.app.Activity,android.view.View,java.lang.String)>:[21,25]
<android.app.ActivityOptions: android.app.ActivityOptions makeThumbnailScaleUpAnimation(android.view.View,android.graphics.Bitmap,int,int)>:[16,25]
<android.app.ActivityOptions: android.os.Bundle toBundle()>:[16,25]
<android.app.AlarmManager: void cancel(android.app.PendingIntent)>:[1,25]
<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>:[1,25]
<android.app.AlarmManager: void setAndAllowWhileIdle(int,long,android.app.PendingIntent)>:[23,25]
<android.app.AlarmManager: void setExact(int,long,android.app.PendingIntent)>:[19,25]
<android.app.AlarmManager: void setExactAndAllowWhileIdle(int,long,android.app.PendingIntent)>:[23,25]
<android.app.AlertDialog: void setMessage(java.lang.CharSequence)>:[1,25]
<android.app.AppOpsManager: int checkOp(java.lang.String,int,java.lang.String)>:[19,25]
<android.app.AppOpsManager: int checkOpNoThrow(java.lang.String,int,java.lang.String)>:[19,25]
<android.app.Application: void <init>()>:[1,25]
<android.app.Application: void onTrimMemory(int)>:[14,25]
<android.app.ApplicationErrorReport: void <init>()>:[14,25]
<android.app.DatePickerDialog: android.widget.DatePicker getDatePicker()>:[11,25]
<android.app.Dialog: android.app.ActionBar getActionBar()>:[11,25]
<android.app.Dialog: android.view.View findViewById(int)>:[1,25]
<android.app.Dialog: boolean requestWindowFeature(int)>:[1,25]
<android.app.Dialog: void <init>(android.content.Context)>:[1,25]
<android.app.Dialog: void cancel()>:[1,25]
<android.app.Dialog: void setCancelable(boolean)>:[1,25]
<android.app.Dialog: void setCanceledOnTouchOutside(boolean)>:[1,25]
<android.app.Dialog: void setContentView(int)>:[1,25]
<android.app.Dialog: void show()>:[1,25]
<android.app.DialogFragment: android.app.Dialog getDialog()>:[11,25]
<android.app.DialogFragment: void <init>()>:[11,25]
<android.app.DialogFragment: void dismiss()>:[11,25]
<android.app.DialogFragment: void show(android.app.FragmentManager,java.lang.String)>:[11,25]
<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)>:[11,25]
<android.app.DownloadManager: java.lang.String getMimeTypeForDownloadedFile(long)>:[11,25]
<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean)>:[12,25]
<android.app.Fragment: android.app.Activity getActivity()>:[11,25]
<android.app.Fragment: android.app.Fragment getParentFragment()>:[17,25]
<android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)>:[11,25]
<android.app.Fragment: android.app.FragmentManager getChildFragmentManager()>:[17,25]
<android.app.Fragment: android.app.FragmentManager getFragmentManager()>:[11,25]
<android.app.Fragment: android.content.Context getContext()>:[23,25]
<android.app.Fragment: android.content.res.Resources getResources()>:[11,25]
<android.app.Fragment: android.os.Bundle getArguments()>:[11,25]
<android.app.Fragment: android.view.View getView()>:[11,25]
<android.app.Fragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>:[11,25]
<android.app.Fragment: boolean isDetached()>:[13,25]
<android.app.Fragment: boolean isRemoving()>:[11,25]
<android.app.Fragment: int getId()>:[11,25]
<android.app.Fragment: java.lang.String getTag()>:[11,25]
<android.app.Fragment: void <init>()>:[11,25]
<android.app.Fragment: void onActivityCreated(android.os.Bundle)>:[11,25]
<android.app.Fragment: void onAttach(android.app.Activity)>:[11,25]
<android.app.Fragment: void onAttach(android.content.Context)>:[23,25]
<android.app.Fragment: void onConfigurationChanged(android.content.res.Configuration)>:[11,25]
<android.app.Fragment: void onCreate(android.os.Bundle)>:[11,25]
<android.app.Fragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)>:[11,25]
<android.app.Fragment: void onDestroy()>:[11,25]
<android.app.Fragment: void onDestroyView()>:[11,25]
<android.app.Fragment: void onDetach()>:[11,25]
<android.app.Fragment: void onPause()>:[11,25]
<android.app.Fragment: void onResume()>:[11,25]
<android.app.Fragment: void onSaveInstanceState(android.os.Bundle)>:[11,25]
<android.app.Fragment: void onStart()>:[11,25]
<android.app.Fragment: void onStop()>:[11,25]
<android.app.Fragment: void onViewCreated(android.view.View,android.os.Bundle)>:[13,25]
<android.app.Fragment: void setArguments(android.os.Bundle)>:[11,25]
<android.app.Fragment: void setMenuVisibility(boolean)>:[14,25]
<android.app.Fragment: void setUserVisibleHint(boolean)>:[15,25]
<android.app.Fragment: void startActivity(android.content.Intent)>:[11,25]
<android.app.Fragment: void startActivityForResult(android.content.Intent,int)>:[11,25]
<android.app.Fragment: void startActivityForResult(android.content.Intent,int,android.os.Bundle)>:[16,25]
<android.app.FragmentBreadCrumbs: void setActivity(android.app.Activity)>:[11,25]
<android.app.FragmentManager: android.app.Fragment findFragmentById(int)>:[11,25]
<android.app.FragmentManager: android.app.Fragment findFragmentByTag(java.lang.String)>:[11,25]
<android.app.FragmentManager: android.app.Fragment getFragment(android.os.Bundle,java.lang.String)>:[11,25]
<android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()>:[11,25]
<android.app.FragmentManager: boolean executePendingTransactions()>:[11,25]
<android.app.FragmentManager: boolean popBackStackImmediate()>:[11,25]
<android.app.FragmentManager: boolean popBackStackImmediate(java.lang.String,int)>:[11,25]
<android.app.FragmentManager: int getBackStackEntryCount()>:[11,25]
<android.app.FragmentManager: void popBackStack(java.lang.String,int)>:[11,25]
<android.app.FragmentManager: void putFragment(android.os.Bundle,java.lang.String,android.app.Fragment)>:[11,25]
<android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)>:[11,25]
<android.app.FragmentTransaction: android.app.FragmentTransaction add(int,android.app.Fragment)>:[11,25]
<android.app.FragmentTransaction: android.app.FragmentTransaction addToBackStack(java.lang.String)>:[11,25]
<android.app.FragmentTransaction: android.app.FragmentTransaction hide(android.app.Fragment)>:[11,25]
<android.app.FragmentTransaction: android.app.FragmentTransaction remove(android.app.Fragment)>:[11,25]
<android.app.FragmentTransaction: android.app.FragmentTransaction replace(int,android.app.Fragment)>:[11,25]
<android.app.FragmentTransaction: android.app.FragmentTransaction replace(int,android.app.Fragment,java.lang.String)>:[11,25]
<android.app.FragmentTransaction: android.app.FragmentTransaction setBreadCrumbShortTitle(java.lang.CharSequence)>:[11,25]
<android.app.FragmentTransaction: android.app.FragmentTransaction setBreadCrumbTitle(java.lang.CharSequence)>:[11,25]
<android.app.FragmentTransaction: android.app.FragmentTransaction setTransition(int)>:[11,25]
<android.app.FragmentTransaction: android.app.FragmentTransaction show(android.app.Fragment)>:[11,25]
<android.app.FragmentTransaction: int commit()>:[11,25]
<android.app.FragmentTransaction: int commitAllowingStateLoss()>:[11,25]
<android.app.KeyguardManager: boolean isDeviceLocked()>:[22,25]
<android.app.KeyguardManager: boolean isKeyguardSecure()>:[16,25]
<android.app.ListActivity: void <init>()>:[1,25]
<android.app.ListFragment: void <init>()>:[11,25]
<android.app.ListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)>:[11,25]
<android.app.Notification: void <init>(int,java.lang.CharSequence,long)>:[1,25]
<android.app.Notification: void setLatestEventInfo(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)>:[1,22]
<android.app.NotificationManager: void cancel(int)>:[1,25]
<android.app.NotificationManager: void cancel(java.lang.String,int)>:[5,25]
<android.app.NotificationManager: void notify(int,android.app.Notification)>:[1,25]
<android.app.NotificationManager: void notify(java.lang.String,int,android.app.Notification)>:[5,25]
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>:[1,25]
<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>:[1,25]
<android.app.Presentation: void <init>(android.content.Context,android.view.Display)>:[17,25]
<android.app.ProgressDialog: android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence)>:[1,25]
<android.app.ProgressDialog: void setProgressNumberFormat(java.lang.String)>:[11,25]
<android.app.ProgressDialog: void setProgressPercentFormat(java.text.NumberFormat)>:[11,25]
<android.app.RemoteInput: android.os.Bundle getExtras()>:[21,25]
<android.app.RemoteInput: android.os.Bundle getResultsFromIntent(android.content.Intent)>:[21,25]
<android.app.RemoteInput: boolean getAllowFreeFormInput()>:[21,25]
<android.app.RemoteInput: java.lang.CharSequence getLabel()>:[21,25]
<android.app.RemoteInput: java.lang.CharSequence[] getChoices()>:[21,25]
<android.app.RemoteInput: java.lang.String getResultKey()>:[21,25]
<android.app.RemoteInput: void addResultsToIntent(android.app.RemoteInput[],android.content.Intent,android.os.Bundle)>:[21,25]
<android.app.SearchManager: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)>:[8,25]
<android.app.SearchableInfo: android.content.ComponentName getSearchActivity()>:[8,25]
<android.app.SearchableInfo: boolean getVoiceSearchEnabled()>:[8,25]
<android.app.SearchableInfo: boolean getVoiceSearchLaunchRecognizer()>:[8,25]
<android.app.SearchableInfo: boolean getVoiceSearchLaunchWebSearch()>:[8,25]
<android.app.SearchableInfo: int getHintId()>:[8,25]
<android.app.SearchableInfo: int getImeOptions()>:[8,25]
<android.app.SearchableInfo: int getInputType()>:[8,25]
<android.app.SearchableInfo: int getSuggestThreshold()>:[8,25]
<android.app.SearchableInfo: int getVoiceLanguageId()>:[8,25]
<android.app.SearchableInfo: int getVoiceLanguageModeId()>:[8,25]
<android.app.SearchableInfo: int getVoiceMaxResults()>:[8,25]
<android.app.SearchableInfo: int getVoicePromptTextId()>:[8,25]
<android.app.SearchableInfo: java.lang.String getSuggestAuthority()>:[8,25]
<android.app.SearchableInfo: java.lang.String getSuggestIntentAction()>:[8,25]
<android.app.SearchableInfo: java.lang.String getSuggestIntentData()>:[8,25]
<android.app.SearchableInfo: java.lang.String getSuggestPath()>:[8,25]
<android.app.SearchableInfo: java.lang.String getSuggestSelection()>:[8,25]
<android.app.Service: void <init>()>:[1,25]
<android.app.Service: void onTaskRemoved(android.content.Intent)>:[14,25]
<android.app.Service: void setForeground(boolean)>:[1,10]
<android.app.Service: void startForeground(int,android.app.Notification)>:[5,25]
<android.app.Service: void stopForeground(boolean)>:[5,25]
<android.app.SharedElementCallback: void <init>()>:[21,25]
<android.app.TabActivity: void <init>()>:[1,25]
<android.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int)>:[16,25]
<android.app.TaskStackBuilder: android.app.TaskStackBuilder addNextIntent(android.content.Intent)>:[16,25]
<android.app.TaskStackBuilder: android.app.TaskStackBuilder addNextIntentWithParentStack(android.content.Intent)>:[16,25]
<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(java.lang.Class)>:[16,25]
<android.app.TaskStackBuilder: android.app.TaskStackBuilder create(android.content.Context)>:[16,25]
<android.app.TaskStackBuilder: void startActivities()>:[16,25]
<android.app.WallpaperInfo: java.lang.String getPackageName()>:[7,25]
<android.app.WallpaperInfo: java.lang.String getSettingsActivity()>:[7,25]
<android.app.WallpaperManager: android.app.WallpaperInfo getWallpaperInfo()>:[7,25]
<android.app.WallpaperManager: android.app.WallpaperManager getInstance(android.content.Context)>:[5,25]
<android.app.WallpaperManager: void sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)>:[7,25]
<android.app.WallpaperManager: void setBitmap(android.graphics.Bitmap)>:[5,25]
<android.app.WallpaperManager: void setStream(java.io.InputStream)>:[5,25]
<android.app.WallpaperManager: void setWallpaperOffsetSteps(float,float)>:[7,25]
<android.app.admin.DevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName)>:[14,25]
<android.app.admin.DevicePolicyManager: boolean isAdminActive(android.content.ComponentName)>:[8,25]
<android.app.admin.DevicePolicyManager: long getMaximumTimeToLock(android.content.ComponentName)>:[8,25]
<android.app.admin.DevicePolicyManager: void lockNow()>:[8,25]
<android.app.admin.DevicePolicyManager: void removeActiveAdmin(android.content.ComponentName)>:[8,25]
<android.app.admin.DevicePolicyManager: void setMaximumTimeToLock(android.content.ComponentName,long)>:[8,25]
<android.app.backup.BackupAgentHelper: void addHelper(java.lang.String,android.app.backup.BackupHelper)>:[8,25]
<android.app.backup.BackupAgentHelper: void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)>:[8,25]
<android.app.backup.BackupAgentHelper: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)>:[8,25]
<android.app.backup.BackupDataInputStream: java.lang.String getKey()>:[8,25]
<android.app.backup.BackupDataOutput: int writeEntityData(byte[],int)>:[8,25]
<android.app.backup.BackupDataOutput: int writeEntityHeader(java.lang.String,int)>:[8,25]
<android.app.backup.BackupManager: void <init>(android.content.Context)>:[8,25]
<android.app.backup.BackupManager: void dataChanged()>:[8,25]
<android.app.backup.BackupManager: void dataChanged(java.lang.String)>:[8,25]
<android.app.backup.SharedPreferencesBackupHelper: void performBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)>:[8,25]
<android.app.backup.SharedPreferencesBackupHelper: void restoreEntity(android.app.backup.BackupDataInputStream)>:[8,25]
<android.app.job.JobScheduler: int schedule(android.app.job.JobInfo)>:[21,25]
<android.app.job.JobScheduler: void cancel(int)>:[21,25]
<android.app.usage.UsageStats: java.lang.String getPackageName()>:[21,25]
<android.app.usage.UsageStats: long getLastTimeUsed()>:[21,25]
<android.app.usage.UsageStats: long getTotalTimeInForeground()>:[21,25]
<android.app.usage.UsageStatsManager: java.util.List queryUsageStats(int,long,long)>:[21,25]
<android.app.usage.UsageStatsManager: java.util.Map queryAndAggregateUsageStats(long,long)>:[21,25]
<android.appwidget.AppWidgetManager: android.os.Bundle getAppWidgetOptions(int)>:[16,25]
<android.appwidget.AppWidgetManager: boolean bindAppWidgetIdIfAllowed(int,android.content.ComponentName,android.os.Bundle)>:[17,25]
<android.appwidget.AppWidgetManager: void bindAppWidgetId(int,android.content.ComponentName)>:[3,15]
<android.appwidget.AppWidgetManager: void notifyAppWidgetViewDataChanged(int,int)>:[11,25]
<android.appwidget.AppWidgetManager: void notifyAppWidgetViewDataChanged(int[],int)>:[11,25]
<android.appwidget.AppWidgetManager: void partiallyUpdateAppWidget(int[],android.widget.RemoteViews)>:[11,25]
<android.appwidget.AppWidgetProvider: void onAppWidgetOptionsChanged(android.content.Context,android.appwidget.AppWidgetManager,int,android.os.Bundle)>:[16,25]
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothAdapter getDefaultAdapter()>:[5,25]
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothDevice getRemoteDevice(java.lang.String)>:[5,25]
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)>:[5,25]
<android.bluetooth.BluetoothAdapter: android.bluetooth.le.BluetoothLeAdvertiser getBluetoothLeAdvertiser()>:[21,25]
<android.bluetooth.BluetoothAdapter: android.bluetooth.le.BluetoothLeScanner getBluetoothLeScanner()>:[21,25]
<android.bluetooth.BluetoothAdapter: boolean cancelDiscovery()>:[5,25]
<android.bluetooth.BluetoothAdapter: boolean disable()>:[5,25]
<android.bluetooth.BluetoothAdapter: boolean enable()>:[5,25]
<android.bluetooth.BluetoothAdapter: boolean isDiscovering()>:[5,25]
<android.bluetooth.BluetoothAdapter: boolean isEnabled()>:[5,25]
<android.bluetooth.BluetoothAdapter: boolean isMultipleAdvertisementSupported()>:[21,25]
<android.bluetooth.BluetoothAdapter: java.util.Set getBondedDevices()>:[5,25]
<android.bluetooth.BluetoothClass: int getMajorDeviceClass()>:[5,25]
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothClass getBluetoothClass()>:[5,25]
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothGatt connectGatt(android.content.Context,boolean,android.bluetooth.BluetoothGattCallback)>:[18,25]
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createInsecureRfcommSocketToServiceRecord(java.util.UUID)>:[10,25]
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createRfcommSocketToServiceRecord(java.util.UUID)>:[5,25]
<android.bluetooth.BluetoothDevice: int getBondState()>:[5,25]
<android.bluetooth.BluetoothDevice: int getType()>:[18,25]
<android.bluetooth.BluetoothDevice: java.lang.String getAddress()>:[5,25]
<android.bluetooth.BluetoothDevice: java.lang.String getName()>:[5,25]
<android.bluetooth.BluetoothGatt: android.bluetooth.BluetoothGattService getService(java.util.UUID)>:[18,25]
<android.bluetooth.BluetoothGatt: boolean connect()>:[18,25]
<android.bluetooth.BluetoothGatt: boolean discoverServices()>:[18,25]
<android.bluetooth.BluetoothGatt: boolean readCharacteristic(android.bluetooth.BluetoothGattCharacteristic)>:[18,25]
<android.bluetooth.BluetoothGatt: boolean readDescriptor(android.bluetooth.BluetoothGattDescriptor)>:[18,25]
<android.bluetooth.BluetoothGatt: boolean setCharacteristicNotification(android.bluetooth.BluetoothGattCharacteristic,boolean)>:[18,25]
<android.bluetooth.BluetoothGatt: boolean writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic)>:[18,25]
<android.bluetooth.BluetoothGatt: boolean writeDescriptor(android.bluetooth.BluetoothGattDescriptor)>:[18,25]
<android.bluetooth.BluetoothGatt: java.util.List getServices()>:[18,25]
<android.bluetooth.BluetoothGatt: void close()>:[18,25]
<android.bluetooth.BluetoothGatt: void disconnect()>:[18,25]
<android.bluetooth.BluetoothGattCallback: void <init>()>:[18,25]
<android.bluetooth.BluetoothGattCallback: void onCharacteristicWrite(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattCharacteristic,int)>:[18,25]
<android.bluetooth.BluetoothGattCallback: void onDescriptorWrite(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattDescriptor,int)>:[18,25]
<android.bluetooth.BluetoothGattCallback: void onReadRemoteRssi(android.bluetooth.BluetoothGatt,int,int)>:[18,25]
<android.bluetooth.BluetoothGattCallback: void onReliableWriteCompleted(android.bluetooth.BluetoothGatt,int)>:[18,25]
<android.bluetooth.BluetoothGattCharacteristic: android.bluetooth.BluetoothGattDescriptor getDescriptor(java.util.UUID)>:[18,25]
<android.bluetooth.BluetoothGattCharacteristic: boolean setValue(byte[])>:[18,25]
<android.bluetooth.BluetoothGattCharacteristic: byte[] getValue()>:[18,25]
<android.bluetooth.BluetoothGattCharacteristic: java.lang.Integer getIntValue(int,int)>:[18,25]
<android.bluetooth.BluetoothGattCharacteristic: java.util.UUID getUuid()>:[18,25]
<android.bluetooth.BluetoothGattDescriptor: android.bluetooth.BluetoothGattCharacteristic getCharacteristic()>:[18,25]
<android.bluetooth.BluetoothGattDescriptor: boolean setValue(byte[])>:[18,25]
<android.bluetooth.BluetoothGattService: android.bluetooth.BluetoothGattCharacteristic getCharacteristic(java.util.UUID)>:[18,25]
<android.bluetooth.BluetoothGattService: int getInstanceId()>:[18,25]
<android.bluetooth.BluetoothGattService: int getType()>:[18,25]
<android.bluetooth.BluetoothGattService: java.util.List getCharacteristics()>:[18,25]
<android.bluetooth.BluetoothGattService: java.util.List getIncludedServices()>:[18,25]
<android.bluetooth.BluetoothGattService: java.util.UUID getUuid()>:[18,25]
<android.bluetooth.BluetoothManager: android.bluetooth.BluetoothAdapter getAdapter()>:[18,25]
<android.bluetooth.BluetoothServerSocket: android.bluetooth.BluetoothSocket accept()>:[5,25]
<android.bluetooth.BluetoothServerSocket: void close()>:[5,25]
<android.bluetooth.BluetoothSocket: android.bluetooth.BluetoothDevice getRemoteDevice()>:[5,25]
<android.bluetooth.BluetoothSocket: java.io.InputStream getInputStream()>:[5,25]
<android.bluetooth.BluetoothSocket: java.io.OutputStream getOutputStream()>:[5,25]
<android.bluetooth.BluetoothSocket: void close()>:[5,25]
<android.bluetooth.BluetoothSocket: void connect()>:[5,25]
<android.bluetooth.le.AdvertiseCallback: void <init>()>:[21,25]
<android.bluetooth.le.AdvertiseCallback: void onStartFailure(int)>:[21,25]
<android.bluetooth.le.AdvertiseCallback: void onStartSuccess(android.bluetooth.le.AdvertiseSettings)>:[21,25]
<android.bluetooth.le.BluetoothLeAdvertiser: void startAdvertising(android.bluetooth.le.AdvertiseSettings,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseCallback)>:[21,25]
<android.bluetooth.le.BluetoothLeAdvertiser: void stopAdvertising(android.bluetooth.le.AdvertiseCallback)>:[21,25]
<android.bluetooth.le.BluetoothLeScanner: void startScan(java.util.List,android.bluetooth.le.ScanSettings,android.bluetooth.le.ScanCallback)>:[21,25]
<android.bluetooth.le.BluetoothLeScanner: void stopScan(android.bluetooth.le.ScanCallback)>:[21,25]
<android.bluetooth.le.ScanCallback: void <init>()>:[21,25]
<android.bluetooth.le.ScanRecord: byte[] getBytes()>:[21,25]
<android.bluetooth.le.ScanRecord: java.util.List getServiceUuids()>:[21,25]
<android.bluetooth.le.ScanResult: android.bluetooth.BluetoothDevice getDevice()>:[21,25]
<android.bluetooth.le.ScanResult: android.bluetooth.le.ScanRecord getScanRecord()>:[21,25]
<android.bluetooth.le.ScanResult: int getRssi()>:[21,25]
<android.content.AbstractThreadedSyncAdapter: void <init>(android.content.Context,boolean)>:[5,25]
<android.content.AbstractThreadedSyncAdapter: void <init>(android.content.Context,boolean,boolean)>:[11,25]
<android.content.AsyncTaskLoader: void <init>(android.content.Context)>:[11,25]
<android.content.AsyncTaskLoader: void cancelLoadInBackground()>:[16,25]
<android.content.BroadcastReceiver: void <init>()>:[1,25]
<android.content.ClipData: android.content.ClipData newPlainText(java.lang.CharSequence,java.lang.CharSequence)>:[11,25]
<android.content.ClipData: int getItemCount()>:[11,25]
<android.content.ClipDescription: boolean hasMimeType(java.lang.String)>:[11,25]
<android.content.ClipboardManager: android.content.ClipData getPrimaryClip()>:[11,25]
<android.content.ClipboardManager: android.content.ClipDescription getPrimaryClipDescription()>:[11,25]
<android.content.ClipboardManager: boolean hasPrimaryClip()>:[11,25]
<android.content.ClipboardManager: void setPrimaryClip(android.content.ClipData)>:[11,25]
<android.content.ContentProvider: void shutdown()>:[11,25]
<android.content.ContentResolver: android.content.ContentProviderResult[] applyBatch(java.lang.String,java.util.ArrayList)>:[5,25]
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>:[1,25]
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>:[16,25]
<android.content.ContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>:[8,25]
<android.content.ContentResolver: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)>:[5,25]
<android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>:[5,25]
<android.content.ContentResolver: void takePersistableUriPermission(android.net.Uri,int)>:[19,25]
<android.content.ContentValues: java.util.Set keySet()>:[11,25]
<android.content.ContentValues: void <init>()>:[1,25]
<android.content.ContentValues: void clear()>:[1,25]
<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>:[1,25]
<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>:[1,25]
<android.content.ContentValues: void put(java.lang.String,java.lang.String)>:[1,25]
<android.content.Context: android.content.ContentResolver getContentResolver()>:[1,25]
<android.content.Context: android.content.Context getApplicationContext()>:[1,25]
<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>:[1,25]
<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>:[4,25]
<android.content.Context: android.content.pm.PackageManager getPackageManager()>:[1,25]
<android.content.Context: android.content.res.ColorStateList getColorStateList(int)>:[23,25]
<android.content.Context: android.content.res.Resources getResources()>:[1,25]
<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>:[21,25]
<android.content.Context: int checkSelfPermission(java.lang.String)>:[23,25]
<android.content.Context: int getColor(int)>:[23,25]
<android.content.Context: java.io.File getCodeCacheDir()>:[21,25]
<android.content.Context: java.io.File getExternalCacheDir()>:[8,25]
<android.content.Context: java.io.File getExternalFilesDir(java.lang.String)>:[8,25]
<android.content.Context: java.io.File getNoBackupFilesDir()>:[21,25]
<android.content.Context: java.io.File[] getExternalCacheDirs()>:[19,25]
<android.content.Context: java.io.File[] getExternalFilesDirs(java.lang.String)>:[19,25]
<android.content.Context: java.io.File[] getExternalMediaDirs()>:[21,25]
<android.content.Context: java.io.File[] getObbDirs()>:[19,25]
<android.content.Context: java.lang.Object getSystemService(java.lang.String)>:[1,25]
<android.content.Context: java.lang.String getPackageName()>:[1,25]
<android.content.Context: java.lang.String getString(int)>:[1,25]
<android.content.Context: void sendBroadcast(android.content.Intent)>:[1,25]
<android.content.Context: void startActivities(android.content.Intent[])>:[11,25]
<android.content.Context: void startActivities(android.content.Intent[],android.os.Bundle)>:[16,25]
<android.content.Context: void startActivity(android.content.Intent,android.os.Bundle)>:[16,25]
<android.content.ContextWrapper: java.io.File getExternalCacheDir()>:[8,25]
<android.content.Intent: android.content.ClipData getClipData()>:[16,25]
<android.content.Intent: android.content.Intent makeMainActivity(android.content.ComponentName)>:[11,25]
<android.content.Intent: android.content.Intent makeRestartActivityTask(android.content.ComponentName)>:[11,25]
<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>:[1,25]
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>:[1,25]
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.io.Serializable)>:[1,25]
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>:[1,25]
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String[])>:[1,25]
<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>:[1,25]
<android.content.Intent: android.content.Intent putExtras(android.os.Bundle)>:[1,25]
<android.content.Intent: android.content.Intent putStringArrayListExtra(java.lang.String,java.util.ArrayList)>:[1,25]
<android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)>:[1,25]
<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>:[1,25]
<android.content.Intent: android.content.Intent setData(android.net.Uri)>:[1,25]
<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)>:[1,25]
<android.content.Intent: android.content.Intent setFlags(int)>:[1,25]
<android.content.Intent: android.content.Intent setPackage(java.lang.String)>:[4,25]
<android.content.Intent: android.net.Uri getData()>:[1,25]
<android.content.Intent: android.os.Bundle getExtras()>:[1,25]
<android.content.Intent: boolean getBooleanExtra(java.lang.String,boolean)>:[1,25]
<android.content.Intent: int getIntExtra(java.lang.String,int)>:[1,25]
<android.content.Intent: java.io.Serializable getSerializableExtra(java.lang.String)>:[1,25]
<android.content.Intent: java.lang.String getAction()>:[1,25]
<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>:[1,25]
<android.content.Intent: java.lang.String[] getStringArrayExtra(java.lang.String)>:[1,25]
<android.content.Intent: java.util.ArrayList getStringArrayListExtra(java.lang.String)>:[1,25]
<android.content.Intent: long getLongExtra(java.lang.String,long)>:[1,25]
<android.content.Intent: void <init>()>:[1,25]
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>:[1,25]
<android.content.Intent: void <init>(java.lang.String)>:[1,25]
<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>:[1,25]
<android.content.Intent: void setClipData(android.content.ClipData)>:[16,25]
<android.content.Intent: void setSelector(android.content.Intent)>:[15,25]
<android.content.Intent: void setSourceBounds(android.graphics.Rect)>:[7,25]
<android.content.IntentFilter: void <init>(java.lang.String)>:[1,25]
<android.content.RestrictionEntry: void <init>(java.lang.String,boolean)>:[18,25]
<android.content.RestrictionEntry: void setTitle(java.lang.String)>:[18,25]
<android.content.pm.FeatureInfo: java.lang.String getGlEsVersion()>:[5,25]
<android.content.pm.PackageManager: android.content.pm.FeatureInfo[] getSystemAvailableFeatures()>:[5,25]
<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>:[1,25]
<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.ComponentName)>:[9,25]
<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>:[5,25]
<android.content.res.Configuration: int getLayoutDirection()>:[17,25]
<android.content.res.Configuration: void setLayoutDirection(java.util.Locale)>:[17,25]
<android.content.res.Configuration: void setLocale(java.util.Locale)>:[17,25]
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>:[1,25]
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawableForDensity(int,int)>:[15,25]
<android.content.res.Resources: int getColor(int)>:[1,25]
<android.content.res.Resources: java.io.InputStream openRawResource(int)>:[1,25]
<android.content.res.Resources: java.lang.CharSequence getText(int)>:[1,25]
<android.content.res.Resources: java.lang.String getString(int)>:[1,25]
<android.content.res.TypedArray: int getChangingConfigurations()>:[21,25]
<android.content.res.TypedArray: int getType(int)>:[21,25]
<android.database.DatabaseUtils: long queryNumEntries(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,java.lang.String[])>:[11,25]
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>:[16,25]
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>:[1,25]
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>:[1,25]
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>:[1,25]
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[],android.os.CancellationSignal)>:[16,25]
<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>:[1,25]
<android.database.sqlite.SQLiteDatabase: boolean isWriteAheadLoggingEnabled()>:[16,25]
<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>:[1,25]
<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>:[1,25]
<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>:[1,25]
<android.database.sqlite.SQLiteDatabase: long replaceOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)>:[1,25]
<android.database.sqlite.SQLiteDatabase: void beginTransaction()>:[1,25]
<android.database.sqlite.SQLiteDatabase: void close()>:[1,25]
<android.database.sqlite.SQLiteDatabase: void disableWriteAheadLogging()>:[16,25]
<android.database.sqlite.SQLiteDatabase: void endTransaction()>:[1,25]
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>:[1,25]
<android.database.sqlite.SQLiteDatabase: void setForeignKeyConstraintsEnabled(boolean)>:[16,25]
<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>:[1,25]
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>:[1,25]
<android.database.sqlite.SQLiteOpenHelper: void onConfigure(android.database.sqlite.SQLiteDatabase)>:[16,25]
<android.database.sqlite.SQLiteStatement: int executeUpdateDelete()>:[11,25]
<android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>:[1,25]
<android.graphics.Bitmap: boolean hasMipMap()>:[17,25]
<android.graphics.Bitmap: int getAllocationByteCount()>:[19,25]
<android.graphics.Bitmap: int getByteCount()>:[12,25]
<android.graphics.Bitmap: void recycle()>:[1,25]
<android.graphics.Bitmap: void setHasAlpha(boolean)>:[12,25]
<android.graphics.Bitmap: void setHasMipMap(boolean)>:[17,25]
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int)>:[1,25]
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int)>:[1,25]
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>:[1,25]
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(byte[],int,int,boolean)>:[10,25]
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(java.io.FileDescriptor,boolean)>:[10,25]
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(java.io.InputStream,boolean)>:[10,25]
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(java.lang.String,boolean)>:[10,25]
<android.graphics.BitmapRegionDecoder: boolean isRecycled()>:[10,25]
<android.graphics.BitmapRegionDecoder: int getHeight()>:[10,25]
<android.graphics.BitmapRegionDecoder: int getWidth()>:[10,25]
<android.graphics.BitmapRegionDecoder: void recycle()>:[10,25]
<android.graphics.Canvas: boolean isHardwareAccelerated()>:[11,25]
<android.graphics.Canvas: int getMaximumBitmapHeight()>:[14,25]
<android.graphics.Canvas: int getMaximumBitmapWidth()>:[14,25]
<android.graphics.Canvas: void <init>()>:[1,25]
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>:[1,25]
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>:[1,25]
<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>:[1,25]
<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>:[1,25]
<android.graphics.Canvas: void drawRGB(int,int,int)>:[1,25]
<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>:[1,25]
<android.graphics.Canvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)>:[1,25]
<android.graphics.Canvas: void drawRoundRect(float,float,float,float,float,float,android.graphics.Paint)>:[21,25]
<android.graphics.Canvas: void drawText(java.lang.String,float,float,android.graphics.Paint)>:[1,25]
<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>:[1,25]
<android.graphics.Color: int argb(int,int,int,int)>:[1,25]
<android.graphics.Color: int parseColor(java.lang.String)>:[1,25]
<android.graphics.Matrix: boolean setConcat(android.graphics.Matrix,android.graphics.Matrix)>:[1,25]
<android.graphics.Matrix: void <init>()>:[1,25]
<android.graphics.Matrix: void setScale(float,float)>:[1,25]
<android.graphics.Matrix: void setTranslate(float,float)>:[1,25]
<android.graphics.Outline: void setOval(android.graphics.Rect)>:[21,25]
<android.graphics.Outline: void setOval(int,int,int,int)>:[21,25]
<android.graphics.Outline: void setRoundRect(android.graphics.Rect,float)>:[21,25]
<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>:[1,25]
<android.graphics.Paint: android.graphics.Typeface setTypeface(android.graphics.Typeface)>:[1,25]
<android.graphics.Paint: void <init>()>:[1,25]
<android.graphics.Paint: void <init>(int)>:[1,25]
<android.graphics.Paint: void setARGB(int,int,int,int)>:[1,25]
<android.graphics.Paint: void setAntiAlias(boolean)>:[1,25]
<android.graphics.Paint: void setColor(int)>:[1,25]
<android.graphics.Paint: void setHinting(int)>:[14,25]
<android.graphics.Paint: void setStrokeWidth(float)>:[1,25]
<android.graphics.Paint: void setTextSize(float)>:[1,25]
<android.graphics.Picture: android.graphics.Canvas beginRecording(int,int)>:[1,25]
<android.graphics.Picture: void <init>()>:[1,25]
<android.graphics.Picture: void draw(android.graphics.Canvas)>:[1,25]
<android.graphics.Picture: void endRecording()>:[1,25]
<android.graphics.PixelXorXfermode: void <init>(int)>:[1,23]
<android.graphics.Rect: boolean contains(int,int)>:[1,25]
<android.graphics.Rect: void <init>()>:[1,25]
<android.graphics.Rect: void <init>(int,int,int,int)>:[1,25]
<android.graphics.Rect: void offsetTo(int,int)>:[1,25]
<android.graphics.RectF: void <init>(float,float,float,float)>:[1,25]
<android.graphics.SurfaceTexture: void <init>(int)>:[11,25]
<android.graphics.SurfaceTexture: void getTransformMatrix(float[])>:[11,25]
<android.graphics.SurfaceTexture: void release()>:[14,25]
<android.graphics.SurfaceTexture: void setDefaultBufferSize(int,int)>:[15,25]
<android.graphics.SurfaceTexture: void updateTexImage()>:[11,25]
<android.graphics.drawable.AnimatedVectorDrawable: boolean isRunning()>:[21,25]
<android.graphics.drawable.AnimatedVectorDrawable: void start()>:[21,25]
<android.graphics.drawable.AnimatedVectorDrawable: void stop()>:[21,25]
<android.graphics.drawable.BitmapDrawable: void <init>(android.graphics.Bitmap)>:[1,25]
<android.graphics.drawable.ColorDrawable: int getColor()>:[11,25]
<android.graphics.drawable.Drawable: android.graphics.Rect getDirtyBounds()>:[21,25]
<android.graphics.drawable.Drawable: boolean canApplyTheme()>:[21,25]
<android.graphics.drawable.Drawable: boolean isAutoMirrored()>:[19,25]
<android.graphics.drawable.Drawable: boolean setLayoutDirection(int)>:[23,25]
<android.graphics.drawable.Drawable: int getLayoutDirection()>:[23,25]
<android.graphics.drawable.Drawable: void getOutline(android.graphics.Outline)>:[21,25]
<android.graphics.drawable.Drawable: void jumpToCurrentState()>:[11,25]
<android.graphics.drawable.Drawable: void setAutoMirrored(boolean)>:[19,25]
<android.graphics.drawable.Drawable: void setHotspot(float,float)>:[21,25]
<android.graphics.drawable.Drawable: void setHotspotBounds(int,int,int,int)>:[21,25]
<android.graphics.drawable.Drawable: void setTint(int)>:[21,25]
<android.graphics.drawable.Drawable: void setTintList(android.content.res.ColorStateList)>:[21,25]
<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithResource(android.content.Context,int)>:[23,25]
<android.graphics.drawable.RippleDrawable: void <init>(android.content.res.ColorStateList,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>:[21,25]
<android.graphics.drawable.RippleDrawable: void setColor(android.content.res.ColorStateList)>:[21,25]
<android.hardware.Camera: android.hardware.Camera open(int)>:[9,25]
<android.hardware.Camera: boolean enableShutterSound(boolean)>:[17,25]
<android.hardware.Camera: int getNumberOfCameras()>:[9,25]
<android.hardware.Camera: void reconnect()>:[8,25]
<android.hardware.Camera: void setPreviewTexture(android.graphics.SurfaceTexture)>:[11,25]
<android.hardware.Camera: void startFaceDetection()>:[14,25]
<android.hardware.Camera: void stopFaceDetection()>:[14,25]
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>:[1,25]
<android.hardware.SensorManager: boolean requestTriggerSensor(android.hardware.TriggerEventListener,android.hardware.Sensor)>:[18,25]
<android.hardware.SensorManager: void getRotationMatrixFromVector(float[],float[])>:[9,25]
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorListener)>:[1,25]
<android.hardware.TriggerEventListener: void <init>()>:[18,25]
<android.hardware.camera2.CameraCaptureSession: void close()>:[21,25]
<android.hardware.camera2.CameraCaptureSession: void stopRepeating()>:[21,25]
<android.hardware.camera2.CameraDevice: void close()>:[21,25]
<android.hardware.camera2.CameraManager: android.hardware.camera2.CameraCharacteristics getCameraCharacteristics(java.lang.String)>:[21,25]
<android.hardware.camera2.CameraManager: java.lang.String[] getCameraIdList()>:[21,25]
<android.hardware.camera2.CameraManager: void setTorchMode(java.lang.String,boolean)>:[23,25]
<android.hardware.camera2.CaptureRequest: java.lang.Object getTag()>:[21,25]
<android.hardware.camera2.CaptureResult: long getFrameNumber()>:[21,25]
<android.hardware.camera2.params.Face: android.graphics.Rect getBounds()>:[21,25]
<android.hardware.camera2.params.Face: int getScore()>:[21,25]
<android.hardware.camera2.params.MeteringRectangle: android.graphics.Rect getRect()>:[21,25]
<android.hardware.camera2.params.MeteringRectangle: int getMeteringWeight()>:[21,25]
<android.hardware.camera2.params.MeteringRectangle: void <init>(android.graphics.Rect,int)>:[21,25]
<android.hardware.camera2.params.MeteringRectangle: void <init>(int,int,int,int,int)>:[21,25]
<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(int)>:[21,25]
<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(java.lang.Class)>:[21,25]
<android.hardware.display.DisplayManager: android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String,int,int,int,android.view.Surface,int)>:[19,25]
<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)>:[17,25]
<android.hardware.display.DisplayManager: android.view.Display[] getDisplays()>:[17,25]
<android.hardware.display.DisplayManager: android.view.Display[] getDisplays(java.lang.String)>:[17,25]
<android.hardware.usb.UsbDevice: android.hardware.usb.UsbInterface getInterface(int)>:[12,25]
<android.hardware.usb.UsbDevice: int getDeviceClass()>:[12,25]
<android.hardware.usb.UsbDevice: int getDeviceId()>:[12,25]
<android.hardware.usb.UsbDevice: int getInterfaceCount()>:[12,25]
<android.hardware.usb.UsbDevice: int getProductId()>:[12,25]
<android.hardware.usb.UsbDevice: int getVendorId()>:[12,25]
<android.hardware.usb.UsbDevice: java.lang.String getDeviceName()>:[12,25]
<android.hardware.usb.UsbDevice: java.lang.String getDeviceName(int)>:[12,25]
<android.hardware.usb.UsbDeviceConnection: android.hardware.usb.UsbRequest requestWait()>:[12,25]
<android.hardware.usb.UsbDeviceConnection: boolean claimInterface(android.hardware.usb.UsbInterface,boolean)>:[12,25]
<android.hardware.usb.UsbDeviceConnection: boolean releaseInterface(android.hardware.usb.UsbInterface)>:[12,25]
<android.hardware.usb.UsbDeviceConnection: byte[] getRawDescriptors()>:[13,25]
<android.hardware.usb.UsbDeviceConnection: int bulkTransfer(android.hardware.usb.UsbEndpoint,byte[],int,int)>:[12,25]
<android.hardware.usb.UsbDeviceConnection: int controlTransfer(int,int,int,int,byte[],int,int)>:[12,25]
<android.hardware.usb.UsbDeviceConnection: int getFileDescriptor()>:[12,25]
<android.hardware.usb.UsbDeviceConnection: java.lang.String getSerial()>:[12,25]
<android.hardware.usb.UsbDeviceConnection: void close()>:[12,25]
<android.hardware.usb.UsbEndpoint: int getAddress()>:[12,25]
<android.hardware.usb.UsbEndpoint: int getDirection()>:[12,25]
<android.hardware.usb.UsbEndpoint: int getMaxPacketSize()>:[12,25]
<android.hardware.usb.UsbEndpoint: int getType()>:[12,25]
<android.hardware.usb.UsbInterface: android.hardware.usb.UsbEndpoint getEndpoint(int)>:[12,25]
<android.hardware.usb.UsbInterface: int getEndpointCount()>:[12,25]
<android.hardware.usb.UsbInterface: int getInterfaceClass()>:[12,25]
<android.hardware.usb.UsbInterface: int getInterfaceProtocol()>:[12,25]
<android.hardware.usb.UsbInterface: int getInterfaceSubclass()>:[12,25]
<android.hardware.usb.UsbManager: android.hardware.usb.UsbAccessory[] getAccessoryList()>:[12,25]
<android.hardware.usb.UsbManager: android.hardware.usb.UsbDeviceConnection openDevice(android.hardware.usb.UsbDevice)>:[12,25]
<android.hardware.usb.UsbManager: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)>:[12,25]
<android.hardware.usb.UsbManager: boolean hasPermission(android.hardware.usb.UsbAccessory)>:[12,25]
<android.hardware.usb.UsbManager: boolean hasPermission(android.hardware.usb.UsbDevice)>:[12,25]
<android.hardware.usb.UsbManager: java.util.HashMap getDeviceList()>:[12,25]
<android.hardware.usb.UsbManager: void requestPermission(android.hardware.usb.UsbAccessory,android.app.PendingIntent)>:[12,25]
<android.hardware.usb.UsbManager: void requestPermission(android.hardware.usb.UsbDevice,android.app.PendingIntent)>:[12,25]
<android.hardware.usb.UsbRequest: boolean initialize(android.hardware.usb.UsbDeviceConnection,android.hardware.usb.UsbEndpoint)>:[12,25]
<android.hardware.usb.UsbRequest: boolean queue(java.nio.ByteBuffer,int)>:[12,25]
<android.hardware.usb.UsbRequest: void <init>()>:[12,25]
<android.hardware.usb.UsbRequest: void close()>:[12,25]
<android.hardware.usb.UsbRequest: void setClientData(java.lang.Object)>:[12,25]
<android.inputmethodservice.Keyboard: void <init>(android.content.Context,int)>:[3,25]
<android.location.Location: boolean hasSpeed()>:[1,25]
<android.location.Location: float getSpeed()>:[1,25]
<android.location.Location: long getElapsedRealtimeNanos()>:[17,25]
<android.location.Location: void setElapsedRealtimeNanos(long)>:[17,25]
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>:[1,25]
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)>:[9,25]
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)>:[9,25]
<android.location.SettingInjectorService: void <init>(java.lang.String)>:[19,25]
<android.media.AudioManager: boolean isBluetoothScoAvailableOffCall()>:[8,25]
<android.media.AudioManager: boolean isWiredHeadsetOn()>:[5,25]
<android.media.AudioManager: boolean registerRemoteController(android.media.RemoteController)>:[19,25]
<android.media.AudioManager: int getStreamVolume(int)>:[1,25]
<android.media.AudioManager: java.lang.String getProperty(java.lang.String)>:[17,25]
<android.media.AudioManager: void registerMediaButtonEventReceiver(android.app.PendingIntent)>:[18,25]
<android.media.AudioManager: void registerMediaButtonEventReceiver(android.content.ComponentName)>:[8,25]
<android.media.AudioManager: void registerRemoteControlClient(android.media.RemoteControlClient)>:[14,25]
<android.media.AudioManager: void startBluetoothSco()>:[8,25]
<android.media.AudioManager: void stopBluetoothSco()>:[8,25]
<android.media.AudioManager: void unregisterMediaButtonEventReceiver(android.app.PendingIntent)>:[18,25]
<android.media.AudioManager: void unregisterMediaButtonEventReceiver(android.content.ComponentName)>:[8,25]
<android.media.AudioManager: void unregisterRemoteControlClient(android.media.RemoteControlClient)>:[14,25]
<android.media.AudioManager: void unregisterRemoteController(android.media.RemoteController)>:[19,25]
<android.media.AudioRecord: int getAudioSessionId()>:[16,25]
<android.media.CamcorderProfile: android.media.CamcorderProfile get(int)>:[8,25]
<android.media.CamcorderProfile: android.media.CamcorderProfile get(int,int)>:[9,25]
<android.media.CamcorderProfile: boolean hasProfile(int,int)>:[11,25]
<android.media.CameraProfile: int getJpegEncodingQualityParameter(int,int)>:[9,25]
<android.media.ExifInterface: int getAttributeInt(java.lang.String,int)>:[5,25]
<android.media.ExifInterface: void <init>(java.lang.String)>:[5,25]
<android.media.ExifInterface: void saveAttributes()>:[5,25]
<android.media.ExifInterface: void setAttribute(java.lang.String,java.lang.String)>:[5,25]
<android.media.Image: void close()>:[19,25]
<android.media.ImageReader: android.media.Image acquireNextImage()>:[19,25]
<android.media.ImageReader: android.media.ImageReader newInstance(int,int,int,int)>:[19,25]
<android.media.ImageReader: android.view.Surface getSurface()>:[19,25]
<android.media.ImageReader: void close()>:[19,25]
<android.media.MediaActionSound: void <init>()>:[16,25]
<android.media.MediaActionSound: void load(int)>:[16,25]
<android.media.MediaActionSound: void play(int)>:[16,25]
<android.media.MediaActionSound: void release()>:[16,25]
<android.media.MediaCodec: android.media.MediaCodec createDecoderByType(java.lang.String)>:[16,25]
<android.media.MediaCodec: android.media.MediaCodec createEncoderByType(java.lang.String)>:[16,25]
<android.media.MediaCodec: android.media.MediaFormat getOutputFormat()>:[16,25]
<android.media.MediaCodec: int dequeueInputBuffer(long)>:[16,25]
<android.media.MediaCodec: java.nio.ByteBuffer getInputBuffer(int)>:[21,25]
<android.media.MediaCodec: java.nio.ByteBuffer[] getInputBuffers()>:[16,25]
<android.media.MediaCodec: java.nio.ByteBuffer[] getOutputBuffers()>:[16,25]
<android.media.MediaCodec: void configure(android.media.MediaFormat,android.view.Surface,android.media.MediaCrypto,int)>:[16,25]
<android.media.MediaCodec: void flush()>:[16,25]
<android.media.MediaCodec: void queueInputBuffer(int,int,int,long,int)>:[16,25]
<android.media.MediaCodec: void release()>:[16,25]
<android.media.MediaCodec: void releaseOutputBuffer(int,boolean)>:[16,25]
<android.media.MediaCodec: void start()>:[16,25]
<android.media.MediaCodec: void stop()>:[16,25]
<android.media.MediaCodecInfo: boolean isEncoder()>:[16,25]
<android.media.MediaCodecInfo: java.lang.String getName()>:[16,25]
<android.media.MediaCodecInfo: java.lang.String[] getSupportedTypes()>:[16,25]
<android.media.MediaCodecList: android.media.MediaCodecInfo getCodecInfoAt(int)>:[16,25]
<android.media.MediaCodecList: android.media.MediaCodecInfo[] getCodecInfos()>:[21,25]
<android.media.MediaCodecList: int getCodecCount()>:[16,25]
<android.media.MediaCodecList: void <init>(int)>:[21,25]
<android.media.MediaDescription: android.net.Uri getMediaUri()>:[23,25]
<android.media.MediaDescription: java.lang.CharSequence getTitle()>:[21,25]
<android.media.MediaExtractor: android.media.MediaFormat getTrackFormat(int)>:[16,25]
<android.media.MediaExtractor: boolean advance()>:[16,25]
<android.media.MediaExtractor: int getTrackCount()>:[16,25]
<android.media.MediaExtractor: int readSampleData(java.nio.ByteBuffer,int)>:[16,25]
<android.media.MediaExtractor: long getSampleTime()>:[16,25]
<android.media.MediaExtractor: void <init>()>:[16,25]
<android.media.MediaExtractor: void release()>:[16,25]
<android.media.MediaExtractor: void seekTo(long,int)>:[16,25]
<android.media.MediaExtractor: void selectTrack(int)>:[16,25]
<android.media.MediaExtractor: void setDataSource(android.content.Context,android.net.Uri,java.util.Map)>:[16,25]
<android.media.MediaExtractor: void setDataSource(java.io.FileDescriptor,long,long)>:[16,25]
<android.media.MediaExtractor: void setDataSource(java.lang.String)>:[16,25]
<android.media.MediaExtractor: void unselectTrack(int)>:[16,25]
<android.media.MediaFormat: android.media.MediaFormat createVideoFormat(java.lang.String,int,int)>:[16,25]
<android.media.MediaFormat: boolean containsKey(java.lang.String)>:[16,25]
<android.media.MediaFormat: int getInteger(java.lang.String)>:[16,25]
<android.media.MediaFormat: java.lang.String getString(java.lang.String)>:[16,25]
<android.media.MediaFormat: long getLong(java.lang.String)>:[16,25]
<android.media.MediaFormat: void <init>()>:[16,25]
<android.media.MediaFormat: void setInteger(java.lang.String,int)>:[16,25]
<android.media.MediaFormat: void setString(java.lang.String,java.lang.String)>:[16,25]
<android.media.MediaMetadata: android.graphics.Bitmap getBitmap(java.lang.String)>:[21,25]
<android.media.MediaMetadata: android.media.MediaDescription getDescription()>:[21,25]
<android.media.MediaMetadata: java.lang.CharSequence getText(java.lang.String)>:[21,25]
<android.media.MediaMetadata: java.lang.String getString(java.lang.String)>:[21,25]
<android.media.MediaMetadata: long getLong(java.lang.String)>:[21,25]
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtTime()>:[10,25]
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtTime(long)>:[10,25]
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtTime(long,int)>:[10,25]
<android.media.MediaMetadataRetriever: java.lang.String extractMetadata(int)>:[10,25]
<android.media.MediaMetadataRetriever: void <init>()>:[10,25]
<android.media.MediaMetadataRetriever: void release()>:[10,25]
<android.media.MediaMetadataRetriever: void setDataSource(android.content.Context,android.net.Uri)>:[10,25]
<android.media.MediaMetadataRetriever: void setDataSource(java.io.FileDescriptor)>:[10,25]
<android.media.MediaMetadataRetriever: void setDataSource(java.lang.String)>:[10,25]
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>:[1,25]
<android.media.MediaPlayer: android.media.PlaybackParams getPlaybackParams()>:[23,25]
<android.media.MediaPlayer: boolean isPlaying()>:[1,25]
<android.media.MediaPlayer: int getAudioSessionId()>:[9,25]
<android.media.MediaPlayer: int getCurrentPosition()>:[1,25]
<android.media.MediaPlayer: int getDuration()>:[1,25]
<android.media.MediaPlayer: void <init>()>:[1,25]
<android.media.MediaPlayer: void pause()>:[1,25]
<android.media.MediaPlayer: void prepareAsync()>:[1,25]
<android.media.MediaPlayer: void release()>:[1,25]
<android.media.MediaPlayer: void reset()>:[1,25]
<android.media.MediaPlayer: void seekTo(int)>:[1,25]
<android.media.MediaPlayer: void setAudioAttributes(android.media.AudioAttributes)>:[21,25]
<android.media.MediaPlayer: void setAudioSessionId(int)>:[9,25]
<android.media.MediaPlayer: void setDataSource(java.lang.String)>:[1,25]
<android.media.MediaPlayer: void setLooping(boolean)>:[1,25]
<android.media.MediaPlayer: void setNextMediaPlayer(android.media.MediaPlayer)>:[16,25]
<android.media.MediaPlayer: void setPlaybackParams(android.media.PlaybackParams)>:[23,25]
<android.media.MediaPlayer: void setVideoScalingMode(int)>:[16,25]
<android.media.MediaPlayer: void setVolume(float,float)>:[1,25]
<android.media.MediaPlayer: void start()>:[1,25]
<android.media.MediaPlayer: void stop()>:[1,25]
<android.media.MediaRecorder: android.view.Surface getSurface()>:[21,25]
<android.media.MediaRecorder: void setProfile(android.media.CamcorderProfile)>:[8,25]
<android.media.PlaybackParams: android.media.PlaybackParams setPitch(float)>:[23,25]
<android.media.PlaybackParams: android.media.PlaybackParams setSpeed(float)>:[23,25]
<android.media.PlaybackParams: float getPitch()>:[23,25]
<android.media.Rating: android.media.Rating newHeartRating(boolean)>:[19,25]
<android.media.Rating: android.media.Rating newPercentageRating(float)>:[19,25]
<android.media.Rating: android.media.Rating newStarRating(int,float)>:[19,25]
<android.media.Rating: android.media.Rating newThumbRating(boolean)>:[19,25]
<android.media.Rating: android.media.Rating newUnratedRating(int)>:[19,25]
<android.media.Rating: boolean hasHeart()>:[19,25]
<android.media.Rating: boolean isRated()>:[19,25]
<android.media.Rating: boolean isThumbUp()>:[19,25]
<android.media.Rating: float getPercentRating()>:[19,25]
<android.media.Rating: float getStarRating()>:[19,25]
<android.media.Rating: int getRatingStyle()>:[19,25]
<android.media.RemoteControlClient: void <init>(android.app.PendingIntent)>:[14,25]
<android.media.RemoteControlClient: void setPlaybackState(int)>:[14,25]
<android.media.RemoteControlClient: void setPlaybackState(int,long,float)>:[18,25]
<android.media.RemoteControlClient: void setTransportControlFlags(int)>:[14,25]
<android.media.RemoteController: boolean seekTo(long)>:[19,25]
<android.media.RemoteController: boolean sendMediaKeyEvent(android.view.KeyEvent)>:[19,25]
<android.media.RemoteController: boolean setArtworkConfiguration(int,int)>:[19,25]
<android.media.RemoteController: long getEstimatedMediaPosition()>:[19,25]
<android.media.SoundPool: int load(android.content.Context,int,int)>:[1,25]
<android.media.SoundPool: int play(int,float,float,int,int,float)>:[1,25]
<android.media.SoundPool: void <init>(int,int,int)>:[1,25]
<android.media.ThumbnailUtils: android.graphics.Bitmap extractThumbnail(android.graphics.Bitmap,int,int,int)>:[8,25]
<android.media.VolumeProvider: void <init>(int,int,int)>:[21,25]
<android.media.audiofx.AcousticEchoCanceler: android.media.audiofx.AcousticEchoCanceler create(int)>:[16,25]
<android.media.audiofx.AcousticEchoCanceler: boolean isAvailable()>:[16,25]
<android.media.audiofx.Equalizer: int getCenterFreq(short)>:[9,25]
<android.media.audiofx.Equalizer: java.lang.String getPresetName(short)>:[9,25]
<android.media.audiofx.Equalizer: short getBandLevel(short)>:[9,25]
<android.media.audiofx.Equalizer: short getCurrentPreset()>:[9,25]
<android.media.audiofx.Equalizer: short getNumberOfBands()>:[9,25]
<android.media.audiofx.Equalizer: short getNumberOfPresets()>:[9,25]
<android.media.audiofx.Equalizer: short[] getBandLevelRange()>:[9,25]
<android.media.audiofx.Equalizer: void <init>(int,int)>:[9,25]
<android.media.audiofx.Equalizer: void setBandLevel(short,short)>:[9,25]
<android.media.audiofx.Equalizer: void usePreset(short)>:[9,25]
<android.media.audiofx.NoiseSuppressor: android.media.audiofx.NoiseSuppressor create(int)>:[16,25]
<android.media.audiofx.NoiseSuppressor: boolean isAvailable()>:[16,25]
<android.media.audiofx.Visualizer: boolean getEnabled()>:[9,25]
<android.media.audiofx.Visualizer: int getMaxCaptureRate()>:[9,25]
<android.media.audiofx.Visualizer: int setCaptureSize(int)>:[9,25]
<android.media.audiofx.Visualizer: int setEnabled(boolean)>:[9,25]
<android.media.audiofx.Visualizer: int[] getCaptureSizeRange()>:[9,25]
<android.media.audiofx.Visualizer: void <init>(int)>:[9,25]
<android.media.audiofx.Visualizer: void release()>:[9,25]
<android.media.session.MediaController: android.media.MediaMetadata getMetadata()>:[21,25]
<android.media.session.MediaController: android.media.session.PlaybackState getPlaybackState()>:[21,25]
<android.media.session.MediaController: java.lang.String getPackageName()>:[21,25]
<android.media.session.MediaSession: void <init>(android.content.Context,java.lang.String)>:[21,25]
<android.media.session.MediaSession: void release()>:[21,25]
<android.media.session.MediaSession: void setActive(boolean)>:[21,25]
<android.media.session.MediaSession: void setFlags(int)>:[21,25]
<android.media.session.MediaSession: void setMetadata(android.media.MediaMetadata)>:[21,25]
<android.media.session.MediaSession: void setPlaybackState(android.media.session.PlaybackState)>:[21,25]
<android.media.session.MediaSession: void setRatingType(int)>:[22,25]
<android.media.session.MediaSessionManager: java.util.List getActiveSessions(android.content.ComponentName)>:[21,25]
<android.media.session.PlaybackState: android.os.Bundle getExtras()>:[22,25]
<android.media.session.PlaybackState: float getPlaybackSpeed()>:[21,25]
<android.media.session.PlaybackState: int getState()>:[21,25]
<android.media.session.PlaybackState: java.lang.CharSequence getErrorMessage()>:[21,25]
<android.media.session.PlaybackState: java.util.List getCustomActions()>:[21,25]
<android.media.session.PlaybackState: long getActions()>:[21,25]
<android.media.session.PlaybackState: long getActiveQueueItemId()>:[21,25]
<android.media.session.PlaybackState: long getBufferedPosition()>:[21,25]
<android.media.session.PlaybackState: long getLastPositionUpdateTime()>:[21,25]
<android.media.session.PlaybackState: long getPosition()>:[21,25]
<android.mtp.MtpDevice: android.mtp.MtpDeviceInfo getDeviceInfo()>:[12,25]
<android.mtp.MtpDevice: android.mtp.MtpObjectInfo getObjectInfo(int)>:[12,25]
<android.mtp.MtpDevice: android.mtp.MtpStorageInfo getStorageInfo(int)>:[12,25]
<android.mtp.MtpDevice: boolean deleteObject(int)>:[12,25]
<android.mtp.MtpDevice: boolean importFile(int,java.lang.String)>:[12,25]
<android.mtp.MtpDevice: boolean open(android.hardware.usb.UsbDeviceConnection)>:[12,25]
<android.mtp.MtpDevice: byte[] getObject(int,int)>:[12,25]
<android.mtp.MtpDevice: byte[] getThumbnail(int)>:[12,25]
<android.mtp.MtpDevice: int getDeviceId()>:[12,25]
<android.mtp.MtpDevice: int[] getObjectHandles(int,int,int)>:[12,25]
<android.mtp.MtpDevice: int[] getStorageIds()>:[12,25]
<android.mtp.MtpDevice: void <init>(android.hardware.usb.UsbDevice)>:[12,25]
<android.mtp.MtpDeviceInfo: java.lang.String getManufacturer()>:[12,25]
<android.mtp.MtpDeviceInfo: java.lang.String getModel()>:[12,25]
<android.mtp.MtpObjectInfo: int getCompressedSize()>:[12,25]
<android.mtp.MtpObjectInfo: int getFormat()>:[12,25]
<android.mtp.MtpObjectInfo: int getImagePixHeight()>:[12,25]
<android.mtp.MtpObjectInfo: int getImagePixWidth()>:[12,25]
<android.mtp.MtpObjectInfo: int getObjectHandle()>:[12,25]
<android.mtp.MtpObjectInfo: java.lang.String getName()>:[12,25]
<android.mtp.MtpObjectInfo: long getDateCreated()>:[12,25]
<android.mtp.MtpStorageInfo: int getStorageId()>:[12,25]
<android.net.ConnectivityManager: android.net.Network getActiveNetwork()>:[23,25]
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(android.net.Network)>:[21,25]
<android.net.ConnectivityManager: android.net.Network[] getAllNetworks()>:[21,25]
<android.net.ConnectivityManager: boolean bindProcessToNetwork(android.net.Network)>:[23,25]
<android.net.ConnectivityManager: boolean isActiveNetworkMetered()>:[16,25]
<android.net.LinkAddress: java.net.InetAddress getAddress()>:[21,25]
<android.net.LinkProperties: java.lang.String getInterfaceName()>:[21,25]
<android.net.LinkProperties: void writeToParcel(android.os.Parcel,int)>:[21,25]
<android.net.RouteInfo: boolean isDefaultRoute()>:[21,25]
<android.net.RouteInfo: boolean matches(java.net.InetAddress)>:[21,25]
<android.net.RouteInfo: java.net.InetAddress getGateway()>:[21,25]
<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getInsecure(int,android.net.SSLSessionCache)>:[8,25]
<android.net.SSLCertificateSocketFactory: void setHostname(java.net.Socket,java.lang.String)>:[17,25]
<android.net.SSLCertificateSocketFactory: void setTrustManagers(javax.net.ssl.TrustManager[])>:[14,25]
<android.net.TrafficStats: long getTotalRxBytes()>:[8,25]
<android.net.TrafficStats: long getTotalTxBytes()>:[8,25]
<android.net.TrafficStats: void setThreadStatsTag(int)>:[14,25]
<android.net.Uri: android.net.Uri fromFile(java.io.File)>:[1,25]
<android.net.Uri: android.net.Uri parse(java.lang.String)>:[1,25]
<android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>:[1,25]
<android.net.Uri: java.lang.String encode(java.lang.String)>:[1,25]
<android.net.Uri: java.lang.String toString()>:[1,25]
<android.net.http.AndroidHttpClient: android.net.http.AndroidHttpClient newInstance(java.lang.String)>:[8,22]
<android.net.http.AndroidHttpClient: android.net.http.AndroidHttpClient newInstance(java.lang.String,android.content.Context)>:[8,22]
<android.net.http.AndroidHttpClient: java.io.InputStream getUngzippedContent(org.apache.http.HttpEntity)>:[8,22]
<android.net.http.AndroidHttpClient: long parseDate(java.lang.String)>:[8,22]
<android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)>:[8,22]
<android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>:[8,22]
<android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>:[8,22]
<android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>:[8,22]
<android.net.http.AndroidHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>:[8,22]
<android.net.http.AndroidHttpClient: org.apache.http.entity.AbstractHttpEntity getCompressedEntity(byte[],android.content.ContentResolver)>:[8,22]
<android.net.http.AndroidHttpClient: org.apache.http.params.HttpParams getParams()>:[8,22]
<android.net.http.AndroidHttpClient: void close()>:[8,22]
<android.net.http.AndroidHttpClient: void modifyRequestToAcceptGzipResponse(org.apache.http.HttpRequest)>:[8,22]
<android.net.http.HttpResponseCache: android.net.http.HttpResponseCache getInstalled()>:[14,25]
<android.net.http.HttpResponseCache: android.net.http.HttpResponseCache install(java.io.File,long)>:[14,25]
<android.net.http.HttpResponseCache: void close()>:[14,25]
<android.net.http.SslError: java.lang.String getUrl()>:[14,25]
<android.net.nsd.NsdServiceInfo: java.lang.String getServiceName()>:[16,25]
<android.net.nsd.NsdServiceInfo: void <init>()>:[16,25]
<android.net.nsd.NsdServiceInfo: void setPort(int)>:[16,25]
<android.net.nsd.NsdServiceInfo: void setServiceName(java.lang.String)>:[16,25]
<android.net.nsd.NsdServiceInfo: void setServiceType(java.lang.String)>:[16,25]
<android.net.wifi.WifiInfo: int getFrequency()>:[21,25]
<android.net.wifi.WifiManager: boolean isScanAlwaysAvailable()>:[18,25]
<android.net.wifi.WifiManager: boolean isWifiEnabled()>:[1,25]
<android.nfc.NdefMessage: android.nfc.NdefRecord[] getRecords()>:[9,25]
<android.nfc.NdefMessage: void <init>(android.nfc.NdefRecord[])>:[9,25]
<android.nfc.NdefRecord: android.net.Uri toUri()>:[16,25]
<android.nfc.NdefRecord: android.nfc.NdefRecord createApplicationRecord(java.lang.String)>:[14,25]
<android.nfc.NdefRecord: android.nfc.NdefRecord createExternal(java.lang.String,java.lang.String,byte[])>:[16,25]
<android.nfc.NdefRecord: android.nfc.NdefRecord createMime(java.lang.String,byte[])>:[16,25]
<android.nfc.NdefRecord: android.nfc.NdefRecord createUri(android.net.Uri)>:[14,25]
<android.nfc.NdefRecord: byte[] getPayload()>:[9,25]
<android.nfc.NdefRecord: void <init>(short,byte[],byte[],byte[])>:[9,25]
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getDefaultAdapter(android.content.Context)>:[10,25]
<android.nfc.NfcAdapter: boolean isEnabled()>:[9,25]
<android.nfc.NfcAdapter: boolean isNdefPushEnabled()>:[16,25]
<android.nfc.NfcAdapter: void disableForegroundDispatch(android.app.Activity)>:[10,25]
<android.nfc.NfcAdapter: void disableReaderMode(android.app.Activity)>:[19,25]
<android.nfc.NfcAdapter: void enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,android.content.IntentFilter[],java.lang.String[][])>:[10,25]
<android.nfc.NfcManager: android.nfc.NfcAdapter getDefaultAdapter()>:[10,25]
<android.nfc.tech.IsoDep: android.nfc.tech.IsoDep get(android.nfc.Tag)>:[10,25]
<android.nfc.tech.IsoDep: byte[] transceive(byte[])>:[10,25]
<android.opengl.GLES30: boolean glIsQuery(int)>:[18,25]
<android.opengl.GLES30: boolean glIsSampler(int)>:[18,25]
<android.opengl.GLES30: boolean glIsTransformFeedback(int)>:[18,25]
<android.opengl.GLES30: boolean glIsVertexArray(int)>:[18,25]
<android.opengl.GLES30: boolean glUnmapBuffer(int)>:[18,25]
<android.opengl.GLES30: int glGetFragDataLocation(int,java.lang.String)>:[18,25]
<android.opengl.GLES30: int glGetUniformBlockIndex(int,java.lang.String)>:[18,25]
<android.opengl.GLES30: java.lang.String glGetActiveUniformBlockName(int,int)>:[18,25]
<android.opengl.GLES30: java.lang.String glGetStringi(int,int)>:[18,25]
<android.opengl.GLES30: java.nio.Buffer glGetBufferPointerv(int,int)>:[18,25]
<android.opengl.GLES30: void glBeginQuery(int,int)>:[18,25]
<android.opengl.GLES30: void glBeginTransformFeedback(int)>:[18,25]
<android.opengl.GLES30: void glBindBufferBase(int,int,int)>:[18,25]
<android.opengl.GLES30: void glBindBufferRange(int,int,int,int,int)>:[18,25]
<android.opengl.GLES30: void glBindSampler(int,int)>:[18,25]
<android.opengl.GLES30: void glBindTransformFeedback(int,int)>:[18,25]
<android.opengl.GLES30: void glBindVertexArray(int)>:[18,25]
<android.opengl.GLES30: void glBlitFramebuffer(int,int,int,int,int,int,int,int,int,int)>:[18,25]
<android.opengl.GLES30: void glClearBufferfi(int,int,float,int)>:[18,25]
<android.opengl.GLES30: void glClearBufferfv(int,int,java.nio.FloatBuffer)>:[18,25]
<android.opengl.GLES30: void glClearBufferiv(int,int,java.nio.IntBuffer)>:[18,25]
<android.opengl.GLES30: void glClearBufferuiv(int,int,java.nio.IntBuffer)>:[18,25]
<android.opengl.GLES30: void glCopyBufferSubData(int,int,int,int,int)>:[18,25]
<android.opengl.GLES30: void glCopyTexSubImage3D(int,int,int,int,int,int,int,int,int)>:[18,25]
<android.opengl.GLES30: void glDeleteQueries(int,int[],int)>:[18,25]
<android.opengl.GLES30: void glDeleteQueries(int,java.nio.IntBuffer)>:[18,25]
<android.opengl.GLES30: void glDeleteSamplers(int,int[],int)>:[18,25]
<android.opengl.GLES30: void glDeleteSamplers(int,java.nio.IntBuffer)>:[18,25]
<android.opengl.GLES30: void glDeleteTransformFeedbacks(int,int[],int)>:[18,25]
<android.opengl.GLES30: void glDeleteTransformFeedbacks(int,java.nio.IntBuffer)>:[18,25]
<android.opengl.GLES30: void glDeleteVertexArrays(int,int[],int)>:[18,25]
<android.opengl.GLES30: void glDeleteVertexArrays(int,java.nio.IntBuffer)>:[18,25]
<android.opengl.GLES30: void glDrawArraysInstanced(int,int,int,int)>:[18,25]
<android.opengl.GLES30: void glDrawBuffers(int,java.nio.IntBuffer)>:[18,25]
<android.opengl.GLES30: void glDrawElementsInstanced(int,int,int,int,int)>:[18,25]
<android.opengl.GLES30: void glDrawRangeElements(int,int,int,int,int,int)>:[18,25]
<android.opengl.GLES30: void glDrawRangeElements(int,int,int,int,int,java.nio.Buffer)>:[18,25]
<android.opengl.GLES30: void glEndQuery(int)>:[18,25]
<android.opengl.GLES30: void glEndTransformFeedback()>:[18,25]
<android.opengl.GLES30: void glFlushMappedBufferRange(int,int,int)>:[18,25]
<android.opengl.GLES30: void glFramebufferTextureLayer(int,int,int,int,int)>:[18,25]
<android.opengl.GLES30: void glGenQueries(int,int[],int)>:[18,25]
<android.opengl.GLES30: void glGenQueries(int,java.nio.IntBuffer)>:[18,25]
<android.opengl.GLES30: void glGenSamplers(int,int[],int)>:[18,25]
<android.opengl.GLES30: void glGenSamplers(int,java.nio.IntBuffer)>:[18,25]
<android.opengl.GLES30: void glGenTransformFeedbacks(int,int[],int)>:[18,25]
<android.opengl.GLES30: void glGenTransformFeedbacks(int,java.nio.IntBuffer)>:[18,25]
<android.opengl.GLES30: void glGenVertexArrays(int,int[],int)>:[18,25]
<android.opengl.GLES30: void glGenVertexArrays(int,java.nio.IntBuffer)>:[18,25]
<android.opengl.GLES30: void glGetActiveUniformBlockName(int,int,java.nio.Buffer,java.nio.Buffer)>:[18,25]
<android.opengl.GLES30: void glGetActiveUniformBlockiv(int,int,int,java.nio.IntBuffer)>:[18,25]
<android.opengl.GLES30: void glGetActiveUniformsiv(int,int,java.nio.IntBuffer,int,java.nio.IntBuffer)>:[18,25]
<android.opengl.GLES30: void glGetBufferParameteri64v(int,int,java.nio.LongBuffer)>:[18,25]
<android.opengl.GLES30: void glGetInteger64v(int,java.nio.LongBuffer)>:[18,25]
<android.opengl.GLES30: void glGetQueryObjectuiv(int,int,java.nio.IntBuffer)>:[18,25]
<android.opengl.GLES30: void glGetQueryiv(int,int,java.nio.IntBuffer)>:[18,25]
<android.opengl.GLES30: void glGetSamplerParameterfv(int,int,java.nio.FloatBuffer)>:[18,25]
<android.opengl.GLES30: void glGetSamplerParameteriv(int,int,java.nio.IntBuffer)>:[18,25]
<android.opengl.GLES30: void glGetUniformIndices(int,java.lang.String[],java.nio.IntBuffer)>:[18,25]
<android.opengl.GLES30: void glGetUniformuiv(int,int,java.nio.IntBuffer)>:[18,25]
<android.opengl.GLES30: void glGetVertexAttribIiv(int,int,java.nio.IntBuffer)>:[18,25]
<android.opengl.GLES30: void glGetVertexAttribIuiv(int,int,java.nio.IntBuffer)>:[18,25]
<android.opengl.GLES30: void glInvalidateFramebuffer(int,int,java.nio.IntBuffer)>:[18,25]
<android.opengl.GLES30: void glInvalidateSubFramebuffer(int,int,java.nio.IntBuffer,int,int,int,int)>:[18,25]
<android.opengl.GLES30: void glPauseTransformFeedback()>:[18,25]
<android.opengl.GLES30: void glProgramParameteri(int,int,int)>:[18,25]
<android.opengl.GLES30: void glReadBuffer(int)>:[18,25]
<android.opengl.GLES30: void glRenderbufferStorageMultisample(int,int,int,int,int)>:[18,25]
<android.opengl.GLES30: void glResumeTransformFeedback()>:[18,25]
<android.opengl.GLES30: void glSamplerParameterf(int,int,float)>:[18,25]
<android.opengl.GLES30: void glSamplerParameterfv(int,int,java.nio.FloatBuffer)>:[18,25]
<android.opengl.GLES30: void glSamplerParameteri(int,int,int)>:[18,25]
<android.opengl.GLES30: void glSamplerParameteriv(int,int,java.nio.IntBuffer)>:[18,25]
<android.opengl.GLES30: void glTexImage3D(int,int,int,int,int,int,int,int,int,int)>:[18,25]
<android.opengl.GLES30: void glTexImage3D(int,int,int,int,int,int,int,int,int,java.nio.Buffer)>:[18,25]
<android.opengl.GLES30: void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,int)>:[18,25]
<android.opengl.GLES30: void glTexSubImage3D(int,int,int,int,int,int,int,int,int,int,java.nio.Buffer)>:[18,25]
<android.opengl.GLES30: void glTransformFeedbackVaryings(int,java.lang.String[],int)>:[18,25]
<android.opengl.GLES30: void glUniform1uiv(int,int,java.nio.IntBuffer)>:[18,25]
<android.opengl.GLES30: void glUniform3uiv(int,int,java.nio.IntBuffer)>:[18,25]
<android.opengl.GLES30: void glUniform4uiv(int,int,java.nio.IntBuffer)>:[18,25]
<android.opengl.GLES30: void glUniformBlockBinding(int,int,int)>:[18,25]
<android.opengl.GLES30: void glUniformMatrix2x3fv(int,int,boolean,java.nio.FloatBuffer)>:[18,25]
<android.opengl.GLES30: void glUniformMatrix2x4fv(int,int,boolean,java.nio.FloatBuffer)>:[18,25]
<android.opengl.GLES30: void glUniformMatrix3x2fv(int,int,boolean,java.nio.FloatBuffer)>:[18,25]
<android.opengl.GLES30: void glUniformMatrix3x4fv(int,int,boolean,java.nio.FloatBuffer)>:[18,25]
<android.opengl.GLES30: void glUniformMatrix4x2fv(int,int,boolean,java.nio.FloatBuffer)>:[18,25]
<android.opengl.GLES30: void glUniformMatrix4x3fv(int,int,boolean,java.nio.FloatBuffer)>:[18,25]
<android.opengl.GLES30: void glVertexAttribDivisor(int,int)>:[18,25]
<android.opengl.GLES30: void glVertexAttribI4i(int,int,int,int,int)>:[18,25]
<android.opengl.GLES30: void glVertexAttribI4ui(int,int,int,int,int)>:[18,25]
<android.opengl.GLES30: void glVertexAttribIPointer(int,int,int,int,int)>:[18,25]
<android.opengl.GLSurfaceView: void setEGLContextClientVersion(int)>:[8,25]
<android.os.AsyncTask: void <init>()>:[3,25]
<android.os.Build: java.lang.String getRadioVersion()>:[14,25]
<android.os.Bundle: android.os.IBinder getBinder(java.lang.String)>:[18,25]
<android.os.Bundle: int getInt(java.lang.String)>:[1,25]
<android.os.Bundle: int getInt(java.lang.String,int)>:[1,25]
<android.os.Bundle: int[] getIntArray(java.lang.String)>:[1,25]
<android.os.Bundle: java.lang.Object get(java.lang.String)>:[1,25]
<android.os.Bundle: java.lang.String getString(java.lang.String)>:[1,25]
<android.os.Bundle: java.lang.String getString(java.lang.String,java.lang.String)>:[12,25]
<android.os.Bundle: long getLong(java.lang.String,long)>:[1,25]
<android.os.Bundle: void <init>()>:[1,25]
<android.os.Bundle: void putBinder(java.lang.String,android.os.IBinder)>:[18,25]
<android.os.Bundle: void putBoolean(java.lang.String,boolean)>:[1,25]
<android.os.Bundle: void putCharSequenceArray(java.lang.String,java.lang.CharSequence[])>:[8,25]
<android.os.Bundle: void putInt(java.lang.String,int)>:[1,25]
<android.os.Bundle: void putIntArray(java.lang.String,int[])>:[1,25]
<android.os.Bundle: void putLong(java.lang.String,long)>:[1,25]
<android.os.Bundle: void putString(java.lang.String,java.lang.String)>:[1,25]
<android.os.CancellationSignal: boolean isCanceled()>:[16,25]
<android.os.CancellationSignal: void <init>()>:[16,25]
<android.os.CancellationSignal: void cancel()>:[16,25]
<android.os.DropBoxManager: void addText(java.lang.String,java.lang.String)>:[8,25]
<android.os.Environment: boolean isExternalStorageEmulated()>:[11,25]
<android.os.Environment: boolean isExternalStorageRemovable()>:[9,25]
<android.os.Environment: boolean isExternalStorageRemovable(java.io.File)>:[21,25]
<android.os.Environment: java.io.File getExternalStorageDirectory()>:[1,25]
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>:[8,25]
<android.os.Environment: java.lang.String getExternalStorageState()>:[1,25]
<android.os.Environment: java.lang.String getExternalStorageState(java.io.File)>:[21,25]
<android.os.Environment: java.lang.String getStorageState(java.io.File)>:[19,25]
<android.os.Handler: boolean post(java.lang.Runnable)>:[1,25]
<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>:[1,25]
<android.os.Handler: boolean sendEmptyMessage(int)>:[1,25]
<android.os.Handler: boolean sendMessage(android.os.Message)>:[1,25]
<android.os.Handler: void <init>()>:[1,25]
<android.os.Handler: void handleMessage(android.os.Message)>:[1,25]
<android.os.HandlerThread: boolean quitSafely()>:[18,25]
<android.os.Message: android.os.Message obtain(android.os.Handler,int)>:[1,25]
<android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>:[1,25]
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createPipe()>:[9,25]
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createReliablePipe()>:[19,25]
<android.os.ParcelFileDescriptor: int getFd()>:[12,25]
<android.os.ParcelFileDescriptor: int parseMode(java.lang.String)>:[19,25]
<android.os.PowerManager: boolean isDeviceIdleMode()>:[23,25]
<android.os.PowerManager: boolean isInteractive()>:[21,25]
<android.os.PowerManager: boolean isPowerSaveMode()>:[21,25]
<android.os.PowerManager: boolean isScreenOn()>:[7,25]
<android.os.PowerManager: void reboot(java.lang.String)>:[8,25]
<android.os.PowerManager: void userActivity(long,boolean)>:[1,19]
<android.os.Process: android.os.UserHandle myUserHandle()>:[17,25]
<android.os.StatFs: long getAvailableBlocksLong()>:[18,25]
<android.os.StatFs: long getAvailableBytes()>:[18,25]
<android.os.StatFs: long getBlockCountLong()>:[18,25]
<android.os.StatFs: long getBlockSizeLong()>:[18,25]
<android.os.StatFs: long getFreeBlocksLong()>:[18,25]
<android.os.StatFs: long getFreeBytes()>:[18,25]
<android.os.StatFs: long getTotalBytes()>:[18,25]
<android.os.SystemClock: long elapsedRealtime()>:[1,25]
<android.os.SystemClock: long elapsedRealtimeNanos()>:[17,25]
<android.os.Trace: void beginSection(java.lang.String)>:[18,25]
<android.os.Trace: void endSection()>:[18,25]
<android.os.UserManager: long getSerialNumberForUser(android.os.UserHandle)>:[17,25]
<android.os.Vibrator: boolean hasVibrator()>:[11,25]
<android.os.Vibrator: void vibrate(long)>:[1,25]
<android.preference.CheckBoxPreference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>:[21,25]
<android.preference.DialogPreference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>:[21,25]
<android.preference.EditTextPreference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>:[21,25]
<android.preference.ListPreference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>:[21,25]
<android.preference.MultiSelectListPreference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>:[21,25]
<android.preference.MultiSelectListPreference: void setEntries(java.lang.CharSequence[])>:[11,25]
<android.preference.Preference: void <init>(android.content.Context,android.util.AttributeSet,int,int)>:[21,25]
<android.preference.Preference: void setIcon(android.graphics.drawable.Drawable)>:[11,25]
<android.preference.Preference: void setIcon(int)>:[11,25]
<android.preference.PreferenceActivity: boolean isValidFragment(java.lang.String)>:[19,25]
<android.preference.PreferenceActivity: void <init>()>:[1,25]
<android.preference.PreferenceActivity: void invalidateHeaders()>:[11,25]
<android.preference.PreferenceActivity: void loadHeadersFromResource(int,java.util.List)>:[11,25]
<android.preference.PreferenceActivity: void onBuildHeaders(java.util.List)>:[11,25]
<android.preference.PreferenceFragment: void <init>()>:[11,25]
<android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>:[1,25]
<android.preference.TwoStatePreference: boolean isChecked()>:[14,25]
<android.preference.TwoStatePreference: void setChecked(boolean)>:[14,25]
<android.print.PrintAttributes: int getColorMode()>:[19,25]
<android.print.PrintDocumentAdapter: void <init>()>:[19,25]
<android.print.PrintDocumentAdapter: void onFinish()>:[19,25]
<android.print.PrintDocumentAdapter: void onStart()>:[19,25]
<android.print.PrintManager: android.print.PrintJob print(java.lang.String,android.print.PrintDocumentAdapter,android.print.PrintAttributes)>:[19,25]
<android.print.pdf.PrintedPdfDocument: void <init>(android.content.Context,android.print.PrintAttributes)>:[19,25]
<android.provider.Browser: void saveBookmark(android.content.Context,java.lang.String,java.lang.String)>:[1,22]
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)>:[1,22]
<android.provider.DocumentsContract: android.net.Uri buildChildDocumentsUri(java.lang.String,java.lang.String)>:[19,25]
<android.provider.DocumentsContract: android.net.Uri buildChildDocumentsUriUsingTree(android.net.Uri,java.lang.String)>:[21,25]
<android.provider.DocumentsContract: android.net.Uri buildDocumentUriUsingTree(android.net.Uri,java.lang.String)>:[21,25]
<android.provider.DocumentsContract: android.net.Uri buildRootsUri(java.lang.String)>:[19,25]
<android.provider.DocumentsContract: android.net.Uri createDocument(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String)>:[21,25]
<android.provider.DocumentsContract: android.net.Uri renameDocument(android.content.ContentResolver,android.net.Uri,java.lang.String)>:[21,25]
<android.provider.DocumentsContract: boolean deleteDocument(android.content.ContentResolver,android.net.Uri)>:[19,25]
<android.provider.DocumentsContract: boolean isDocumentUri(android.content.Context,android.net.Uri)>:[19,25]
<android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>:[19,25]
<android.provider.DocumentsContract: java.lang.String getTreeDocumentId(android.net.Uri)>:[21,25]
<android.provider.Settings: boolean canDrawOverlays(android.content.Context)>:[23,25]
<android.renderscript.ScriptIntrinsicBlur: android.renderscript.ScriptIntrinsicBlur create(android.renderscript.RenderScript,android.renderscript.Element)>:[17,25]
<android.renderscript.ScriptIntrinsicBlur: void forEach(android.renderscript.Allocation)>:[17,25]
<android.renderscript.ScriptIntrinsicBlur: void setInput(android.renderscript.Allocation)>:[17,25]
<android.renderscript.ScriptIntrinsicBlur: void setRadius(float)>:[17,25]
<android.renderscript.ScriptIntrinsicYuvToRGB: android.renderscript.ScriptIntrinsicYuvToRGB create(android.renderscript.RenderScript,android.renderscript.Element)>:[17,25]
<android.renderscript.ScriptIntrinsicYuvToRGB: void forEach(android.renderscript.Allocation)>:[17,25]
<android.renderscript.ScriptIntrinsicYuvToRGB: void setInput(android.renderscript.Allocation)>:[17,25]
<android.security.KeyChain: boolean isBoundKeyAlgorithm(java.lang.String)>:[18,25]
<android.service.dreams.DreamService: boolean dispatchTouchEvent(android.view.MotionEvent)>:[17,25]
<android.service.dreams.DreamService: void onAttachedToWindow()>:[17,25]
<android.service.dreams.DreamService: void onDetachedFromWindow()>:[17,25]
<android.service.dreams.DreamService: void onDreamingStarted()>:[17,25]
<android.service.dreams.DreamService: void onDreamingStopped()>:[17,25]
<android.service.notification.NotificationListenerService: android.service.notification.StatusBarNotification[] getActiveNotifications()>:[18,25]
<android.service.notification.NotificationListenerService: void onListenerConnected()>:[21,25]
<android.service.notification.StatusBarNotification: android.app.Notification getNotification()>:[18,25]
<android.service.notification.StatusBarNotification: boolean isClearable()>:[18,25]
<android.service.notification.StatusBarNotification: boolean isOngoing()>:[18,25]
<android.service.notification.StatusBarNotification: int getId()>:[18,25]
<android.service.notification.StatusBarNotification: java.lang.String getGroupKey()>:[21,25]
<android.service.notification.StatusBarNotification: java.lang.String getKey()>:[21,25]
<android.service.notification.StatusBarNotification: java.lang.String getPackageName()>:[18,25]
<android.service.notification.StatusBarNotification: java.lang.String getTag()>:[18,25]
<android.service.notification.StatusBarNotification: long getPostTime()>:[18,25]
<android.speech.tts.SynthesisRequest: android.os.Bundle getParams()>:[14,25]
<android.speech.tts.SynthesisRequest: int getPitch()>:[14,25]
<android.speech.tts.SynthesisRequest: int getSpeechRate()>:[14,25]
<android.speech.tts.SynthesisRequest: java.lang.String getCountry()>:[14,25]
<android.speech.tts.SynthesisRequest: java.lang.String getLanguage()>:[14,25]
<android.speech.tts.SynthesisRequest: java.lang.String getText()>:[14,25]
<android.speech.tts.SynthesisRequest: java.lang.String getVariant()>:[14,25]
<android.speech.tts.TextToSpeech: int setOnUtteranceProgressListener(android.speech.tts.UtteranceProgressListener)>:[15,25]
<android.speech.tts.TextToSpeech: int speak(java.lang.CharSequence,int,android.os.Bundle,java.lang.String)>:[21,25]
<android.speech.tts.TextToSpeech: java.util.List getEngines()>:[14,25]
<android.speech.tts.TextToSpeech: java.util.Set getFeatures(java.util.Locale)>:[15,25]
<android.speech.tts.UtteranceProgressListener: void <init>()>:[15,25]
<android.speech.tts.UtteranceProgressListener: void onError(java.lang.String,int)>:[21,25]
<android.speech.tts.UtteranceProgressListener: void onStop(java.lang.String,boolean)>:[23,25]
<android.telephony.CellIdentityCdma: int getBasestationId()>:[17,25]
<android.telephony.CellIdentityCdma: int getNetworkId()>:[17,25]
<android.telephony.CellIdentityCdma: int getSystemId()>:[17,25]
<android.telephony.CellIdentityGsm: int getCid()>:[17,25]
<android.telephony.CellIdentityGsm: int getLac()>:[17,25]
<android.telephony.CellIdentityGsm: int getMcc()>:[17,25]
<android.telephony.CellIdentityGsm: int getMnc()>:[17,25]
<android.telephony.CellIdentityLte: int getCi()>:[17,25]
<android.telephony.CellIdentityLte: int getMcc()>:[17,25]
<android.telephony.CellIdentityLte: int getMnc()>:[17,25]
<android.telephony.CellIdentityLte: int getPci()>:[17,25]
<android.telephony.CellIdentityLte: int getTac()>:[17,25]
<android.telephony.CellIdentityWcdma: int getCid()>:[18,25]
<android.telephony.CellIdentityWcdma: int getLac()>:[18,25]
<android.telephony.CellIdentityWcdma: int getMcc()>:[18,25]
<android.telephony.CellIdentityWcdma: int getMnc()>:[18,25]
<android.telephony.CellIdentityWcdma: int getPsc()>:[18,25]
<android.telephony.CellInfo: boolean isRegistered()>:[17,25]
<android.telephony.CellInfoCdma: android.telephony.CellIdentityCdma getCellIdentity()>:[17,25]
<android.telephony.CellInfoCdma: android.telephony.CellSignalStrengthCdma getCellSignalStrength()>:[17,25]
<android.telephony.CellInfoGsm: android.telephony.CellIdentityGsm getCellIdentity()>:[17,25]
<android.telephony.CellInfoGsm: android.telephony.CellSignalStrengthGsm getCellSignalStrength()>:[17,25]
<android.telephony.CellInfoLte: android.telephony.CellIdentityLte getCellIdentity()>:[17,25]
<android.telephony.CellInfoLte: android.telephony.CellSignalStrengthLte getCellSignalStrength()>:[17,25]
<android.telephony.CellInfoWcdma: android.telephony.CellIdentityWcdma getCellIdentity()>:[18,25]
<android.telephony.CellInfoWcdma: android.telephony.CellSignalStrengthWcdma getCellSignalStrength()>:[18,25]
<android.telephony.CellSignalStrengthCdma: int getDbm()>:[17,25]
<android.telephony.CellSignalStrengthGsm: int getAsuLevel()>:[17,25]
<android.telephony.CellSignalStrengthGsm: int getDbm()>:[17,25]
<android.telephony.CellSignalStrengthLte: int getAsuLevel()>:[17,25]
<android.telephony.CellSignalStrengthLte: int getDbm()>:[17,25]
<android.telephony.CellSignalStrengthLte: int getTimingAdvance()>:[17,25]
<android.telephony.CellSignalStrengthWcdma: int getAsuLevel()>:[17,25]
<android.telephony.CellSignalStrengthWcdma: int getDbm()>:[17,25]
<android.telephony.PhoneNumberUtils: boolean compare(java.lang.String,java.lang.String)>:[1,25]
<android.telephony.PhoneNumberUtils: java.lang.String formatNumber(java.lang.String,java.lang.String)>:[21,25]
<android.telephony.PhoneNumberUtils: java.lang.String normalizeNumber(java.lang.String)>:[21,25]
<android.telephony.SignalStrength: boolean isGsm()>:[7,25]
<android.telephony.SignalStrength: int getCdmaDbm()>:[7,25]
<android.telephony.SignalStrength: int getGsmSignalStrength()>:[7,25]
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>:[4,25]
<android.telephony.SmsManager: java.util.ArrayList divideMessage(java.lang.String)>:[4,25]
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>:[4,25]
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>:[4,25]
<android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])>:[4,25]
<android.telephony.SmsMessage: int[] calculateLength(java.lang.String,boolean)>:[4,25]
<android.telephony.SmsMessage: java.lang.String getDisplayMessageBody()>:[4,25]
<android.telephony.SmsMessage: java.lang.String getDisplayOriginatingAddress()>:[4,25]
<android.telephony.SmsMessage: java.lang.String getMessageBody()>:[4,25]
<android.telephony.SmsMessage: java.lang.String getOriginatingAddress()>:[4,25]
<android.telephony.SmsMessage: long getTimestampMillis()>:[4,25]
<android.telephony.SubscriptionInfo: int getDataRoaming()>:[22,25]
<android.telephony.SubscriptionInfo: int getMcc()>:[22,25]
<android.telephony.SubscriptionInfo: int getMnc()>:[22,25]
<android.telephony.SubscriptionInfo: int getSimSlotIndex()>:[22,25]
<android.telephony.SubscriptionInfo: int getSubscriptionId()>:[22,25]
<android.telephony.SubscriptionInfo: java.lang.CharSequence getCarrierName()>:[22,25]
<android.telephony.SubscriptionInfo: java.lang.String getCountryIso()>:[22,25]
<android.telephony.SubscriptionManager: android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int)>:[22,25]
<android.telephony.SubscriptionManager: boolean isNetworkRoaming(int)>:[22,25]
<android.telephony.SubscriptionManager: int getActiveSubscriptionInfoCount()>:[22,25]
<android.telephony.SubscriptionManager: int getActiveSubscriptionInfoCountMax()>:[22,25]
<android.telephony.SubscriptionManager: java.util.List getActiveSubscriptionInfoList()>:[22,25]
<android.telephony.TelephonyManager: java.lang.String getMmsUAProfUrl()>:[19,25]
<android.telephony.TelephonyManager: java.lang.String getMmsUserAgent()>:[19,25]
<android.telephony.TelephonyManager: java.util.List getAllCellInfo()>:[17,25]
<android.telephony.cdma.CdmaCellLocation: int getBaseStationId()>:[5,25]
<android.text.AndroidCharacter: int getEastAsianWidth(char)>:[8,25]
<android.text.AndroidCharacter: void getEastAsianWidths(char[],int,int,byte[])>:[8,25]
<android.text.Html: java.lang.String escapeHtml(java.lang.CharSequence)>:[16,25]
<android.text.SpannableString: void <init>(java.lang.CharSequence)>:[1,25]
<android.text.format.DateFormat: java.lang.String getBestDateTimePattern(java.util.Locale,java.lang.String)>:[18,25]
<android.text.format.DateUtils: java.lang.String formatDateTime(android.content.Context,long,int)>:[3,25]
<android.text.format.DateUtils: java.util.Formatter formatDateRange(android.content.Context,java.util.Formatter,long,long,int,java.lang.String)>:[9,25]
<android.text.format.Time: void <init>()>:[3,25]
<android.text.format.Time: void set(long)>:[3,25]
<android.text.format.Time: void setToNow()>:[3,25]
<android.text.method.LinkMovementMethod: android.text.method.MovementMethod getInstance()>:[1,25]
<android.text.util.Linkify: boolean addLinks(android.text.Spannable,int)>:[1,25]
<android.text.util.Linkify: void addLinks(android.widget.TextView,java.util.regex.Pattern,java.lang.String)>:[1,25]
<android.transition.ArcMotion: void <init>()>:[21,25]
<android.transition.ArcMotion: void setMinimumHorizontalAngle(float)>:[21,25]
<android.transition.ArcMotion: void setMinimumVerticalAngle(float)>:[21,25]
<android.transition.ChangeBounds: void <init>()>:[19,25]
<android.transition.ChangeBounds: void captureEndValues(android.transition.TransitionValues)>:[19,25]
<android.transition.ChangeBounds: void captureStartValues(android.transition.TransitionValues)>:[19,25]
<android.transition.Explode: void <init>()>:[19,25]
<android.transition.Fade: void <init>()>:[19,25]
<android.transition.Fade: void <init>(int)>:[19,25]
<android.transition.PathMotion: android.graphics.Path getPath(float,float,float,float)>:[21,25]
<android.transition.Scene: void <init>(android.view.ViewGroup,android.view.ViewGroup)>:[19,25]
<android.transition.Scene: void enter()>:[19,25]
<android.transition.Slide: void <init>(int)>:[21,25]
<android.transition.Transition: android.transition.Transition addTarget(android.view.View)>:[19,25]
<android.transition.Transition: android.transition.Transition clone()>:[19,25]
<android.transition.Transition: android.transition.Transition excludeTarget(android.view.View,boolean)>:[19,25]
<android.transition.Transition: android.transition.Transition excludeTarget(int,boolean)>:[19,25]
<android.transition.Transition: android.transition.Transition removeTarget(android.view.View)>:[19,25]
<android.transition.Transition: android.transition.Transition setDuration(long)>:[19,25]
<android.transition.Transition: java.util.List getTargetIds()>:[19,25]
<android.transition.Transition: java.util.List getTargetNames()>:[21,25]
<android.transition.Transition: java.util.List getTargetTypes()>:[21,25]
<android.transition.Transition: java.util.List getTargets()>:[19,25]
<android.transition.Transition: void <init>()>:[19,25]
<android.transition.Transition: void <init>(android.content.Context,android.util.AttributeSet)>:[21,25]
<android.transition.TransitionInflater: android.transition.Transition inflateTransition(int)>:[19,25]
<android.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup)>:[19,25]
<android.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup,android.transition.Transition)>:[19,25]
<android.transition.TransitionManager: void go(android.transition.Scene,android.transition.Transition)>:[19,25]
<android.transition.TransitionSet: android.transition.Transition getTransitionAt(int)>:[21,25]
<android.transition.TransitionSet: android.transition.TransitionSet addTransition(android.transition.Transition)>:[19,25]
<android.transition.TransitionSet: android.transition.TransitionSet setOrdering(int)>:[19,25]
<android.transition.TransitionSet: int getTransitionCount()>:[21,25]
<android.transition.TransitionSet: void <init>()>:[19,25]
<android.util.ArrayMap: boolean containsKey(java.lang.Object)>:[19,25]
<android.util.ArrayMap: java.util.Collection values()>:[19,25]
<android.util.ArrayMap: java.util.Set keySet()>:[19,25]
<android.util.ArrayMap: void <init>()>:[19,25]
<android.util.ArrayMap: void clear()>:[19,25]
<android.util.Base64: byte[] decode(byte[],int)>:[8,25]
<android.util.Base64: byte[] decode(byte[],int,int,int)>:[8,25]
<android.util.Base64: byte[] decode(java.lang.String,int)>:[8,25]
<android.util.Base64: byte[] encode(byte[],int)>:[8,25]
<android.util.Base64: byte[] encode(byte[],int,int,int)>:[8,25]
<android.util.Base64: java.lang.String encodeToString(byte[],int)>:[8,25]
<android.util.EventLog: int writeEvent(int,int)>:[8,25]
<android.util.EventLog: int writeEvent(int,java.lang.String)>:[8,25]
<android.util.FloatMath: float ceil(float)>:[1,22]
<android.util.FloatMath: float cos(float)>:[1,22]
<android.util.FloatMath: float floor(float)>:[1,22]
<android.util.FloatMath: float sin(float)>:[1,22]
<android.util.FloatMath: float sqrt(float)>:[1,22]
<android.util.Log: int d(java.lang.String,java.lang.String)>:[1,25]
<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>:[1,25]
<android.util.Log: int e(java.lang.String,java.lang.String)>:[1,25]
<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>:[1,25]
<android.util.Log: int i(java.lang.String,java.lang.String)>:[1,25]
<android.util.Log: int v(java.lang.String,java.lang.String)>:[1,25]
<android.util.Log: int w(java.lang.String,java.lang.String)>:[1,25]
<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>:[1,25]
<android.util.Log: int wtf(java.lang.String,java.lang.String)>:[8,25]
<android.util.Log: int wtf(java.lang.String,java.lang.Throwable)>:[8,25]
<android.util.LruCache: void <init>(int)>:[12,25]
<android.util.LruCache: void resize(int)>:[21,25]
<android.util.Size: int getHeight()>:[21,25]
<android.util.Size: int getWidth()>:[21,25]
<android.util.SparseArray: void removeAt(int)>:[11,25]
<android.util.SparseBooleanArray: android.util.SparseBooleanArray clone()>:[14,25]
<android.util.SparseBooleanArray: boolean get(int)>:[1,25]
<android.view.ActionMode: android.view.Menu getMenu()>:[11,25]
<android.view.ActionMode: android.view.MenuInflater getMenuInflater()>:[11,25]
<android.view.ActionMode: android.view.View getCustomView()>:[11,25]
<android.view.ActionMode: java.lang.CharSequence getSubtitle()>:[11,25]
<android.view.ActionMode: java.lang.CharSequence getTitle()>:[11,25]
<android.view.ActionMode: java.lang.Object getTag()>:[14,25]
<android.view.ActionMode: void <init>()>:[11,25]
<android.view.ActionMode: void finish()>:[11,25]
<android.view.ActionMode: void invalidate()>:[11,25]
<android.view.ActionMode: void setCustomView(android.view.View)>:[11,25]
<android.view.ActionMode: void setSubtitle(int)>:[11,25]
<android.view.ActionMode: void setSubtitle(java.lang.CharSequence)>:[11,25]
<android.view.ActionMode: void setTag(java.lang.Object)>:[14,25]
<android.view.ActionMode: void setTitle(int)>:[11,25]
<android.view.ActionMode: void setTitle(java.lang.CharSequence)>:[11,25]
<android.view.ActionProvider: void <init>(android.content.Context)>:[14,25]
<android.view.Choreographer: android.view.Choreographer getInstance()>:[16,25]
<android.view.Display: boolean isValid()>:[17,25]
<android.view.Display: int getFlags()>:[17,25]
<android.view.Display: int getRotation()>:[8,25]
<android.view.Display: int getState()>:[21,25]
<android.view.Display: java.lang.String getName()>:[17,25]
<android.view.Display: void getCurrentSizeRange(android.graphics.Point,android.graphics.Point)>:[16,25]
<android.view.Display: void getRealMetrics(android.util.DisplayMetrics)>:[17,25]
<android.view.Display: void getRealSize(android.graphics.Point)>:[17,25]
<android.view.Display: void getSize(android.graphics.Point)>:[13,25]
<android.view.GestureDetector: boolean onTouchEvent(android.view.MotionEvent)>:[1,25]
<android.view.GestureDetector: void setIsLongpressEnabled(boolean)>:[1,25]
<android.view.Gravity: int getAbsoluteGravity(int,int)>:[14,25]
<android.view.Gravity: void apply(int,int,int,android.graphics.Rect,android.graphics.Rect,int)>:[17,25]
<android.view.Gravity: void apply(int,int,int,android.graphics.Rect,int,int,android.graphics.Rect,int)>:[17,25]
<android.view.Gravity: void applyDisplay(int,android.graphics.Rect,android.graphics.Rect,int)>:[17,25]
<android.view.InputDevice: android.view.InputDevice getDevice(int)>:[9,25]
<android.view.InputDevice: int getSources()>:[9,25]
<android.view.InputDevice: int[] getDeviceIds()>:[9,25]
<android.view.InputDevice: java.lang.String getName()>:[9,25]
<android.view.InputDevice: java.util.List getMotionRanges()>:[12,25]
<android.view.KeyCharacterMap: android.view.KeyCharacterMap load(int)>:[1,25]
<android.view.KeyCharacterMap: int get(int,int)>:[1,25]
<android.view.KeyCharacterMap: int getModifierBehavior()>:[11,25]
<android.view.KeyEvent: boolean hasNoModifiers()>:[11,25]
<android.view.KeyEvent: boolean isCanceled()>:[5,25]
<android.view.KeyEvent: boolean isCtrlPressed()>:[11,25]
<android.view.KeyEvent: boolean isLongPress()>:[5,25]
<android.view.KeyEvent: boolean isTracking()>:[5,25]
<android.view.KeyEvent: boolean metaStateHasModifiers(int,int)>:[11,25]
<android.view.KeyEvent: boolean metaStateHasNoModifiers(int)>:[11,25]
<android.view.KeyEvent: int getAction()>:[1,25]
<android.view.KeyEvent: int getDeviceId()>:[1,25]
<android.view.KeyEvent: int getMetaState()>:[1,25]
<android.view.KeyEvent: int normalizeMetaState(int)>:[11,25]
<android.view.KeyEvent: java.lang.String keyCodeToString(int)>:[12,25]
<android.view.KeyEvent: void <init>(int,int)>:[1,25]
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>:[1,25]
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>:[1,25]
<android.view.LayoutInflater: android.view.View onCreateView(android.view.View,java.lang.String,android.util.AttributeSet)>:[11,25]
<android.view.MenuInflater: void inflate(int,android.view.Menu)>:[1,25]
<android.view.MotionEvent: float getAxisValue(int)>:[12,25]
<android.view.MotionEvent: float getAxisValue(int,int)>:[12,25]
<android.view.MotionEvent: float getHistoricalAxisValue(int,int)>:[12,25]
<android.view.MotionEvent: float getPressure(int)>:[5,25]
<android.view.MotionEvent: float getRawX()>:[1,25]
<android.view.MotionEvent: float getRawY()>:[1,25]
<android.view.MotionEvent: float getSize(int)>:[5,25]
<android.view.MotionEvent: float getX()>:[1,25]
<android.view.MotionEvent: float getX(int)>:[5,25]
<android.view.MotionEvent: float getY()>:[1,25]
<android.view.MotionEvent: float getY(int)>:[5,25]
<android.view.MotionEvent: float getYPrecision()>:[1,25]
<android.view.MotionEvent: int findPointerIndex(int)>:[5,25]
<android.view.MotionEvent: int getAction()>:[1,25]
<android.view.MotionEvent: int getActionIndex()>:[8,25]
<android.view.MotionEvent: int getActionMasked()>:[8,25]
<android.view.MotionEvent: int getButtonState()>:[14,25]
<android.view.MotionEvent: int getFlags()>:[9,25]
<android.view.MotionEvent: int getPointerCount()>:[5,25]
<android.view.MotionEvent: int getPointerId(int)>:[5,25]
<android.view.MotionEvent: int getSource()>:[9,25]
<android.view.MotionEvent: int getToolType(int)>:[14,25]
<android.view.MotionEvent: long getEventTime()>:[1,25]
<android.view.MotionEvent: void transform(android.graphics.Matrix)>:[11,25]
<android.view.ScaleGestureDetector: boolean isInProgress()>:[8,25]
<android.view.ScaleGestureDetector: boolean isQuickScaleEnabled()>:[19,25]
<android.view.ScaleGestureDetector: boolean onTouchEvent(android.view.MotionEvent)>:[8,25]
<android.view.ScaleGestureDetector: float getFocusX()>:[8,25]
<android.view.ScaleGestureDetector: float getFocusY()>:[8,25]
<android.view.ScaleGestureDetector: float getScaleFactor()>:[8,25]
<android.view.ScaleGestureDetector: void setQuickScaleEnabled(boolean)>:[19,25]
<android.view.Surface: void <init>(android.graphics.SurfaceTexture)>:[14,25]
<android.view.SurfaceView: void <init>(android.content.Context)>:[1,25]
<android.view.SurfaceView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>:[21,25]
<android.view.TextureView: android.graphics.SurfaceTexture getSurfaceTexture()>:[14,25]
<android.view.VelocityTracker: float getXVelocity(int)>:[8,25]
<android.view.View: android.animation.StateListAnimator getStateListAnimator()>:[21,25]
<android.view.View: android.content.res.ColorStateList getBackgroundTintList()>:[21,25]
<android.view.View: android.graphics.Matrix getMatrix()>:[11,25]
<android.view.View: android.graphics.Rect getClipBounds()>:[18,25]
<android.view.View: android.view.View findViewById(int)>:[1,25]
<android.view.View: android.view.ViewOverlay getOverlay()>:[18,25]
<android.view.View: android.view.ViewParent getParentForAccessibility()>:[16,25]
<android.view.View: android.view.ViewPropertyAnimator animate()>:[12,25]
<android.view.View: android.view.WindowInsets dispatchApplyWindowInsets(android.view.WindowInsets)>:[21,25]
<android.view.View: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)>:[21,25]
<android.view.View: boolean canScrollHorizontally(int)>:[14,25]
<android.view.View: boolean dispatchNestedFling(float,float,boolean)>:[21,25]
<android.view.View: boolean dispatchNestedPreFling(float,float)>:[21,25]
<android.view.View: boolean dispatchNestedPreScroll(int,int,int[],int[])>:[21,25]
<android.view.View: boolean dispatchNestedScroll(int,int,int,int,int[])>:[21,25]
<android.view.View: boolean hasNestedScrollingParent()>:[21,25]
<android.view.View: boolean hasTransientState()>:[16,25]
<android.view.View: boolean isAttachedToWindow()>:[19,25]
<android.view.View: boolean isDirty()>:[11,25]
<android.view.View: boolean isLaidOut()>:[19,25]
<android.view.View: boolean isNestedScrollingEnabled()>:[21,25]
<android.view.View: boolean isPaddingRelative()>:[17,25]
<android.view.View: boolean onGenericMotionEvent(android.view.MotionEvent)>:[12,25]
<android.view.View: boolean onHoverEvent(android.view.MotionEvent)>:[14,25]
<android.view.View: boolean requestFocusFromTouch()>:[1,25]
<android.view.View: boolean startNestedScroll(int)>:[21,25]
<android.view.View: float getAlpha()>:[11,25]
<android.view.View: float getElevation()>:[21,25]
<android.view.View: float getPivotX()>:[11,25]
<android.view.View: float getPivotY()>:[11,25]
<android.view.View: float getRotation()>:[11,25]
<android.view.View: float getRotationX()>:[11,25]
<android.view.View: float getRotationY()>:[11,25]
<android.view.View: float getScaleX()>:[11,25]
<android.view.View: float getScaleY()>:[11,25]
<android.view.View: float getTranslationX()>:[11,25]
<android.view.View: float getTranslationY()>:[11,25]
<android.view.View: float getTranslationZ()>:[21,25]
<android.view.View: float getX()>:[11,25]
<android.view.View: float getY()>:[11,25]
<android.view.View: float getZ()>:[21,25]
<android.view.View: int combineMeasuredStates(int,int)>:[11,25]
<android.view.View: int generateViewId()>:[17,25]
<android.view.View: int getAccessibilityLiveRegion()>:[19,25]
<android.view.View: int getId()>:[1,25]
<android.view.View: int getImportantForAccessibility()>:[16,25]
<android.view.View: int getLabelFor()>:[17,25]
<android.view.View: int getLayerType()>:[11,25]
<android.view.View: int getLayoutDirection()>:[17,25]
<android.view.View: int getMeasuredState()>:[11,25]
<android.view.View: int getOverScrollMode()>:[9,25]
<android.view.View: int getPaddingEnd()>:[17,25]
<android.view.View: int getPaddingStart()>:[17,25]
<android.view.View: int getVisibility()>:[1,25]
<android.view.View: int resolveSizeAndState(int,int,int)>:[11,25]
<android.view.View: java.lang.Object getTag()>:[1,25]
<android.view.View: java.lang.String getTransitionName()>:[21,25]
<android.view.View: java.util.ArrayList getTouchables()>:[1,25]
<android.view.View: void <init>(android.content.Context)>:[1,25]
<android.view.View: void <init>(android.content.Context,android.util.AttributeSet)>:[1,25]
<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int,int)>:[21,25]
<android.view.View: void announceForAccessibility(java.lang.CharSequence)>:[16,25]
<android.view.View: void drawableHotspotChanged(float,float)>:[21,25]
<android.view.View: void jumpDrawablesToCurrentState()>:[11,25]
<android.view.View: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>:[14,25]
<android.view.View: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>:[14,25]
<android.view.View: void onLayout(boolean,int,int,int,int)>:[1,25]
<android.view.View: void onMeasure(int,int)>:[1,25]
<android.view.View: void onSizeChanged(int,int,int,int)>:[1,25]
<android.view.View: void onVisibilityChanged(android.view.View,int)>:[8,25]
<android.view.View: void onWindowSystemUiVisibilityChanged(int)>:[16,25]
<android.view.View: void postInvalidateOnAnimation()>:[16,25]
<android.view.View: void postOnAnimation(java.lang.Runnable)>:[16,25]
<android.view.View: void requestApplyInsets()>:[21,25]
<android.view.View: void setAccessibilityLiveRegion(int)>:[19,25]
<android.view.View: void setActivated(boolean)>:[11,25]
<android.view.View: void setAlpha(float)>:[11,25]
<android.view.View: void setBackground(android.graphics.drawable.Drawable)>:[16,25]
<android.view.View: void setBackgroundColor(int)>:[1,25]
<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>:[1,25]
<android.view.View: void setBackgroundTintList(android.content.res.ColorStateList)>:[21,25]
<android.view.View: void setClipBounds(android.graphics.Rect)>:[18,25]
<android.view.View: void setClipToOutline(boolean)>:[21,25]
<android.view.View: void setElevation(float)>:[21,25]
<android.view.View: void setFitsSystemWindows(boolean)>:[14,25]
<android.view.View: void setFocusable(boolean)>:[1,25]
<android.view.View: void setFocusableInTouchMode(boolean)>:[1,25]
<android.view.View: void setHasTransientState(boolean)>:[16,25]
<android.view.View: void setImportantForAccessibility(int)>:[16,25]
<android.view.View: void setLabelFor(int)>:[17,25]
<android.view.View: void setLayerPaint(android.graphics.Paint)>:[17,25]
<android.view.View: void setLayerType(int,android.graphics.Paint)>:[11,25]
<android.view.View: void setLayoutDirection(int)>:[17,25]
<android.view.View: void setLongClickable(boolean)>:[1,25]
<android.view.View: void setNestedScrollingEnabled(boolean)>:[21,25]
<android.view.View: void setNextFocusForwardId(int)>:[11,25]
<android.view.View: void setOutlineProvider(android.view.ViewOutlineProvider)>:[21,25]
<android.view.View: void setOverScrollMode(int)>:[9,25]
<android.view.View: void setPaddingRelative(int,int,int,int)>:[17,25]
<android.view.View: void setPivotX(float)>:[11,25]
<android.view.View: void setPivotY(float)>:[11,25]
<android.view.View: void setRotation(float)>:[11,25]
<android.view.View: void setRotationX(float)>:[11,25]
<android.view.View: void setRotationY(float)>:[11,25]
<android.view.View: void setSaveFromParentEnabled(boolean)>:[11,25]
<android.view.View: void setScaleX(float)>:[11,25]
<android.view.View: void setScaleY(float)>:[11,25]
<android.view.View: void setScrollBarDefaultDelayBeforeFade(int)>:[16,25]
<android.view.View: void setScrollBarFadeDuration(int)>:[16,25]
<android.view.View: void setScrollBarSize(int)>:[16,25]
<android.view.View: void setScrollX(int)>:[14,25]
<android.view.View: void setScrollY(int)>:[14,25]
<android.view.View: void setStateListAnimator(android.animation.StateListAnimator)>:[21,25]
<android.view.View: void setSystemUiVisibility(int)>:[11,25]
<android.view.View: void setTag(java.lang.Object)>:[1,25]
<android.view.View: void setTextAlignment(int)>:[17,25]
<android.view.View: void setTextDirection(int)>:[17,25]
<android.view.View: void setTransitionName(java.lang.String)>:[21,25]
<android.view.View: void setTranslationX(float)>:[11,25]
<android.view.View: void setTranslationY(float)>:[11,25]
<android.view.View: void setTranslationZ(float)>:[21,25]
<android.view.View: void setVisibility(int)>:[1,25]
<android.view.View: void setX(float)>:[11,25]
<android.view.View: void setY(float)>:[11,25]
<android.view.View: void stopNestedScroll()>:[21,25]
<android.view.ViewAnimationUtils: android.animation.Animator createCircularReveal(android.view.View,int,int,float,float)>:[21,25]
<android.view.ViewConfiguration: boolean hasPermanentMenuKey()>:[14,25]
<android.view.ViewConfiguration: int getScaledOverflingDistance()>:[9,25]
<android.view.ViewConfiguration: int getScaledPagingTouchSlop()>:[8,25]
<android.view.ViewGroup: android.view.View getChildAt(int)>:[1,25]
<android.view.ViewGroup: boolean isTransitionGroup()>:[21,25]
<android.view.ViewGroup: boolean onNestedPrePerformAccessibilityAction(android.view.View,int,android.os.Bundle)>:[22,25]
<android.view.ViewGroup: boolean onRequestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>:[14,25]
<android.view.ViewGroup: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>:[14,25]
<android.view.ViewGroup: boolean shouldDelayChildPressedState()>:[14,25]
<android.view.ViewGroup: int getChildCount()>:[1,25]
<android.view.ViewGroup: int getLayoutMode()>:[18,25]
<android.view.ViewGroup: int getNestedScrollAxes()>:[21,25]
<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int,int)>:[21,25]
<android.view.ViewGroup: void addView(android.view.View)>:[1,25]
<android.view.ViewGroup: void setLayoutMode(int)>:[18,25]
<android.view.ViewGroup: void setMotionEventSplittingEnabled(boolean)>:[11,25]
<android.view.ViewGroup: void setTransitionGroup(boolean)>:[21,25]
<android.view.ViewGroupOverlay: void add(android.view.View)>:[18,25]
<android.view.ViewGroupOverlay: void remove(android.view.View)>:[18,25]
<android.view.ViewOutlineProvider: void <init>()>:[21,25]
<android.view.ViewOverlay: void add(android.graphics.drawable.Drawable)>:[18,25]
<android.view.ViewOverlay: void remove(android.graphics.drawable.Drawable)>:[18,25]
<android.view.ViewPropertyAnimator: android.animation.TimeInterpolator getInterpolator()>:[18,25]
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator alpha(float)>:[12,25]
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator alphaBy(float)>:[12,25]
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotation(float)>:[12,25]
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationBy(float)>:[12,25]
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationX(float)>:[12,25]
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationXBy(float)>:[12,25]
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationY(float)>:[12,25]
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationYBy(float)>:[12,25]
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleX(float)>:[12,25]
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleXBy(float)>:[12,25]
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleY(float)>:[12,25]
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleYBy(float)>:[12,25]
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setDuration(long)>:[12,25]
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setInterpolator(android.animation.TimeInterpolator)>:[12,25]
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setStartDelay(long)>:[14,25]
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationX(float)>:[12,25]
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationXBy(float)>:[12,25]
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationY(float)>:[12,25]
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationYBy(float)>:[12,25]
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationZ(float)>:[21,25]
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationZBy(float)>:[21,25]
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator withLayer()>:[16,25]
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator x(float)>:[12,25]
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator xBy(float)>:[12,25]
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator y(float)>:[12,25]
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator yBy(float)>:[12,25]
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator z(float)>:[21,25]
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator zBy(float)>:[21,25]
<android.view.ViewPropertyAnimator: long getDuration()>:[14,25]
<android.view.ViewPropertyAnimator: long getStartDelay()>:[14,25]
<android.view.ViewPropertyAnimator: void cancel()>:[14,25]
<android.view.ViewPropertyAnimator: void start()>:[14,25]
<android.view.ViewStub: void setLayoutInflater(android.view.LayoutInflater)>:[16,25]
<android.view.Window: android.transition.Transition getEnterTransition()>:[21,25]
<android.view.Window: android.view.View getDecorView()>:[1,25]
<android.view.Window: boolean hasFeature(int)>:[11,25]
<android.view.Window: int getNavigationBarColor()>:[21,25]
<android.view.Window: int getStatusBarColor()>:[21,25]
<android.view.Window: void addFlags(int)>:[1,25]
<android.view.Window: void clearFlags(int)>:[1,25]
<android.view.Window: void invalidatePanelMenu(int)>:[11,25]
<android.view.Window: void setAllowEnterTransitionOverlap(boolean)>:[21,25]
<android.view.Window: void setDimAmount(float)>:[14,25]
<android.view.Window: void setEnterTransition(android.transition.Transition)>:[21,25]
<android.view.Window: void setExitTransition(android.transition.Transition)>:[21,25]
<android.view.Window: void setFlags(int,int)>:[1,25]
<android.view.Window: void setNavigationBarColor(int)>:[21,25]
<android.view.Window: void setReenterTransition(android.transition.Transition)>:[21,25]
<android.view.Window: void setReturnTransition(android.transition.Transition)>:[21,25]
<android.view.Window: void setSharedElementEnterTransition(android.transition.Transition)>:[21,25]
<android.view.Window: void setSharedElementReturnTransition(android.transition.Transition)>:[21,25]
<android.view.Window: void setSharedElementsUseOverlay(boolean)>:[21,25]
<android.view.Window: void setStatusBarColor(int)>:[21,25]
<android.view.Window: void setUiOptions(int)>:[14,25]
<android.view.Window: void setUiOptions(int,int)>:[14,25]
<android.view.WindowInsets: android.view.WindowInsets consumeStableInsets()>:[21,25]
<android.view.WindowInsets: android.view.WindowInsets consumeSystemWindowInsets()>:[21,25]
<android.view.WindowInsets: android.view.WindowInsets replaceSystemWindowInsets(android.graphics.Rect)>:[21,25]
<android.view.WindowInsets: android.view.WindowInsets replaceSystemWindowInsets(int,int,int,int)>:[21,25]
<android.view.WindowInsets: boolean hasInsets()>:[21,25]
<android.view.WindowInsets: boolean hasStableInsets()>:[21,25]
<android.view.WindowInsets: boolean hasSystemWindowInsets()>:[21,25]
<android.view.WindowInsets: boolean isConsumed()>:[21,25]
<android.view.WindowInsets: boolean isRound()>:[21,25]
<android.view.WindowInsets: int getStableInsetBottom()>:[21,25]
<android.view.WindowInsets: int getStableInsetLeft()>:[21,25]
<android.view.WindowInsets: int getStableInsetRight()>:[21,25]
<android.view.WindowInsets: int getStableInsetTop()>:[21,25]
<android.view.WindowInsets: int getSystemWindowInsetBottom()>:[21,25]
<android.view.WindowInsets: int getSystemWindowInsetLeft()>:[21,25]
<android.view.WindowInsets: int getSystemWindowInsetRight()>:[21,25]
<android.view.WindowInsets: int getSystemWindowInsetTop()>:[21,25]
<android.view.accessibility.AccessibilityEvent: int getContentChangeTypes()>:[19,25]
<android.view.accessibility.AccessibilityEvent: void appendRecord(android.view.accessibility.AccessibilityRecord)>:[14,25]
<android.view.accessibility.AccessibilityEvent: void setContentChangeTypes(int)>:[19,25]
<android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: android.os.Bundle getExtras()>:[19,25]
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo findFocus(int)>:[16,25]
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getLabelFor()>:[17,25]
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getLabeledBy()>:[17,25]
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getTraversalAfter()>:[22,25]
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getTraversalBefore()>:[22,25]
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain()>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View)>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.accessibility.AccessibilityNodeInfo)>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityWindowInfo getWindow()>:[21,25]
<android.view.accessibility.AccessibilityNodeInfo: boolean canOpenPopup()>:[19,25]
<android.view.accessibility.AccessibilityNodeInfo: boolean isAccessibilityFocused()>:[16,25]
<android.view.accessibility.AccessibilityNodeInfo: boolean isCheckable()>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: boolean isChecked()>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: boolean isClickable()>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: boolean isContentInvalid()>:[19,25]
<android.view.accessibility.AccessibilityNodeInfo: boolean isDismissable()>:[19,25]
<android.view.accessibility.AccessibilityNodeInfo: boolean isEditable()>:[18,25]
<android.view.accessibility.AccessibilityNodeInfo: boolean isEnabled()>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: boolean isFocusable()>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: boolean isFocused()>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: boolean isLongClickable()>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: boolean isMultiLine()>:[19,25]
<android.view.accessibility.AccessibilityNodeInfo: boolean isPassword()>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: boolean isScrollable()>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: boolean isSelected()>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: boolean isVisibleToUser()>:[16,25]
<android.view.accessibility.AccessibilityNodeInfo: boolean performAction(int)>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: boolean refresh()>:[18,25]
<android.view.accessibility.AccessibilityNodeInfo: boolean removeChild(android.view.View)>:[21,25]
<android.view.accessibility.AccessibilityNodeInfo: boolean removeChild(android.view.View,int)>:[21,25]
<android.view.accessibility.AccessibilityNodeInfo: int getActions()>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: int getInputType()>:[19,25]
<android.view.accessibility.AccessibilityNodeInfo: int getLiveRegion()>:[19,25]
<android.view.accessibility.AccessibilityNodeInfo: int getMaxTextLength()>:[21,25]
<android.view.accessibility.AccessibilityNodeInfo: int getMovementGranularities()>:[16,25]
<android.view.accessibility.AccessibilityNodeInfo: int getTextSelectionEnd()>:[18,25]
<android.view.accessibility.AccessibilityNodeInfo: int getTextSelectionStart()>:[18,25]
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getClassName()>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getError()>:[21,25]
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPackageName()>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String getViewIdResourceName()>:[18,25]
<android.view.accessibility.AccessibilityNodeInfo: java.util.List findAccessibilityNodeInfosByViewId(java.lang.String)>:[18,25]
<android.view.accessibility.AccessibilityNodeInfo: java.util.List getActionList()>:[21,25]
<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: void addChild(android.view.View)>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: void addChild(android.view.View,int)>:[16,25]
<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInParent(android.graphics.Rect)>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInScreen(android.graphics.Rect)>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: void recycle()>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: void setAccessibilityFocused(boolean)>:[16,25]
<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInParent(android.graphics.Rect)>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInScreen(android.graphics.Rect)>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: void setCanOpenPopup(boolean)>:[19,25]
<android.view.accessibility.AccessibilityNodeInfo: void setClassName(java.lang.CharSequence)>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: void setClickable(boolean)>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: void setContentDescription(java.lang.CharSequence)>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: void setContentInvalid(boolean)>:[19,25]
<android.view.accessibility.AccessibilityNodeInfo: void setDismissable(boolean)>:[19,25]
<android.view.accessibility.AccessibilityNodeInfo: void setEditable(boolean)>:[18,25]
<android.view.accessibility.AccessibilityNodeInfo: void setEnabled(boolean)>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: void setError(java.lang.CharSequence)>:[21,25]
<android.view.accessibility.AccessibilityNodeInfo: void setFocusable(boolean)>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: void setFocused(boolean)>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: void setInputType(int)>:[19,25]
<android.view.accessibility.AccessibilityNodeInfo: void setLabelFor(android.view.View)>:[17,25]
<android.view.accessibility.AccessibilityNodeInfo: void setLabelFor(android.view.View,int)>:[17,25]
<android.view.accessibility.AccessibilityNodeInfo: void setLabeledBy(android.view.View)>:[17,25]
<android.view.accessibility.AccessibilityNodeInfo: void setLabeledBy(android.view.View,int)>:[17,25]
<android.view.accessibility.AccessibilityNodeInfo: void setLiveRegion(int)>:[19,25]
<android.view.accessibility.AccessibilityNodeInfo: void setLongClickable(boolean)>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: void setMaxTextLength(int)>:[21,25]
<android.view.accessibility.AccessibilityNodeInfo: void setMovementGranularities(int)>:[16,25]
<android.view.accessibility.AccessibilityNodeInfo: void setMultiLine(boolean)>:[19,25]
<android.view.accessibility.AccessibilityNodeInfo: void setPackageName(java.lang.CharSequence)>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View)>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: void setScrollable(boolean)>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: void setSelected(boolean)>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View)>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View,int)>:[16,25]
<android.view.accessibility.AccessibilityNodeInfo: void setText(java.lang.CharSequence)>:[14,25]
<android.view.accessibility.AccessibilityNodeInfo: void setTextSelection(int,int)>:[18,25]
<android.view.accessibility.AccessibilityNodeInfo: void setTraversalAfter(android.view.View)>:[22,25]
<android.view.accessibility.AccessibilityNodeInfo: void setTraversalAfter(android.view.View,int)>:[22,25]
<android.view.accessibility.AccessibilityNodeInfo: void setTraversalBefore(android.view.View)>:[22,25]
<android.view.accessibility.AccessibilityNodeInfo: void setTraversalBefore(android.view.View,int)>:[22,25]
<android.view.accessibility.AccessibilityNodeInfo: void setViewIdResourceName(java.lang.String)>:[18,25]
<android.view.accessibility.AccessibilityNodeInfo: void setVisibleToUser(boolean)>:[16,25]
<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)>:[16,25]
<android.view.accessibility.AccessibilityNodeProvider: boolean performAction(int,int,android.os.Bundle)>:[16,25]
<android.view.accessibility.AccessibilityNodeProvider: java.util.List findAccessibilityNodeInfosByText(java.lang.String,int)>:[16,25]
<android.view.accessibility.AccessibilityNodeProvider: void <init>()>:[16,25]
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityRecord obtain()>:[14,25]
<android.view.accessibility.AccessibilityRecord: void setFromIndex(int)>:[14,25]
<android.view.accessibility.AccessibilityRecord: void setItemCount(int)>:[14,25]
<android.view.accessibility.AccessibilityRecord: void setScrollable(boolean)>:[14,25]
<android.view.accessibility.AccessibilityRecord: void setSource(android.view.View,int)>:[16,25]
<android.view.accessibility.AccessibilityRecord: void setToIndex(int)>:[14,25]
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityNodeInfo getRoot()>:[21,25]
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo getChild(int)>:[21,25]
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo getParent()>:[21,25]
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo obtain()>:[21,25]
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo obtain(android.view.accessibility.AccessibilityWindowInfo)>:[21,25]
<android.view.accessibility.AccessibilityWindowInfo: boolean isAccessibilityFocused()>:[21,25]
<android.view.accessibility.AccessibilityWindowInfo: boolean isActive()>:[21,25]
<android.view.accessibility.AccessibilityWindowInfo: boolean isFocused()>:[21,25]
<android.view.accessibility.AccessibilityWindowInfo: int getChildCount()>:[21,25]
<android.view.accessibility.AccessibilityWindowInfo: int getId()>:[21,25]
<android.view.accessibility.AccessibilityWindowInfo: int getLayer()>:[21,25]
<android.view.accessibility.AccessibilityWindowInfo: int getType()>:[21,25]
<android.view.accessibility.AccessibilityWindowInfo: void getBoundsInScreen(android.graphics.Rect)>:[21,25]
<android.view.accessibility.AccessibilityWindowInfo: void recycle()>:[21,25]
<android.view.animation.AlphaAnimation: void <init>(float,float)>:[1,25]
<android.view.animation.Animation: void cancel()>:[8,25]
<android.view.animation.Animation: void setDuration(long)>:[1,25]
<android.view.animation.Animation: void setRepeatCount(int)>:[1,25]
<android.view.animation.Animation: void setRepeatMode(int)>:[1,25]
<android.view.animation.Animation: void setStartOffset(long)>:[1,25]
<android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)>:[1,25]
<android.view.animation.PathInterpolator: void <init>(android.graphics.Path)>:[21,25]
<android.view.animation.PathInterpolator: void <init>(float,float)>:[21,25]
<android.view.animation.PathInterpolator: void <init>(float,float,float,float)>:[21,25]
<android.view.inputmethod.BaseInputConnection: boolean performEditorAction(int)>:[3,25]
<android.view.inputmethod.BaseInputConnection: boolean sendKeyEvent(android.view.KeyEvent)>:[3,25]
<android.view.inputmethod.BaseInputConnection: void <init>(android.view.View,boolean)>:[3,25]
<android.view.inputmethod.CorrectionInfo: void <init>(int,java.lang.CharSequence,java.lang.CharSequence)>:[11,25]
<android.view.inputmethod.InputMethodInfo: android.view.inputmethod.InputMethodSubtype getSubtypeAt(int)>:[11,25]
<android.view.inputmethod.InputMethodInfo: int getSubtypeCount()>:[11,25]
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()>:[14,25]
<android.view.inputmethod.InputMethodManager: boolean hideSoftInputFromWindow(android.os.IBinder,int)>:[3,25]
<android.view.inputmethod.InputMethodManager: java.util.Map getShortcutInputMethodsAndSubtypes()>:[11,25]
<android.view.inputmethod.InputMethodManager: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])>:[14,25]
<android.view.inputmethod.InputMethodManager: void setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)>:[11,25]
<android.view.inputmethod.InputMethodSubtype: boolean containsExtraValueKey(java.lang.String)>:[12,25]
<android.view.inputmethod.InputMethodSubtype: boolean isAuxiliary()>:[14,25]
<android.view.inputmethod.InputMethodSubtype: java.lang.CharSequence getDisplayName(android.content.Context,java.lang.String,android.content.pm.ApplicationInfo)>:[14,25]
<android.view.inputmethod.InputMethodSubtype: java.lang.String getExtraValueOf(java.lang.String)>:[12,25]
<android.view.inputmethod.InputMethodSubtype: java.lang.String getMode()>:[11,25]
<android.view.inputmethod.InputMethodSubtype: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>:[14,25]
<android.view.textservice.SentenceSuggestionsInfo: android.view.textservice.SuggestionsInfo getSuggestionsInfoAt(int)>:[16,25]
<android.view.textservice.SentenceSuggestionsInfo: int getLengthAt(int)>:[16,25]
<android.view.textservice.SentenceSuggestionsInfo: int getOffsetAt(int)>:[16,25]
<android.view.textservice.SentenceSuggestionsInfo: int getSuggestionsCount()>:[16,25]
<android.view.textservice.SentenceSuggestionsInfo: void <init>(android.view.textservice.SuggestionsInfo[],int[],int[])>:[16,25]
<android.view.textservice.SuggestionsInfo: int getCookie()>:[14,25]
<android.view.textservice.SuggestionsInfo: int getSequence()>:[14,25]
<android.view.textservice.SuggestionsInfo: int getSuggestionsAttributes()>:[14,25]
<android.view.textservice.SuggestionsInfo: void <init>(int,java.lang.String[])>:[14,25]
<android.view.textservice.SuggestionsInfo: void setCookieAndSequence(int,int)>:[14,25]
<android.view.textservice.TextInfo: int getCookie()>:[14,25]
<android.view.textservice.TextInfo: int getSequence()>:[14,25]
<android.view.textservice.TextInfo: java.lang.String getText()>:[14,25]
<android.webkit.ClientCertRequest: int getPort()>:[21,25]
<android.webkit.ClientCertRequest: java.lang.String getHost()>:[21,25]
<android.webkit.ClientCertRequest: java.lang.String[] getKeyTypes()>:[21,25]
<android.webkit.ClientCertRequest: java.security.Principal[] getPrincipals()>:[21,25]
<android.webkit.ClientCertRequest: void cancel()>:[21,25]
<android.webkit.ClientCertRequest: void ignore()>:[21,25]
<android.webkit.ClientCertRequest: void proceed(java.security.PrivateKey,java.security.cert.X509Certificate[])>:[21,25]
<android.webkit.ConsoleMessage: int lineNumber()>:[8,25]
<android.webkit.ConsoleMessage: java.lang.String message()>:[8,25]
<android.webkit.ConsoleMessage: java.lang.String sourceId()>:[8,25]
<android.webkit.CookieManager: void flush()>:[21,25]
<android.webkit.CookieManager: void removeAllCookies(android.webkit.ValueCallback)>:[21,25]
<android.webkit.CookieManager: void removeSessionCookies(android.webkit.ValueCallback)>:[21,25]
<android.webkit.CookieManager: void setAcceptFileSchemeCookies(boolean)>:[12,25]
<android.webkit.CookieManager: void setAcceptThirdPartyCookies(android.webkit.WebView,boolean)>:[21,25]
<android.webkit.PermissionRequest: java.lang.String[] getResources()>:[21,25]
<android.webkit.PermissionRequest: void grant(java.lang.String[])>:[21,25]
<android.webkit.URLUtil: java.lang.String guessUrl(java.lang.String)>:[1,25]
<android.webkit.WebChromeClient: boolean onConsoleMessage(android.webkit.ConsoleMessage)>:[8,25]
<android.webkit.WebResourceResponse: void <init>(java.lang.String,java.lang.String,java.io.InputStream)>:[11,25]
<android.webkit.WebSettings: int getTextZoom()>:[14,25]
<android.webkit.WebSettings: java.lang.String getDefaultUserAgent(android.content.Context)>:[17,25]
<android.webkit.WebSettings: void setAllowContentAccess(boolean)>:[11,25]
<android.webkit.WebSettings: void setAllowFileAccessFromFileURLs(boolean)>:[16,25]
<android.webkit.WebSettings: void setAllowUniversalAccessFromFileURLs(boolean)>:[16,25]
<android.webkit.WebSettings: void setBlockNetworkLoads(boolean)>:[8,25]
<android.webkit.WebSettings: void setDisplayZoomControls(boolean)>:[11,25]
<android.webkit.WebSettings: void setDomStorageEnabled(boolean)>:[7,25]
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>:[1,25]
<android.webkit.WebSettings: void setLightTouchEnabled(boolean)>:[1,25]
<android.webkit.WebSettings: void setLoadWithOverviewMode(boolean)>:[7,25]
<android.webkit.WebSettings: void setMediaPlaybackRequiresUserGesture(boolean)>:[17,25]
<android.webkit.WebSettings: void setMixedContentMode(int)>:[21,25]
<android.webkit.WebSettings: void setNavDump(boolean)>:[1,16]
<android.webkit.WebSettings: void setPluginsEnabled(boolean)>:[1,17]
<android.webkit.WebSettings: void setTextZoom(int)>:[14,25]
<android.webkit.WebView: android.view.View getZoomControls()>:[1,15]
<android.webkit.WebView: android.webkit.WebBackForwardList restoreState(android.os.Bundle)>:[1,25]
<android.webkit.WebView: android.webkit.WebBackForwardList saveState(android.os.Bundle)>:[1,25]
<android.webkit.WebView: android.webkit.WebSettings getSettings()>:[1,25]
<android.webkit.WebView: boolean canGoBack()>:[1,25]
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,boolean)>:[11,25]
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>:[21,25]
<android.webkit.WebView: void addJavascriptInterface(java.lang.Object,java.lang.String)>:[1,25]
<android.webkit.WebView: void clearCache(boolean)>:[1,25]
<android.webkit.WebView: void enableSlowWholeDocumentDraw()>:[21,25]
<android.webkit.WebView: void evaluateJavascript(java.lang.String,android.webkit.ValueCallback)>:[19,25]
<android.webkit.WebView: void findAllAsync(java.lang.String)>:[16,25]
<android.webkit.WebView: void goBack()>:[1,25]
<android.webkit.WebView: void invokeZoomPicker()>:[1,25]
<android.webkit.WebView: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>:[1,25]
<android.webkit.WebView: void loadUrl(java.lang.String)>:[1,25]
<android.webkit.WebView: void onPause()>:[11,25]
<android.webkit.WebView: void onResume()>:[11,25]
<android.webkit.WebView: void setWebContentsDebuggingEnabled(boolean)>:[19,25]
<android.webkit.WebView: void setWebViewClient(android.webkit.WebViewClient)>:[1,25]
<android.webkit.WebViewClient: android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebView,android.webkit.WebResourceRequest)>:[21,25]
<android.webkit.WebViewClient: android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebView,java.lang.String)>:[11,25]
<android.webkit.WebViewClient: void <init>()>:[1,25]
<android.webkit.WebViewClient: void onLoadResource(android.webkit.WebView,java.lang.String)>:[1,25]
<android.webkit.WebViewClient: void onPageFinished(android.webkit.WebView,java.lang.String)>:[1,25]
<android.webkit.WebViewClient: void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap)>:[1,25]
<android.webkit.WebViewClient: void onReceivedClientCertRequest(android.webkit.WebView,android.webkit.ClientCertRequest)>:[21,25]
<android.webkit.WebViewClient: void onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError)>:[8,25]
<android.widget.AbsListView: boolean isFastScrollAlwaysVisible()>:[11,25]
<android.widget.AbsListView: int getCheckedItemCount()>:[11,25]
<android.widget.AbsListView: long[] getCheckedItemIds()>:[11,25]
<android.widget.AbsListView: void setChoiceMode(int)>:[11,25]
<android.widget.AbsListView: void smoothScrollBy(int,int)>:[8,25]
<android.widget.AdapterView: java.lang.Object getItemAtPosition(int)>:[1,25]
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,java.util.List)>:[1,25]
<android.widget.ArrayAdapter: void addAll(java.util.Collection)>:[11,25]
<android.widget.ArrayAdapter: void clear()>:[1,25]
<android.widget.AutoCompleteTextView: java.lang.CharSequence getCompletionHint()>:[16,25]
<android.widget.BaseAdapter: void <init>()>:[1,25]
<android.widget.Button: void <init>(android.content.Context,android.util.AttributeSet,int,int)>:[21,25]
<android.widget.CheckedTextView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>:[21,25]
<android.widget.CompoundButton: android.content.res.ColorStateList getButtonTintList()>:[21,25]
<android.widget.CompoundButton: android.graphics.drawable.Drawable getButtonDrawable()>:[23,25]
<android.widget.CompoundButton: void <init>(android.content.Context,android.util.AttributeSet,int,int)>:[21,25]
<android.widget.CompoundButton: void setButtonTintList(android.content.res.ColorStateList)>:[21,25]
<android.widget.CursorAdapter: void <init>(android.content.Context,android.database.Cursor,boolean)>:[1,25]
<android.widget.CursorAdapter: void <init>(android.content.Context,android.database.Cursor,int)>:[11,25]
<android.widget.DatePicker: void setCalendarViewShown(boolean)>:[11,25]
<android.widget.DatePicker: void setMinDate(long)>:[11,25]
<android.widget.EdgeEffect: boolean draw(android.graphics.Canvas)>:[14,25]
<android.widget.EdgeEffect: boolean isFinished()>:[14,25]
<android.widget.EdgeEffect: void <init>(android.content.Context)>:[14,25]
<android.widget.EdgeEffect: void finish()>:[14,25]
<android.widget.EdgeEffect: void onPull(float)>:[14,25]
<android.widget.EdgeEffect: void onPull(float,float)>:[21,25]
<android.widget.EdgeEffect: void onRelease()>:[14,25]
<android.widget.EdgeEffect: void setColor(int)>:[21,25]
<android.widget.EdgeEffect: void setSize(int,int)>:[14,25]
<android.widget.Filter: void <init>()>:[1,25]
<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>:[21,25]
<android.widget.GridView: int getColumnWidth()>:[16,25]
<android.widget.GridView: int getNumColumns()>:[11,25]
<android.widget.HorizontalScrollView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>:[21,25]
<android.widget.ImageButton: void <init>(android.content.Context,android.util.AttributeSet,int,int)>:[21,25]
<android.widget.ImageSwitcher: void setImageDrawable(android.graphics.drawable.Drawable)>:[1,25]
<android.widget.ImageView: android.graphics.drawable.Drawable getDrawable()>:[1,25]
<android.widget.ImageView: boolean getAdjustViewBounds()>:[16,25]
<android.widget.ImageView: void <init>(android.content.Context)>:[1,25]
<android.widget.ImageView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>:[21,25]
<android.widget.ImageView: void setAdjustViewBounds(boolean)>:[1,25]
<android.widget.ImageView: void setCropToPadding(boolean)>:[16,25]
<android.widget.ImageView: void setImageAlpha(int)>:[16,25]
<android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>:[1,25]
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>:[1,25]
<android.widget.ImageView: void setImageResource(int)>:[1,25]
<android.widget.LinearLayout: int getDividerPadding()>:[14,25]
<android.widget.LinearLayout: int getShowDividers()>:[11,25]
<android.widget.LinearLayout: void <init>(android.content.Context)>:[1,25]
<android.widget.LinearLayout: void <init>(android.content.Context,android.util.AttributeSet)>:[1,25]
<android.widget.LinearLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>:[21,25]
<android.widget.LinearLayout: void setDividerDrawable(android.graphics.drawable.Drawable)>:[11,25]
<android.widget.LinearLayout: void setDividerPadding(int)>:[14,25]
<android.widget.LinearLayout: void setGravity(int)>:[1,25]
<android.widget.LinearLayout: void setOrientation(int)>:[1,25]
<android.widget.LinearLayout: void setShowDividers(int)>:[11,25]
<android.widget.ListView: android.util.SparseBooleanArray getCheckedItemPositions()>:[1,25]
<android.widget.ListView: boolean isItemChecked(int)>:[1,25]
<android.widget.ListView: long[] getCheckedItemIds()>:[8,25]
<android.widget.ListView: void clearChoices()>:[1,25]
<android.widget.ListView: void setAdapter(android.widget.ListAdapter)>:[1,25]
<android.widget.ListView: void setChoiceMode(int)>:[1,25]
<android.widget.ListView: void setFooterDividersEnabled(boolean)>:[3,25]
<android.widget.ListView: void setHeaderDividersEnabled(boolean)>:[3,25]
<android.widget.ListView: void setItemChecked(int,boolean)>:[1,25]
<android.widget.ListView: void setSelection(int)>:[1,25]
<android.widget.NumberPicker: int getMaxValue()>:[11,25]
<android.widget.NumberPicker: int getValue()>:[11,25]
<android.widget.NumberPicker: void setDisplayedValues(java.lang.String[])>:[11,25]
<android.widget.NumberPicker: void setMaxValue(int)>:[11,25]
<android.widget.NumberPicker: void setMinValue(int)>:[11,25]
<android.widget.NumberPicker: void setValue(int)>:[11,25]
<android.widget.NumberPicker: void setWrapSelectorWheel(boolean)>:[11,25]
<android.widget.OverScroller: boolean computeScrollOffset()>:[9,25]
<android.widget.OverScroller: boolean isFinished()>:[9,25]
<android.widget.OverScroller: float getCurrVelocity()>:[14,25]
<android.widget.OverScroller: int getCurrX()>:[9,25]
<android.widget.OverScroller: int getCurrY()>:[9,25]
<android.widget.OverScroller: void <init>(android.content.Context)>:[9,25]
<android.widget.OverScroller: void fling(int,int,int,int,int,int,int,int)>:[9,25]
<android.widget.OverScroller: void fling(int,int,int,int,int,int,int,int,int,int)>:[9,25]
<android.widget.OverScroller: void forceFinished(boolean)>:[9,25]
<android.widget.PopupMenu: android.view.Menu getMenu()>:[11,25]
<android.widget.PopupMenu: android.view.MenuInflater getMenuInflater()>:[11,25]
<android.widget.PopupMenu: void <init>(android.content.Context,android.view.View)>:[11,25]
<android.widget.PopupMenu: void show()>:[11,25]
<android.widget.PopupWindow: boolean getOverlapAnchor()>:[23,25]
<android.widget.PopupWindow: int getWindowLayoutType()>:[23,25]
<android.widget.PopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int,int)>:[11,25]
<android.widget.PopupWindow: void setElevation(float)>:[21,25]
<android.widget.PopupWindow: void setOverlapAnchor(boolean)>:[23,25]
<android.widget.PopupWindow: void setWindowLayoutType(int)>:[23,25]
<android.widget.PopupWindow: void showAsDropDown(android.view.View,int,int,int)>:[19,25]
<android.widget.ProgressBar: void <init>(android.content.Context,android.util.AttributeSet,int,int)>:[21,25]
<android.widget.ProgressBar: void setIndeterminateTintList(android.content.res.ColorStateList)>:[21,25]
<android.widget.ProgressBar: void setProgressTintList(android.content.res.ColorStateList)>:[21,25]
<android.widget.ProgressBar: void setSecondaryProgressTintList(android.content.res.ColorStateList)>:[21,25]
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean)>:[5,25]
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)>:[5,25]
<android.widget.QuickContactBadge: void assignContactUri(android.net.Uri)>:[5,25]
<android.widget.QuickContactBadge: void setMode(int)>:[5,25]
<android.widget.RelativeLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>:[21,25]
<android.widget.RemoteViews: android.widget.RemoteViews clone()>:[9,25]
<android.widget.RemoteViews: void setContentDescription(int,java.lang.CharSequence)>:[15,25]
<android.widget.RemoteViews: void setEmptyView(int,int)>:[11,25]
<android.widget.RemoteViews: void setOnClickFillInIntent(int,android.content.Intent)>:[11,25]
<android.widget.RemoteViews: void setPendingIntentTemplate(int,android.app.PendingIntent)>:[11,25]
<android.widget.RemoteViews: void setRemoteAdapter(int,android.content.Intent)>:[14,25]
<android.widget.RemoteViews: void setRemoteAdapter(int,int,android.content.Intent)>:[11,25]
<android.widget.RemoteViews: void setTextViewTextSize(int,int,float)>:[16,25]
<android.widget.RemoteViews: void setViewPadding(int,int,int,int,int)>:[16,25]
<android.widget.ScrollView: void <init>(android.content.Context)>:[1,25]
<android.widget.Scroller: void <init>(android.content.Context,android.view.animation.Interpolator,boolean)>:[11,25]
<android.widget.SearchView: void setIconified(boolean)>:[11,25]
<android.widget.SearchView: void setIconifiedByDefault(boolean)>:[11,25]
<android.widget.SearchView: void setQuery(java.lang.CharSequence,boolean)>:[11,25]
<android.widget.SearchView: void setQueryHint(java.lang.CharSequence)>:[11,25]
<android.widget.SearchView: void setSearchableInfo(android.app.SearchableInfo)>:[11,25]
<android.widget.SearchView: void setSubmitButtonEnabled(boolean)>:[11,25]
<android.widget.ShareActionProvider: android.view.View onCreateActionView()>:[14,25]
<android.widget.ShareActionProvider: void <init>(android.content.Context)>:[14,25]
<android.widget.ShareActionProvider: void setShareHistoryFileName(java.lang.String)>:[14,25]
<android.widget.ShareActionProvider: void setShareIntent(android.content.Intent)>:[14,25]
<android.widget.SimpleAdapter: void <init>(android.content.Context,java.util.List,int,java.lang.String[],int[])>:[1,25]
<android.widget.SimpleCursorAdapter: void <init>(android.content.Context,int,android.database.Cursor,java.lang.String[],int[],int)>:[11,25]
<android.widget.Spinner: void setGravity(int)>:[11,25]
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>:[1,25]
<android.widget.TabHost: int getCurrentTab()>:[1,25]
<android.widget.TabHost: void setCurrentTab(int)>:[1,25]
<android.widget.TabHost: void setup()>:[1,25]
<android.widget.TextView: android.graphics.drawable.Drawable[] getCompoundDrawablesRelative()>:[17,25]
<android.widget.TextView: boolean isTextSelectable()>:[11,25]
<android.widget.TextView: float getShadowDx()>:[16,25]
<android.widget.TextView: float getShadowDy()>:[16,25]
<android.widget.TextView: float getShadowRadius()>:[16,25]
<android.widget.TextView: int getMaxLines()>:[16,25]
<android.widget.TextView: int getShadowColor()>:[16,25]
<android.widget.TextView: int length()>:[1,25]
<android.widget.TextView: java.lang.CharSequence getText()>:[1,25]
<android.widget.TextView: void <init>(android.content.Context)>:[1,25]
<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>:[21,25]
<android.widget.TextView: void setAllCaps(boolean)>:[14,25]
<android.widget.TextView: void setCompoundDrawablesRelative(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>:[17,25]
<android.widget.TextView: void setCompoundDrawablesRelativeWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>:[17,25]
<android.widget.TextView: void setCompoundDrawablesRelativeWithIntrinsicBounds(int,int,int,int)>:[17,25]
<android.widget.TextView: void setElegantTextHeight(boolean)>:[21,25]
<android.widget.TextView: void setError(java.lang.CharSequence)>:[1,25]
<android.widget.TextView: void setFontFeatureSettings(java.lang.String)>:[21,25]
<android.widget.TextView: void setGravity(int)>:[1,25]
<android.widget.TextView: void setLetterSpacing(float)>:[21,25]
<android.widget.TextView: void setLinkTextColor(int)>:[1,25]
<android.widget.TextView: void setMovementMethod(android.text.method.MovementMethod)>:[1,25]
<android.widget.TextView: void setText(int)>:[1,25]
<android.widget.TextView: void setText(java.lang.CharSequence)>:[1,25]
<android.widget.TextView: void setTextAppearance(int)>:[23,25]
<android.widget.TextView: void setTextColor(int)>:[1,25]
<android.widget.TextView: void setTextIsSelectable(boolean)>:[11,25]
<android.widget.TextView: void setTextLocale(java.util.Locale)>:[17,25]
<android.widget.TextView: void setTextSize(float)>:[1,25]
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,int,int)>:[1,25]
<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>:[1,25]
<android.widget.Toast: void show()>:[1,25]
<android.widget.Toolbar: void setContentInsetsAbsolute(int,int)>:[21,25]
<android.widget.ZoomButtonsController: android.view.View getZoomControls()>:[4,25]
<android.widget.ZoomButtonsController: boolean isVisible()>:[4,25]
<android.widget.ZoomButtonsController: void <init>(android.view.View)>:[4,25]
<android.widget.ZoomButtonsController: void setFocusable(boolean)>:[4,25]
<android.widget.ZoomButtonsController: void setVisible(boolean)>:[4,25]
<android.widget.ZoomButtonsController: void setZoomInEnabled(boolean)>:[4,25]
<android.widget.ZoomButtonsController: void setZoomOutEnabled(boolean)>:[4,25]
<java.io.BufferedInputStream: void <init>(java.io.InputStream)>:[1,25]
<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>:[1,25]
<java.io.BufferedReader: java.lang.String readLine()>:[1,25]
<java.io.BufferedReader: void <init>(java.io.Reader)>:[1,25]
<java.io.BufferedWriter: void <init>(java.io.Writer)>:[1,25]
<java.io.BufferedWriter: void close()>:[1,25]
<java.io.BufferedWriter: void newLine()>:[1,25]
<java.io.ByteArrayOutputStream: byte[] toByteArray()>:[1,25]
<java.io.ByteArrayOutputStream: int size()>:[1,25]
<java.io.ByteArrayOutputStream: void <init>()>:[1,25]
<java.io.DataInputStream: void <init>(java.io.InputStream)>:[1,25]
<java.io.DataOutputStream: void <init>(java.io.OutputStream)>:[1,25]
<java.io.File: boolean canExecute()>:[9,25]
<java.io.File: boolean createNewFile()>:[1,25]
<java.io.File: boolean delete()>:[1,25]
<java.io.File: boolean exists()>:[1,25]
<java.io.File: boolean isFile()>:[1,25]
<java.io.File: boolean mkdir()>:[1,25]
<java.io.File: boolean mkdirs()>:[1,25]
<java.io.File: boolean setExecutable(boolean)>:[9,25]
<java.io.File: boolean setReadable(boolean)>:[9,25]
<java.io.File: boolean setReadable(boolean,boolean)>:[9,25]
<java.io.File: boolean setWritable(boolean)>:[9,25]
<java.io.File: boolean setWritable(boolean,boolean)>:[9,25]
<java.io.File: java.io.File[] listFiles()>:[1,25]
<java.io.File: java.lang.String getAbsolutePath()>:[1,25]
<java.io.File: java.lang.String getName()>:[1,25]
<java.io.File: java.lang.String getPath()>:[1,25]
<java.io.File: java.net.URI toURI()>:[1,25]
<java.io.File: long getFreeSpace()>:[9,25]
<java.io.File: long getTotalSpace()>:[9,25]
<java.io.File: long getUsableSpace()>:[9,25]
<java.io.File: void <init>(java.io.File,java.lang.String)>:[1,25]
<java.io.File: void <init>(java.lang.String)>:[1,25]
<java.io.FileInputStream: void <init>(java.lang.String)>:[1,25]
<java.io.FileOutputStream: void <init>(java.io.File)>:[1,25]
<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>:[1,25]
<java.io.FileReader: void <init>(java.lang.String)>:[1,25]
<java.io.FileWriter: void <init>(java.io.File,boolean)>:[1,25]
<java.io.InputStream: int read()>:[1,25]
<java.io.InputStream: int read(byte[])>:[1,25]
<java.io.InputStream: long skip(long)>:[1,25]
<java.io.InputStream: void close()>:[1,25]
<java.io.InputStreamReader: void <init>(java.io.InputStream)>:[1,25]
<java.io.ObjectInputStream: java.lang.Object readObject()>:[1,25]
<java.io.ObjectInputStream: void <init>(java.io.InputStream)>:[1,25]
<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>:[1,25]
<java.io.ObjectOutputStream: void reset()>:[1,25]
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>:[1,25]
<java.io.OutputStream: void close()>:[1,25]
<java.io.OutputStream: void write(byte[])>:[1,25]
<java.io.OutputStream: void write(int)>:[1,25]
<java.io.PrintStream: void println(java.lang.String)>:[1,25]
<java.lang.AssertionError: void <init>()>:[1,25]
<java.lang.Boolean: boolean booleanValue()>:[1,25]
<java.lang.Boolean: boolean parseBoolean(java.lang.String)>:[1,25]
<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>:[1,25]
<java.lang.Boolean: java.lang.String toString(boolean)>:[1,25]
<java.lang.Byte: java.lang.String toString()>:[14,25]
<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>:[1,23]
<java.lang.Class: java.lang.Class forName(java.lang.String)>:[1,25]
<java.lang.Class: java.lang.String getName()>:[1,25]
<java.lang.Enum: void <init>(java.lang.String,int)>:[1,25]
<java.lang.Exception: void <init>()>:[1,25]
<java.lang.Exception: void <init>(java.lang.String)>:[1,25]
<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>:[1,25]
<java.lang.Float: float floatValue()>:[1,25]
<java.lang.Float: java.lang.Float valueOf(float)>:[1,25]
<java.lang.Float: java.lang.Float valueOf(java.lang.String)>:[1,25]
<java.lang.Float: void <init>(java.lang.String)>:[1,25]
<java.lang.Integer: int compare(int,int)>:[19,25]
<java.lang.Integer: int intValue()>:[1,25]
<java.lang.Integer: int parseInt(java.lang.String)>:[1,25]
<java.lang.Integer: java.lang.Integer decode(java.lang.String)>:[1,25]
<java.lang.Integer: java.lang.Integer valueOf(int)>:[1,25]
<java.lang.Integer: void <init>(int)>:[1,25]
<java.lang.Integer: void <init>(java.lang.String)>:[1,25]
<java.lang.Long: int compare(long,long)>:[19,25]
<java.lang.Long: java.lang.Long valueOf(java.lang.String)>:[1,25]
<java.lang.Long: java.lang.Long valueOf(long)>:[1,25]
<java.lang.Long: java.lang.String toString(long)>:[1,25]
<java.lang.Long: long longValue()>:[1,25]
<java.lang.Math: float abs(float)>:[1,25]
<java.lang.Math: float min(float,float)>:[1,25]
<java.lang.Math: int max(int,int)>:[1,25]
<java.lang.Math: int min(int,int)>:[1,25]
<java.lang.Math: int round(float)>:[1,25]
<java.lang.Object: boolean equals(java.lang.Object)>:[1,25]
<java.lang.Object: int hashCode()>:[1,25]
<java.lang.Object: java.lang.Class getClass()>:[1,25]
<java.lang.Object: java.lang.Object clone()>:[1,25]
<java.lang.Object: java.lang.String toString()>:[1,25]
<java.lang.Object: void <init>()>:[1,25]
<java.lang.Object: void notify()>:[1,25]
<java.lang.Object: void notifyAll()>:[1,25]
<java.lang.Object: void wait()>:[1,25]
<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable,boolean,boolean)>:[19,25]
<java.lang.String: boolean contains(java.lang.CharSequence)>:[1,25]
<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>:[1,25]
<java.lang.String: boolean isEmpty()>:[9,25]
<java.lang.String: boolean startsWith(java.lang.String)>:[1,25]
<java.lang.String: byte[] getBytes()>:[1,25]
<java.lang.String: byte[] getBytes(java.lang.String)>:[1,25]
<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>:[9,25]
<java.lang.String: char charAt(int)>:[1,25]
<java.lang.String: int compareTo(java.lang.String)>:[1,25]
<java.lang.String: int lastIndexOf(int)>:[1,25]
<java.lang.String: int length()>:[1,25]
<java.lang.String: java.lang.String replace(char,char)>:[1,25]
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>:[1,25]
<java.lang.String: java.lang.String substring(int)>:[1,25]
<java.lang.String: java.lang.String substring(int,int)>:[1,25]
<java.lang.String: java.lang.String toLowerCase()>:[1,25]
<java.lang.String: java.lang.String toUpperCase()>:[1,25]
<java.lang.String: java.lang.String trim()>:[1,25]
<java.lang.String: java.lang.String valueOf(boolean)>:[1,25]
<java.lang.String: java.lang.String valueOf(float)>:[1,25]
<java.lang.String: java.lang.String valueOf(int)>:[1,25]
<java.lang.String: java.lang.String valueOf(long)>:[1,25]
<java.lang.String: java.lang.String[] split(java.lang.String)>:[1,25]
<java.lang.String: void <init>(byte[])>:[1,25]
<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>:[9,25]
<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>:[9,25]
<java.lang.String: void <init>(java.lang.StringBuilder)>:[1,25]
<java.lang.StringBuffer: java.lang.StringBuffer append(char)>:[1,25]
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>:[1,25]
<java.lang.StringBuffer: void <init>(int)>:[1,25]
<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>:[1,25]
<java.lang.StringBuilder: java.lang.StringBuilder append(char)>:[1,25]
<java.lang.StringBuilder: java.lang.StringBuilder append(double)>:[1,25]
<java.lang.StringBuilder: java.lang.StringBuilder append(float)>:[1,25]
<java.lang.StringBuilder: java.lang.StringBuilder append(int)>:[1,25]
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>:[1,25]
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>:[1,25]
<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>:[1,25]
<java.lang.StringBuilder: void <init>()>:[1,25]
<java.lang.StringBuilder: void <init>(int)>:[1,25]
<java.lang.System: java.lang.String lineSeparator()>:[19,25]
<java.lang.System: long currentTimeMillis()>:[1,25]
<java.lang.System: long nanoTime()>:[1,25]
<java.lang.System: void exit(int)>:[1,25]
<java.lang.Thread: void <init>()>:[1,25]
<java.lang.Thread: void <init>(java.lang.Runnable)>:[1,25]
<java.lang.Thread: void <init>(java.lang.String)>:[1,25]
<java.lang.Thread: void sleep(long)>:[1,25]
<java.lang.Thread: void start()>:[1,25]
<java.lang.Throwable: java.lang.Throwable[] getSuppressed()>:[19,25]
<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>:[19,25]
<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>:[1,8]
<java.lang.reflect.Method: boolean isDefault()>:[24,25]
<java.net.CookieManager: java.net.CookieStore getCookieStore()>:[9,25]
<java.net.CookieManager: void setCookiePolicy(java.net.CookiePolicy)>:[9,25]
<java.net.DatagramPacket: byte[] getData()>:[1,25]
<java.net.DatagramPacket: void <init>(byte[],int)>:[1,25]
<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>:[1,25]
<java.net.DatagramSocket: int getLocalPort()>:[1,25]
<java.net.DatagramSocket: void <init>()>:[1,25]
<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>:[1,25]
<java.net.DatagramSocket: void send(java.net.DatagramPacket)>:[1,25]
<java.net.DatagramSocket: void setSoTimeout(int)>:[1,25]
<java.net.IDN: java.lang.String toASCII(java.lang.String)>:[9,25]
<java.net.IDN: java.lang.String toUnicode(java.lang.String)>:[9,25]
<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>:[1,25]
<java.net.InetSocketAddress: java.lang.String getHostString()>:[19,25]
<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>:[1,25]
<java.net.InterfaceAddress: java.net.InetAddress getAddress()>:[9,25]
<java.net.InterfaceAddress: java.net.InetAddress getBroadcast()>:[9,25]
<java.net.InterfaceAddress: short getNetworkPrefixLength()>:[9,25]
<java.net.NetworkInterface: boolean isLoopback()>:[9,25]
<java.net.NetworkInterface: boolean isPointToPoint()>:[9,25]
<java.net.NetworkInterface: boolean isUp()>:[9,25]
<java.net.NetworkInterface: boolean isVirtual()>:[9,25]
<java.net.NetworkInterface: boolean supportsMulticast()>:[9,25]
<java.net.NetworkInterface: byte[] getHardwareAddress()>:[9,25]
<java.net.NetworkInterface: int getMTU()>:[9,25]
<java.net.NetworkInterface: java.net.NetworkInterface getParent()>:[9,25]
<java.net.NetworkInterface: java.util.Enumeration getSubInterfaces()>:[9,25]
<java.net.NetworkInterface: java.util.List getInterfaceAddresses()>:[9,25]
<java.net.ServerSocket: java.net.Socket accept()>:[1,25]
<java.net.ServerSocket: void <init>(int)>:[1,25]
<java.net.Socket: boolean isClosed()>:[1,25]
<java.net.Socket: boolean isConnected()>:[1,25]
<java.net.Socket: int getSoTimeout()>:[1,25]
<java.net.Socket: java.io.InputStream getInputStream()>:[1,25]
<java.net.Socket: java.io.OutputStream getOutputStream()>:[1,25]
<java.net.Socket: java.net.InetAddress getInetAddress()>:[1,25]
<java.net.Socket: java.net.SocketAddress getRemoteSocketAddress()>:[1,25]
<java.net.Socket: void <init>()>:[1,25]
<java.net.Socket: void <init>(java.net.InetAddress,int)>:[1,25]
<java.net.Socket: void close()>:[1,25]
<java.net.Socket: void connect(java.net.SocketAddress,int)>:[1,25]
<java.net.Socket: void setSoTimeout(int)>:[1,25]
<java.net.URI: java.net.URL toURL()>:[1,25]
<java.net.URL: java.lang.String getFile()>:[1,25]
<java.net.URL: java.net.URLConnection openConnection()>:[1,25]
<java.net.URL: void <init>(java.lang.String)>:[1,25]
<java.net.URLConnection: java.io.InputStream getInputStream()>:[1,25]
<java.net.URLConnection: java.lang.String getContentType()>:[1,25]
<java.net.URLConnection: void connect()>:[1,25]
<java.net.URLDecoder: java.lang.String decode(java.lang.String)>:[1,25]
<java.net.URLEncoder: java.lang.String encode(java.lang.String)>:[1,25]
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>:[1,25]
<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel bind(java.net.SocketAddress)>:[24,25]
<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open(java.net.ProtocolFamily)>:[24,25]
<java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel bind(java.net.SocketAddress,int)>:[24,25]
<java.nio.channels.SocketChannel: java.net.SocketAddress getRemoteAddress()>:[24,25]
<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel bind(java.net.SocketAddress)>:[24,25]
<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel shutdownInput()>:[24,25]
<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel shutdownOutput()>:[24,25]
<java.security.MessageDigest: byte[] digest()>:[1,25]
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>:[1,25]
<java.security.MessageDigest: void update(byte[],int,int)>:[1,25]
<java.security.cert.X509Certificate: boolean hasUnsupportedCriticalExtension()>:[14,25]
<java.security.cert.X509Certificate: byte[] getExtensionValue(java.lang.String)>:[14,25]
<java.security.cert.X509Certificate: java.util.Set getCriticalExtensionOIDs()>:[14,25]
<java.text.DateFormatSymbols: java.text.DateFormatSymbols getInstance(java.util.Locale)>:[9,25]
<java.util.ArrayDeque: void <init>(int)>:[9,25]
<java.util.ArrayList: int size()>:[1,25]
<java.util.ArrayList: void <init>()>:[1,25]
<java.util.Arrays: boolean equals(byte[],byte[])>:[1,25]
<java.util.Arrays: byte[] copyOfRange(byte[],int,int)>:[9,25]
<java.util.Arrays: char[] copyOf(char[],int)>:[9,25]
<java.util.Arrays: char[] copyOfRange(char[],int,int)>:[9,25]
<java.util.Arrays: int binarySearch(int[],int,int,int)>:[9,25]
<java.util.Arrays: int[] copyOf(int[],int)>:[9,25]
<java.util.Arrays: int[] copyOfRange(int[],int,int)>:[9,25]
<java.util.Arrays: java.lang.String deepToString(java.lang.Object[])>:[1,25]
<java.util.Calendar: boolean equals(java.lang.Object)>:[14,25]
<java.util.Calendar: int hashCode()>:[14,25]
<java.util.Calendar: java.util.Calendar getInstance()>:[1,25]
<java.util.Calendar: java.util.Map getDisplayNames(int,int,java.util.Locale)>:[9,25]
<java.util.Calendar: long getTimeInMillis()>:[1,25]
<java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>:[9,25]
<java.util.Date: java.lang.String toLocaleString()>:[1,25]
<java.util.Date: long getTime()>:[1,25]
<java.util.Date: void <init>()>:[1,25]
<java.util.Date: void <init>(long)>:[1,25]
<java.util.Formatter: void <init>()>:[1,25]
<java.util.HashMap: void <init>()>:[1,25]
<java.util.LinkedHashMap: void <init>()>:[1,25]
<java.util.LinkedHashSet: void <init>()>:[1,25]
<java.util.LinkedList: boolean equals(java.lang.Object)>:[14,25]
<java.util.LinkedList: boolean isEmpty()>:[1,25]
<java.util.LinkedList: int hashCode()>:[14,25]
<java.util.LinkedList: java.util.Iterator iterator()>:[1,25]
<java.util.LinkedList: java.util.ListIterator listIterator()>:[1,25]
<java.util.LinkedList: void <init>()>:[1,25]
<java.util.Locale: boolean equals(java.lang.Object)>:[14,19]
<java.util.Locale: int hashCode()>:[14,19]
<java.util.Random: float nextFloat()>:[1,25]
<java.util.Random: int nextInt(int)>:[1,25]
<java.util.Random: long nextLong()>:[1,25]
<java.util.Random: void <init>()>:[1,25]
<java.util.ServiceLoader: java.util.Iterator iterator()>:[9,25]
<java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class)>:[9,25]
<java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>:[9,25]
<java.util.Timer: void <init>(boolean)>:[1,25]
<java.util.Timer: void cancel()>:[1,25]
<java.util.Timer: void schedule(java.util.TimerTask,long,long)>:[1,25]
<java.util.TimerTask: void <init>()>:[1,25]
<java.util.TreeMap: void <init>()>:[1,25]
<java.util.concurrent.LinkedBlockingQueue: void <init>()>:[1,25]
<java.util.concurrent.ThreadLocalRandom: int nextInt(int,int)>:[21,25]
<java.util.concurrent.ThreadLocalRandom: java.util.concurrent.ThreadLocalRandom current()>:[21,25]
<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>:[1,25]
<java.util.logging.Logger: void info(java.lang.String)>:[1,25]
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>:[1,25]
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>:[1,25]
<java.util.logging.Logger: void warning(java.lang.String)>:[1,25]
<java.util.regex.Matcher: boolean find()>:[1,25]
<java.util.regex.Matcher: int end(int)>:[1,25]
<java.util.regex.Matcher: int start(int)>:[1,25]
<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>:[1,25]
<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>:[1,25]
<java.util.zip.Deflater: int deflate(byte[],int,int,int)>:[19,25]
<javax.crypto.spec.GCMParameterSpec: void <init>(int,byte[])>:[19,25]
<javax.net.ssl.X509ExtendedKeyManager: java.lang.String[] getClientAliases(java.lang.String,java.security.Principal[])>:[14,23]
<javax.net.ssl.X509ExtendedKeyManager: java.lang.String[] getServerAliases(java.lang.String,java.security.Principal[])>:[14,23]
<javax.net.ssl.X509ExtendedKeyManager: java.security.PrivateKey getPrivateKey(java.lang.String)>:[14,23]
<javax.net.ssl.X509ExtendedKeyManager: java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)>:[14,23]
<javax.security.auth.Subject: java.lang.Object doAs(javax.security.auth.Subject,java.security.PrivilegedExceptionAction)>:[1,8]
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.DatatypeFactory newInstance()>:[8,25]
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.Duration newDuration(java.lang.String)>:[8,25]
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendar(java.lang.String)>:[8,25]
<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendar(java.util.GregorianCalendar)>:[8,25]
<javax.xml.datatype.XMLGregorianCalendar: java.util.GregorianCalendar toGregorianCalendar()>:[8,25]
<javax.xml.namespace.QName: boolean equals(java.lang.Object)>:[8,25]
<javax.xml.namespace.QName: java.lang.String getLocalPart()>:[8,25]
<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>:[8,25]
<javax.xml.namespace.QName: java.lang.String getPrefix()>:[8,25]
<javax.xml.namespace.QName: javax.xml.namespace.QName valueOf(java.lang.String)>:[8,25]
<javax.xml.namespace.QName: void <init>(java.lang.String)>:[8,25]
<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String,java.lang.String)>:[8,25]
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.InputStream)>:[1,25]
<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>:[1,25]
<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>:[1,25]
<javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParserFactory newInstance(java.lang.String,java.lang.ClassLoader)>:[9,25]
<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>:[8,25]
<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>:[8,25]
<javax.xml.transform.TransformerFactory: javax.xml.transform.Templates newTemplates(javax.xml.transform.Source)>:[8,25]
<javax.xml.transform.TransformerFactory: javax.xml.transform.Transformer newTransformer()>:[8,25]
<javax.xml.transform.TransformerFactory: javax.xml.transform.Transformer newTransformer(javax.xml.transform.Source)>:[8,25]
<javax.xml.transform.TransformerFactory: javax.xml.transform.TransformerFactory newInstance()>:[8,25]
<javax.xml.transform.dom.DOMResult: org.w3c.dom.Node getNode()>:[8,25]
<javax.xml.transform.dom.DOMResult: void <init>()>:[8,25]
<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>:[8,25]
<javax.xml.transform.sax.SAXResult: void <init>()>:[8,25]
<javax.xml.transform.sax.SAXResult: void <init>(org.xml.sax.ContentHandler)>:[8,25]
<javax.xml.transform.sax.SAXResult: void setHandler(org.xml.sax.ContentHandler)>:[8,25]
<javax.xml.transform.sax.SAXResult: void setLexicalHandler(org.xml.sax.ext.LexicalHandler)>:[8,25]
<javax.xml.transform.sax.SAXSource: void <init>()>:[8,25]
<javax.xml.transform.sax.SAXSource: void <init>(org.xml.sax.InputSource)>:[8,25]
<javax.xml.transform.sax.SAXSource: void setInputSource(org.xml.sax.InputSource)>:[8,25]
<javax.xml.transform.stream.StreamResult: java.io.Writer getWriter()>:[8,25]
<javax.xml.transform.stream.StreamResult: void <init>(java.io.OutputStream)>:[8,25]
<javax.xml.transform.stream.StreamResult: void <init>(java.io.Writer)>:[8,25]
<javax.xml.transform.stream.StreamSource: void <init>(java.io.File)>:[8,25]
<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>:[8,25]
<javax.xml.transform.stream.StreamSource: void <init>(java.io.Reader)>:[8,25]
<javax.xml.transform.stream.StreamSource: void <init>(java.lang.String)>:[8,25]
<junit.framework.Assert: java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)>:[16,25]
<junit.framework.Assert: void failNotEquals(java.lang.String,java.lang.Object,java.lang.Object)>:[16,25]
<junit.framework.Assert: void failNotSame(java.lang.String,java.lang.Object,java.lang.Object)>:[16,25]
<junit.framework.Assert: void failSame(java.lang.String)>:[16,25]
<junit.framework.TestSuite: junit.framework.Test warning(java.lang.String)>:[16,25]
<org.apache.http.HttpHost: int getPort()>:[1,22]
<org.apache.http.HttpHost: java.lang.String getHostName()>:[1,22]
<org.apache.http.HttpHost: java.lang.String getSchemeName()>:[1,22]
<org.apache.http.HttpHost: java.lang.String toHostString()>:[1,22]
<org.apache.http.HttpHost: java.lang.String toURI()>:[1,22]
<org.apache.http.HttpHost: void <init>(java.lang.String)>:[1,22]
<org.apache.http.HttpHost: void <init>(java.lang.String,int)>:[1,22]
<org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)>:[1,22]
<org.apache.http.HttpVersion: void <init>(int,int)>:[1,22]
<org.apache.http.ProtocolVersion: boolean greaterEquals(org.apache.http.ProtocolVersion)>:[1,22]
<org.apache.http.ProtocolVersion: boolean isComparable(org.apache.http.ProtocolVersion)>:[1,22]
<org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)>:[1,22]
<org.apache.http.ProtocolVersion: int compareToVersion(org.apache.http.ProtocolVersion)>:[1,22]
<org.apache.http.ProtocolVersion: int getMajor()>:[1,22]
<org.apache.http.ProtocolVersion: int getMinor()>:[1,22]
<org.apache.http.ProtocolVersion: java.lang.String getProtocol()>:[1,22]
<org.apache.http.ProtocolVersion: org.apache.http.ProtocolVersion forVersion(int,int)>:[1,22]
<org.apache.http.ProtocolVersion: void <init>(java.lang.String,int,int)>:[1,22]
<org.apache.http.auth.AuthSchemeRegistry: org.apache.http.auth.AuthScheme getAuthScheme(java.lang.String,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.auth.AuthSchemeRegistry: void <init>()>:[1,22]
<org.apache.http.auth.AuthSchemeRegistry: void register(java.lang.String,org.apache.http.auth.AuthSchemeFactory)>:[1,22]
<org.apache.http.auth.AuthScope: int getPort()>:[1,22]
<org.apache.http.auth.AuthScope: int match(org.apache.http.auth.AuthScope)>:[1,22]
<org.apache.http.auth.AuthScope: java.lang.String getHost()>:[1,22]
<org.apache.http.auth.AuthScope: java.lang.String getRealm()>:[1,22]
<org.apache.http.auth.AuthScope: java.lang.String getScheme()>:[1,22]
<org.apache.http.auth.AuthScope: void <init>(java.lang.String,int)>:[1,22]
<org.apache.http.auth.AuthScope: void <init>(java.lang.String,int,java.lang.String)>:[1,22]
<org.apache.http.auth.AuthScope: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>:[1,22]
<org.apache.http.auth.AuthState: boolean isValid()>:[1,22]
<org.apache.http.auth.AuthState: org.apache.http.auth.AuthScheme getAuthScheme()>:[1,22]
<org.apache.http.auth.AuthState: org.apache.http.auth.AuthScope getAuthScope()>:[1,22]
<org.apache.http.auth.AuthState: org.apache.http.auth.Credentials getCredentials()>:[1,22]
<org.apache.http.auth.AuthState: void <init>()>:[1,22]
<org.apache.http.auth.AuthState: void invalidate()>:[1,22]
<org.apache.http.auth.AuthState: void setAuthScheme(org.apache.http.auth.AuthScheme)>:[1,22]
<org.apache.http.auth.AuthState: void setAuthScope(org.apache.http.auth.AuthScope)>:[1,22]
<org.apache.http.auth.AuthState: void setCredentials(org.apache.http.auth.Credentials)>:[1,22]
<org.apache.http.auth.BasicUserPrincipal: java.lang.String getName()>:[1,22]
<org.apache.http.auth.BasicUserPrincipal: void <init>(java.lang.String)>:[1,22]
<org.apache.http.auth.NTCredentials: java.lang.String getDomain()>:[1,22]
<org.apache.http.auth.NTCredentials: java.lang.String getPassword()>:[1,22]
<org.apache.http.auth.NTCredentials: java.lang.String getUserName()>:[1,22]
<org.apache.http.auth.NTCredentials: java.lang.String getWorkstation()>:[1,22]
<org.apache.http.auth.NTCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>:[1,22]
<org.apache.http.auth.NTUserPrincipal: java.lang.String getDomain()>:[1,22]
<org.apache.http.auth.NTUserPrincipal: java.lang.String getUsername()>:[1,22]
<org.apache.http.auth.NTUserPrincipal: void <init>(java.lang.String,java.lang.String)>:[1,22]
<org.apache.http.auth.UsernamePasswordCredentials: void <init>(java.lang.String)>:[1,22]
<org.apache.http.auth.UsernamePasswordCredentials: void <init>(java.lang.String,java.lang.String)>:[1,22]
<org.apache.http.auth.params.AuthParams: java.lang.String getCredentialCharset(org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.auth.params.AuthParams: void setCredentialCharset(org.apache.http.params.HttpParams,java.lang.String)>:[1,22]
<org.apache.http.client.HttpResponseException: int getStatusCode()>:[1,22]
<org.apache.http.client.HttpResponseException: void <init>(int,java.lang.String)>:[1,22]
<org.apache.http.client.entity.UrlEncodedFormEntity: void <init>(java.util.List)>:[1,22]
<org.apache.http.client.entity.UrlEncodedFormEntity: void <init>(java.util.List,java.lang.String)>:[1,22]
<org.apache.http.client.methods.HttpDelete: void <init>()>:[1,22]
<org.apache.http.client.methods.HttpDelete: void <init>(java.lang.String)>:[1,22]
<org.apache.http.client.methods.HttpDelete: void <init>(java.net.URI)>:[1,22]
<org.apache.http.client.methods.HttpEntityEnclosingRequestBase: org.apache.http.HttpEntity getEntity()>:[1,22]
<org.apache.http.client.methods.HttpEntityEnclosingRequestBase: void <init>()>:[1,22]
<org.apache.http.client.methods.HttpEntityEnclosingRequestBase: void setEntity(org.apache.http.HttpEntity)>:[1,22]
<org.apache.http.client.methods.HttpGet: void <init>()>:[1,22]
<org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)>:[1,22]
<org.apache.http.client.methods.HttpGet: void <init>(java.net.URI)>:[1,22]
<org.apache.http.client.methods.HttpHead: void <init>()>:[1,22]
<org.apache.http.client.methods.HttpHead: void <init>(java.lang.String)>:[1,22]
<org.apache.http.client.methods.HttpHead: void <init>(java.net.URI)>:[1,22]
<org.apache.http.client.methods.HttpOptions: void <init>()>:[1,22]
<org.apache.http.client.methods.HttpOptions: void <init>(java.lang.String)>:[1,22]
<org.apache.http.client.methods.HttpOptions: void <init>(java.net.URI)>:[1,22]
<org.apache.http.client.methods.HttpPost: void <init>()>:[1,22]
<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)>:[1,22]
<org.apache.http.client.methods.HttpPost: void <init>(java.net.URI)>:[1,22]
<org.apache.http.client.methods.HttpPut: void <init>()>:[1,22]
<org.apache.http.client.methods.HttpPut: void <init>(java.lang.String)>:[1,22]
<org.apache.http.client.methods.HttpPut: void <init>(java.net.URI)>:[1,22]
<org.apache.http.client.methods.HttpRequestBase: java.lang.Object clone()>:[1,22]
<org.apache.http.client.methods.HttpRequestBase: java.lang.String getMethod()>:[1,22]
<org.apache.http.client.methods.HttpRequestBase: java.net.URI getURI()>:[1,22]
<org.apache.http.client.methods.HttpRequestBase: org.apache.http.ProtocolVersion getProtocolVersion()>:[1,22]
<org.apache.http.client.methods.HttpRequestBase: org.apache.http.RequestLine getRequestLine()>:[1,22]
<org.apache.http.client.methods.HttpRequestBase: void <init>()>:[1,22]
<org.apache.http.client.methods.HttpRequestBase: void abort()>:[1,22]
<org.apache.http.client.methods.HttpRequestBase: void setURI(java.net.URI)>:[1,22]
<org.apache.http.client.methods.HttpTrace: void <init>()>:[1,22]
<org.apache.http.client.methods.HttpTrace: void <init>(java.lang.String)>:[1,22]
<org.apache.http.client.methods.HttpTrace: void <init>(java.net.URI)>:[1,22]
<org.apache.http.client.params.HttpClientParams: boolean isAuthenticating(org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.client.params.HttpClientParams: boolean isRedirecting(org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.client.params.HttpClientParams: java.lang.String getCookiePolicy(org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.client.params.HttpClientParams: void setAuthenticating(org.apache.http.params.HttpParams,boolean)>:[1,22]
<org.apache.http.client.params.HttpClientParams: void setRedirecting(org.apache.http.params.HttpParams,boolean)>:[1,22]
<org.apache.http.client.protocol.RequestAddCookies: void <init>()>:[1,22]
<org.apache.http.client.protocol.RequestDefaultHeaders: void <init>()>:[1,22]
<org.apache.http.client.protocol.RequestProxyAuthentication: void <init>()>:[1,22]
<org.apache.http.client.protocol.RequestTargetAuthentication: void <init>()>:[1,22]
<org.apache.http.client.protocol.ResponseProcessCookies: void <init>()>:[1,22]
<org.apache.http.client.utils.CloneUtils: java.lang.Object clone(java.lang.Object)>:[1,22]
<org.apache.http.client.utils.URIUtils: java.net.URI createURI(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>:[1,22]
<org.apache.http.client.utils.URIUtils: java.net.URI resolve(java.net.URI,java.lang.String)>:[1,22]
<org.apache.http.client.utils.URIUtils: java.net.URI resolve(java.net.URI,java.net.URI)>:[1,22]
<org.apache.http.client.utils.URIUtils: java.net.URI rewriteURI(java.net.URI,org.apache.http.HttpHost)>:[1,22]
<org.apache.http.client.utils.URIUtils: java.net.URI rewriteURI(java.net.URI,org.apache.http.HttpHost,boolean)>:[1,22]
<org.apache.http.client.utils.URLEncodedUtils: java.lang.String format(java.util.List,java.lang.String)>:[1,22]
<org.apache.http.client.utils.URLEncodedUtils: java.util.List parse(java.net.URI,java.lang.String)>:[1,22]
<org.apache.http.client.utils.URLEncodedUtils: void parse(java.util.List,java.util.Scanner,java.lang.String)>:[1,22]
<org.apache.http.conn.BasicManagedEntity: void <init>(org.apache.http.HttpEntity,org.apache.http.conn.ManagedClientConnection,boolean)>:[1,22]
<org.apache.http.conn.BasicManagedEntity: void releaseManagedConnection()>:[1,22]
<org.apache.http.conn.EofSensorInputStream: boolean isReadAllowed()>:[1,22]
<org.apache.http.conn.EofSensorInputStream: void <init>(java.io.InputStream,org.apache.http.conn.EofSensorWatcher)>:[1,22]
<org.apache.http.conn.EofSensorInputStream: void checkAbort()>:[1,22]
<org.apache.http.conn.EofSensorInputStream: void checkClose()>:[1,22]
<org.apache.http.conn.EofSensorInputStream: void checkEOF(int)>:[1,22]
<org.apache.http.conn.HttpHostConnectException: void <init>(org.apache.http.HttpHost,java.net.ConnectException)>:[1,22]
<org.apache.http.conn.MultihomePlainSocketFactory: java.net.Socket createSocket()>:[1,22]
<org.apache.http.conn.params.ConnManagerParams: int getMaxTotalConnections(org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.conn.params.ConnManagerParams: long getTimeout(org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.conn.params.ConnManagerParams: org.apache.http.conn.params.ConnPerRoute getMaxConnectionsPerRoute(org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.conn.params.ConnManagerParams: void setMaxConnectionsPerRoute(org.apache.http.params.HttpParams,org.apache.http.conn.params.ConnPerRoute)>:[1,22]
<org.apache.http.conn.params.ConnManagerParams: void setMaxTotalConnections(org.apache.http.params.HttpParams,int)>:[1,22]
<org.apache.http.conn.params.ConnManagerParams: void setTimeout(org.apache.http.params.HttpParams,long)>:[1,22]
<org.apache.http.conn.params.ConnPerRouteBean: int getMaxForRoute(org.apache.http.conn.routing.HttpRoute)>:[1,22]
<org.apache.http.conn.params.ConnPerRouteBean: void <init>()>:[1,22]
<org.apache.http.conn.params.ConnPerRouteBean: void <init>(int)>:[1,22]
<org.apache.http.conn.params.ConnPerRouteBean: void setDefaultMaxPerRoute(int)>:[1,22]
<org.apache.http.conn.params.ConnPerRouteBean: void setMaxForRoute(org.apache.http.conn.routing.HttpRoute,int)>:[1,22]
<org.apache.http.conn.params.ConnRouteParams: java.net.InetAddress getLocalAddress(org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.conn.params.ConnRouteParams: org.apache.http.HttpHost getDefaultProxy(org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.conn.params.ConnRouteParams: org.apache.http.conn.routing.HttpRoute getForcedRoute(org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.conn.params.ConnRouteParams: void setDefaultProxy(org.apache.http.params.HttpParams,org.apache.http.HttpHost)>:[1,22]
<org.apache.http.conn.routing.BasicRouteDirector: int directStep(org.apache.http.conn.routing.RouteInfo,org.apache.http.conn.routing.RouteInfo)>:[1,22]
<org.apache.http.conn.routing.BasicRouteDirector: int firstStep(org.apache.http.conn.routing.RouteInfo)>:[1,22]
<org.apache.http.conn.routing.BasicRouteDirector: int proxiedStep(org.apache.http.conn.routing.RouteInfo,org.apache.http.conn.routing.RouteInfo)>:[1,22]
<org.apache.http.conn.routing.BasicRouteDirector: void <init>()>:[1,22]
<org.apache.http.conn.routing.HttpRoute: boolean equals(java.lang.Object)>:[1,22]
<org.apache.http.conn.routing.HttpRoute: boolean isSecure()>:[1,22]
<org.apache.http.conn.routing.HttpRoute: boolean isTunnelled()>:[1,22]
<org.apache.http.conn.routing.HttpRoute: int getHopCount()>:[1,22]
<org.apache.http.conn.routing.HttpRoute: java.net.InetAddress getLocalAddress()>:[1,22]
<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getHopTarget(int)>:[1,22]
<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getProxyHost()>:[1,22]
<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getTargetHost()>:[1,22]
<org.apache.http.conn.routing.HttpRoute: void <init>(org.apache.http.HttpHost)>:[1,22]
<org.apache.http.conn.routing.HttpRoute: void <init>(org.apache.http.HttpHost,java.net.InetAddress,boolean)>:[1,22]
<org.apache.http.conn.routing.HttpRoute: void <init>(org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.HttpHost,boolean)>:[1,22]
<org.apache.http.conn.routing.RouteTracker: boolean isConnected()>:[1,22]
<org.apache.http.conn.routing.RouteTracker: boolean isLayered()>:[1,22]
<org.apache.http.conn.routing.RouteTracker: boolean isTunnelled()>:[1,22]
<org.apache.http.conn.routing.RouteTracker: int getHopCount()>:[1,22]
<org.apache.http.conn.routing.RouteTracker: org.apache.http.HttpHost getTargetHost()>:[1,22]
<org.apache.http.conn.routing.RouteTracker: org.apache.http.conn.routing.HttpRoute toRoute()>:[1,22]
<org.apache.http.conn.routing.RouteTracker: void <init>(org.apache.http.HttpHost,java.net.InetAddress)>:[1,22]
<org.apache.http.conn.routing.RouteTracker: void <init>(org.apache.http.conn.routing.HttpRoute)>:[1,22]
<org.apache.http.conn.routing.RouteTracker: void connectProxy(org.apache.http.HttpHost,boolean)>:[1,22]
<org.apache.http.conn.routing.RouteTracker: void connectTarget(boolean)>:[1,22]
<org.apache.http.conn.routing.RouteTracker: void layerProtocol(boolean)>:[1,22]
<org.apache.http.conn.routing.RouteTracker: void tunnelProxy(org.apache.http.HttpHost,boolean)>:[1,22]
<org.apache.http.conn.routing.RouteTracker: void tunnelTarget(boolean)>:[1,22]
<org.apache.http.conn.scheme.PlainSocketFactory: java.net.Socket createSocket()>:[1,22]
<org.apache.http.conn.scheme.PlainSocketFactory: org.apache.http.conn.scheme.PlainSocketFactory getSocketFactory()>:[1,22]
<org.apache.http.conn.scheme.PlainSocketFactory: void <init>()>:[1,22]
<org.apache.http.conn.scheme.PlainSocketFactory: void <init>(org.apache.http.conn.scheme.HostNameResolver)>:[1,22]
<org.apache.http.conn.scheme.Scheme: boolean isLayered()>:[1,22]
<org.apache.http.conn.scheme.Scheme: int getDefaultPort()>:[1,22]
<org.apache.http.conn.scheme.Scheme: int resolvePort(int)>:[1,22]
<org.apache.http.conn.scheme.Scheme: java.lang.String getName()>:[1,22]
<org.apache.http.conn.scheme.Scheme: org.apache.http.conn.scheme.SocketFactory getSocketFactory()>:[1,22]
<org.apache.http.conn.scheme.Scheme: void <init>(java.lang.String,org.apache.http.conn.scheme.SocketFactory,int)>:[1,22]
<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme get(java.lang.String)>:[1,22]
<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme getScheme(java.lang.String)>:[1,22]
<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme getScheme(org.apache.http.HttpHost)>:[1,22]
<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme)>:[1,22]
<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme unregister(java.lang.String)>:[1,22]
<org.apache.http.conn.scheme.SchemeRegistry: void <init>()>:[1,22]
<org.apache.http.conn.util.InetAddressUtils: boolean isIPv4Address(java.lang.String)>:[1,22]
<org.apache.http.conn.util.InetAddressUtils: boolean isIPv6Address(java.lang.String)>:[1,22]
<org.apache.http.conn.util.InetAddressUtils: boolean isIPv6HexCompressedAddress(java.lang.String)>:[1,22]
<org.apache.http.conn.util.InetAddressUtils: boolean isIPv6StdAddress(java.lang.String)>:[1,22]
<org.apache.http.cookie.CookieIdentityComparator: int compare(org.apache.http.cookie.Cookie,org.apache.http.cookie.Cookie)>:[1,22]
<org.apache.http.cookie.CookieIdentityComparator: void <init>()>:[1,22]
<org.apache.http.cookie.CookieOrigin: boolean isSecure()>:[1,22]
<org.apache.http.cookie.CookieOrigin: int getPort()>:[1,22]
<org.apache.http.cookie.CookieOrigin: java.lang.String getHost()>:[1,22]
<org.apache.http.cookie.CookieOrigin: java.lang.String getPath()>:[1,22]
<org.apache.http.cookie.CookieOrigin: void <init>(java.lang.String,int,java.lang.String,boolean)>:[1,22]
<org.apache.http.cookie.CookiePathComparator: int compare(org.apache.http.cookie.Cookie,org.apache.http.cookie.Cookie)>:[1,22]
<org.apache.http.cookie.CookiePathComparator: void <init>()>:[1,22]
<org.apache.http.cookie.CookieSpecRegistry: org.apache.http.cookie.CookieSpec getCookieSpec(java.lang.String,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.cookie.CookieSpecRegistry: void <init>()>:[1,22]
<org.apache.http.cookie.CookieSpecRegistry: void register(java.lang.String,org.apache.http.cookie.CookieSpecFactory)>:[1,22]
<org.apache.http.entity.AbstractHttpEntity: org.apache.http.Header getContentType()>:[1,22]
<org.apache.http.entity.AbstractHttpEntity: void <init>()>:[1,22]
<org.apache.http.entity.AbstractHttpEntity: void setChunked(boolean)>:[1,22]
<org.apache.http.entity.AbstractHttpEntity: void setContentEncoding(java.lang.String)>:[1,22]
<org.apache.http.entity.AbstractHttpEntity: void setContentEncoding(org.apache.http.Header)>:[1,22]
<org.apache.http.entity.AbstractHttpEntity: void setContentType(java.lang.String)>:[1,22]
<org.apache.http.entity.AbstractHttpEntity: void setContentType(org.apache.http.Header)>:[1,22]
<org.apache.http.entity.BasicHttpEntity: java.io.InputStream getContent()>:[1,22]
<org.apache.http.entity.BasicHttpEntity: void <init>()>:[1,22]
<org.apache.http.entity.BasicHttpEntity: void setContent(java.io.InputStream)>:[1,22]
<org.apache.http.entity.BasicHttpEntity: void setContentLength(long)>:[1,22]
<org.apache.http.entity.BufferedHttpEntity: void <init>(org.apache.http.HttpEntity)>:[1,22]
<org.apache.http.entity.ByteArrayEntity: void <init>(byte[])>:[1,22]
<org.apache.http.entity.EntityTemplate: void <init>(org.apache.http.entity.ContentProducer)>:[1,22]
<org.apache.http.entity.EntityTemplate: void writeTo(java.io.OutputStream)>:[1,22]
<org.apache.http.entity.FileEntity: void <init>(java.io.File,java.lang.String)>:[1,22]
<org.apache.http.entity.HttpEntityWrapper: boolean isChunked()>:[1,22]
<org.apache.http.entity.HttpEntityWrapper: boolean isStreaming()>:[1,22]
<org.apache.http.entity.HttpEntityWrapper: java.io.InputStream getContent()>:[1,22]
<org.apache.http.entity.HttpEntityWrapper: long getContentLength()>:[1,22]
<org.apache.http.entity.HttpEntityWrapper: void <init>(org.apache.http.HttpEntity)>:[1,22]
<org.apache.http.entity.HttpEntityWrapper: void consumeContent()>:[1,22]
<org.apache.http.entity.HttpEntityWrapper: void writeTo(java.io.OutputStream)>:[1,22]
<org.apache.http.entity.InputStreamEntity: void <init>(java.io.InputStream,long)>:[1,22]
<org.apache.http.entity.SerializableEntity: void <init>(java.io.Serializable,boolean)>:[1,22]
<org.apache.http.entity.StringEntity: void <init>(java.lang.String)>:[1,22]
<org.apache.http.entity.StringEntity: void <init>(java.lang.String,java.lang.String)>:[1,22]
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.HttpResponseFactory createHttpResponseFactory()>:[1,22]
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.entity.EntityDeserializer createEntityDeserializer()>:[1,22]
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.entity.EntitySerializer createEntitySerializer()>:[1,22]
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.io.HttpMessageParser createResponseParser(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.io.HttpMessageWriter createRequestWriter(org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.AbstractHttpClientConnection: void <init>()>:[1,22]
<org.apache.http.impl.AbstractHttpClientConnection: void assertOpen()>:[1,22]
<org.apache.http.impl.AbstractHttpClientConnection: void doFlush()>:[1,22]
<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.HttpRequestFactory createHttpRequestFactory()>:[1,22]
<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.impl.entity.EntityDeserializer createEntityDeserializer()>:[1,22]
<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.impl.entity.EntitySerializer createEntitySerializer()>:[1,22]
<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.io.HttpMessageParser createRequestParser(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpRequestFactory,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.io.HttpMessageWriter createResponseWriter(org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.AbstractHttpServerConnection: void <init>()>:[1,22]
<org.apache.http.impl.AbstractHttpServerConnection: void assertOpen()>:[1,22]
<org.apache.http.impl.AbstractHttpServerConnection: void doFlush()>:[1,22]
<org.apache.http.impl.DefaultConnectionReuseStrategy: org.apache.http.TokenIterator createTokenIterator(org.apache.http.HeaderIterator)>:[1,22]
<org.apache.http.impl.DefaultConnectionReuseStrategy: void <init>()>:[1,22]
<org.apache.http.impl.DefaultHttpClientConnection: void <init>()>:[1,22]
<org.apache.http.impl.DefaultHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.DefaultHttpRequestFactory: org.apache.http.HttpRequest newHttpRequest(java.lang.String,java.lang.String)>:[1,22]
<org.apache.http.impl.DefaultHttpRequestFactory: void <init>()>:[1,22]
<org.apache.http.impl.DefaultHttpResponseFactory: java.util.Locale determineLocale(org.apache.http.protocol.HttpContext)>:[1,22]
<org.apache.http.impl.DefaultHttpResponseFactory: void <init>()>:[1,22]
<org.apache.http.impl.DefaultHttpResponseFactory: void <init>(org.apache.http.ReasonPhraseCatalog)>:[1,22]
<org.apache.http.impl.DefaultHttpServerConnection: void <init>()>:[1,22]
<org.apache.http.impl.DefaultHttpServerConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.EnglishReasonPhraseCatalog: void <init>()>:[1,22]
<org.apache.http.impl.HttpConnectionMetricsImpl: void <init>(org.apache.http.io.HttpTransportMetrics,org.apache.http.io.HttpTransportMetrics)>:[1,22]
<org.apache.http.impl.HttpConnectionMetricsImpl: void incrementRequestCount()>:[1,22]
<org.apache.http.impl.HttpConnectionMetricsImpl: void incrementResponseCount()>:[1,22]
<org.apache.http.impl.NoConnectionReuseStrategy: void <init>()>:[1,22]
<org.apache.http.impl.SocketHttpClientConnection: org.apache.http.io.SessionInputBuffer createSessionInputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.SocketHttpClientConnection: org.apache.http.io.SessionOutputBuffer createSessionOutputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.SocketHttpClientConnection: void <init>()>:[1,22]
<org.apache.http.impl.SocketHttpClientConnection: void assertOpen()>:[1,22]
<org.apache.http.impl.SocketHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.SocketHttpClientConnection: void close()>:[1,22]
<org.apache.http.impl.SocketHttpClientConnection: void shutdown()>:[1,22]
<org.apache.http.impl.SocketHttpServerConnection: org.apache.http.io.SessionInputBuffer createHttpDataReceiver(java.net.Socket,int,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.SocketHttpServerConnection: org.apache.http.io.SessionOutputBuffer createHttpDataTransmitter(java.net.Socket,int,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.SocketHttpServerConnection: void <init>()>:[1,22]
<org.apache.http.impl.SocketHttpServerConnection: void assertOpen()>:[1,22]
<org.apache.http.impl.SocketHttpServerConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.auth.AuthSchemeBase: void <init>()>:[1,22]
<org.apache.http.impl.auth.AuthSchemeBase: void parseChallenge(org.apache.http.util.CharArrayBuffer,int,int)>:[1,22]
<org.apache.http.impl.auth.BasicScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,java.lang.String,boolean)>:[1,22]
<org.apache.http.impl.auth.BasicScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>:[1,22]
<org.apache.http.impl.auth.BasicScheme: void <init>()>:[1,22]
<org.apache.http.impl.auth.BasicSchemeFactory: void <init>()>:[1,22]
<org.apache.http.impl.auth.DigestScheme: java.lang.String createCnonce()>:[1,22]
<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>:[1,22]
<org.apache.http.impl.auth.DigestScheme: void <init>()>:[1,22]
<org.apache.http.impl.auth.DigestSchemeFactory: void <init>()>:[1,22]
<org.apache.http.impl.auth.NTLMScheme: void <init>(org.apache.http.impl.auth.NTLMEngine)>:[1,22]
<org.apache.http.impl.auth.RFC2617Scheme: java.lang.String getParameter(java.lang.String)>:[1,22]
<org.apache.http.impl.auth.RFC2617Scheme: void <init>()>:[1,22]
<org.apache.http.impl.client.AbstractAuthenticationHandler: java.util.List getAuthPreferences()>:[1,22]
<org.apache.http.impl.client.AbstractAuthenticationHandler: void <init>()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.ConnectionReuseStrategy createConnectionReuseStrategy()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.ConnectionReuseStrategy getConnectionReuseStrategy()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.auth.AuthSchemeRegistry createAuthSchemeRegistry()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.auth.AuthSchemeRegistry getAuthSchemes()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler createProxyAuthenticationHandler()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler createTargetAuthenticationHandler()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler getProxyAuthenticationHandler()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler getTargetAuthenticationHandler()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CookieStore createCookieStore()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CookieStore getCookieStore()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CredentialsProvider createCredentialsProvider()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.CredentialsProvider getCredentialsProvider()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.HttpRequestRetryHandler createHttpRequestRetryHandler()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.HttpRequestRetryHandler getHttpRequestRetryHandler()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.RedirectHandler createRedirectHandler()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.RedirectHandler getRedirectHandler()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.RequestDirector createClientRequestDirector(org.apache.http.protocol.HttpRequestExecutor,org.apache.http.conn.ClientConnectionManager,org.apache.http.ConnectionReuseStrategy,org.apache.http.conn.ConnectionKeepAliveStrategy,org.apache.http.conn.routing.HttpRoutePlanner,org.apache.http.protocol.HttpProcessor,org.apache.http.client.HttpRequestRetryHandler,org.apache.http.client.RedirectHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.UserTokenHandler,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.UserTokenHandler createUserTokenHandler()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.UserTokenHandler getUserTokenHandler()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager createClientConnectionManager()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ConnectionKeepAliveStrategy createConnectionKeepAliveStrategy()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ConnectionKeepAliveStrategy getConnectionKeepAliveStrategy()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.routing.HttpRoutePlanner createHttpRoutePlanner()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.routing.HttpRoutePlanner getRoutePlanner()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.cookie.CookieSpecRegistry createCookieSpecRegistry()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.cookie.CookieSpecRegistry getCookieSpecs()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams createHttpParams()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams determineParams(org.apache.http.HttpRequest)>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.params.HttpParams getParams()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor createHttpProcessor()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.BasicHttpProcessor getHttpProcessor()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.HttpContext createHttpContext()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.HttpRequestExecutor createRequestExecutor()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.protocol.HttpRequestExecutor getRequestExecutor()>:[1,22]
<org.apache.http.impl.client.AbstractHttpClient: void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.client.BasicCookieStore: void <init>()>:[1,22]
<org.apache.http.impl.client.BasicCookieStore: void addCookie(org.apache.http.cookie.Cookie)>:[1,22]
<org.apache.http.impl.client.BasicCredentialsProvider: org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope)>:[1,22]
<org.apache.http.impl.client.BasicCredentialsProvider: void <init>()>:[1,22]
<org.apache.http.impl.client.BasicCredentialsProvider: void clear()>:[1,22]
<org.apache.http.impl.client.BasicCredentialsProvider: void setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials)>:[1,22]
<org.apache.http.impl.client.BasicResponseHandler: java.lang.String handleResponse(org.apache.http.HttpResponse)>:[1,22]
<org.apache.http.impl.client.BasicResponseHandler: void <init>()>:[1,22]
<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getApplicationParams()>:[1,22]
<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getClientParams()>:[1,22]
<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getOverrideParams()>:[1,22]
<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams getRequestParams()>:[1,22]
<org.apache.http.impl.client.ClientParamsStack: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams,org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy: void <init>()>:[1,22]
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.client.AuthenticationHandler createTargetAuthenticationHandler()>:[1,22]
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.params.HttpParams createHttpParams()>:[1,22]
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.protocol.BasicHttpProcessor createHttpProcessor()>:[1,22]
<org.apache.http.impl.client.DefaultHttpClient: void <init>()>:[1,22]
<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.client.DefaultHttpRequestRetryHandler: void <init>()>:[1,22]
<org.apache.http.impl.client.DefaultHttpRequestRetryHandler: void <init>(int,boolean)>:[1,22]
<org.apache.http.impl.client.DefaultProxyAuthenticationHandler: void <init>()>:[1,22]
<org.apache.http.impl.client.DefaultRedirectHandler: boolean isRedirectRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>:[1,22]
<org.apache.http.impl.client.DefaultRedirectHandler: java.net.URI getLocationURI(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>:[1,22]
<org.apache.http.impl.client.DefaultRedirectHandler: void <init>()>:[1,22]
<org.apache.http.impl.client.DefaultRequestDirector: boolean createTunnelToProxy(org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext)>:[1,22]
<org.apache.http.impl.client.DefaultRequestDirector: boolean createTunnelToTarget(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>:[1,22]
<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpRequest createConnectRequest(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>:[1,22]
<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>:[1,22]
<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>:[1,22]
<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.impl.client.RoutedRequest handleResponse(org.apache.http.impl.client.RoutedRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>:[1,22]
<org.apache.http.impl.client.DefaultRequestDirector: void <init>(org.apache.http.protocol.HttpRequestExecutor,org.apache.http.conn.ClientConnectionManager,org.apache.http.ConnectionReuseStrategy,org.apache.http.conn.ConnectionKeepAliveStrategy,org.apache.http.conn.routing.HttpRoutePlanner,org.apache.http.protocol.HttpProcessor,org.apache.http.client.HttpRequestRetryHandler,org.apache.http.client.RedirectHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.UserTokenHandler,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.client.DefaultRequestDirector: void establishRoute(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>:[1,22]
<org.apache.http.impl.client.DefaultRequestDirector: void releaseConnection()>:[1,22]
<org.apache.http.impl.client.DefaultRequestDirector: void rewriteRequestURI(org.apache.http.impl.client.RequestWrapper,org.apache.http.conn.routing.HttpRoute)>:[1,22]
<org.apache.http.impl.client.DefaultTargetAuthenticationHandler: void <init>()>:[1,22]
<org.apache.http.impl.client.DefaultUserTokenHandler: void <init>()>:[1,22]
<org.apache.http.impl.client.EntityEnclosingRequestWrapper: void <init>(org.apache.http.HttpEntityEnclosingRequest)>:[1,22]
<org.apache.http.impl.client.EntityEnclosingRequestWrapper: void setEntity(org.apache.http.HttpEntity)>:[1,22]
<org.apache.http.impl.client.RedirectLocations: boolean contains(java.net.URI)>:[1,22]
<org.apache.http.impl.client.RedirectLocations: void <init>()>:[1,22]
<org.apache.http.impl.client.RedirectLocations: void add(java.net.URI)>:[1,22]
<org.apache.http.impl.client.RequestWrapper: boolean isRepeatable()>:[1,22]
<org.apache.http.impl.client.RequestWrapper: int getExecCount()>:[1,22]
<org.apache.http.impl.client.RequestWrapper: java.lang.String getMethod()>:[1,22]
<org.apache.http.impl.client.RequestWrapper: java.net.URI getURI()>:[1,22]
<org.apache.http.impl.client.RequestWrapper: org.apache.http.HttpRequest getOriginal()>:[1,22]
<org.apache.http.impl.client.RequestWrapper: org.apache.http.ProtocolVersion getProtocolVersion()>:[1,22]
<org.apache.http.impl.client.RequestWrapper: org.apache.http.RequestLine getRequestLine()>:[1,22]
<org.apache.http.impl.client.RequestWrapper: void <init>(org.apache.http.HttpRequest)>:[1,22]
<org.apache.http.impl.client.RequestWrapper: void incrementExecCount()>:[1,22]
<org.apache.http.impl.client.RequestWrapper: void resetHeaders()>:[1,22]
<org.apache.http.impl.client.RequestWrapper: void setProtocolVersion(org.apache.http.ProtocolVersion)>:[1,22]
<org.apache.http.impl.client.RequestWrapper: void setURI(java.net.URI)>:[1,22]
<org.apache.http.impl.client.RoutedRequest: org.apache.http.conn.routing.HttpRoute getRoute()>:[1,22]
<org.apache.http.impl.client.RoutedRequest: org.apache.http.impl.client.RequestWrapper getRequest()>:[1,22]
<org.apache.http.impl.client.RoutedRequest: void <init>(org.apache.http.impl.client.RequestWrapper,org.apache.http.conn.routing.HttpRoute)>:[1,22]
<org.apache.http.impl.client.TunnelRefusedException: org.apache.http.HttpResponse getResponse()>:[1,22]
<org.apache.http.impl.client.TunnelRefusedException: void <init>(java.lang.String,org.apache.http.HttpResponse)>:[1,22]
<org.apache.http.impl.conn.AbstractClientConnAdapter: boolean isOpen()>:[1,22]
<org.apache.http.impl.conn.AbstractClientConnAdapter: org.apache.http.conn.OperatedClientConnection getWrappedConnection()>:[1,22]
<org.apache.http.impl.conn.AbstractClientConnAdapter: void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.conn.OperatedClientConnection)>:[1,22]
<org.apache.http.impl.conn.AbstractClientConnAdapter: void assertNotAborted()>:[1,22]
<org.apache.http.impl.conn.AbstractClientConnAdapter: void assertValid(org.apache.http.conn.OperatedClientConnection)>:[1,22]
<org.apache.http.impl.conn.AbstractClientConnAdapter: void detach()>:[1,22]
<org.apache.http.impl.conn.AbstractClientConnAdapter: void unmarkReusable()>:[1,22]
<org.apache.http.impl.conn.AbstractPoolEntry: java.lang.Object getState()>:[1,22]
<org.apache.http.impl.conn.AbstractPoolEntry: void <init>(org.apache.http.conn.ClientConnectionOperator,org.apache.http.conn.routing.HttpRoute)>:[1,22]
<org.apache.http.impl.conn.AbstractPoolEntry: void layerProtocol(org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.conn.AbstractPoolEntry: void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.conn.AbstractPoolEntry: void setState(java.lang.Object)>:[1,22]
<org.apache.http.impl.conn.AbstractPoolEntry: void shutdownEntry()>:[1,22]
<org.apache.http.impl.conn.AbstractPoolEntry: void tunnelProxy(org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.conn.AbstractPoolEntry: void tunnelTarget(boolean,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.conn.AbstractPooledConnAdapter: void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.impl.conn.AbstractPoolEntry)>:[1,22]
<org.apache.http.impl.conn.DefaultClientConnection: void <init>()>:[1,22]
<org.apache.http.impl.conn.DefaultClientConnectionOperator: void <init>(org.apache.http.conn.scheme.SchemeRegistry)>:[1,22]
<org.apache.http.impl.conn.DefaultClientConnectionOperator: void prepareSocket(java.net.Socket,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.conn.DefaultHttpRoutePlanner: void <init>(org.apache.http.conn.scheme.SchemeRegistry)>:[1,22]
<org.apache.http.impl.conn.DefaultResponseParser: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.conn.IdleConnectionHandler: boolean remove(org.apache.http.HttpConnection)>:[1,22]
<org.apache.http.impl.conn.IdleConnectionHandler: void <init>()>:[1,22]
<org.apache.http.impl.conn.IdleConnectionHandler: void add(org.apache.http.HttpConnection,long,java.util.concurrent.TimeUnit)>:[1,22]
<org.apache.http.impl.conn.IdleConnectionHandler: void closeExpiredConnections()>:[1,22]
<org.apache.http.impl.conn.IdleConnectionHandler: void closeIdleConnections(long)>:[1,22]
<org.apache.http.impl.conn.IdleConnectionHandler: void removeAll()>:[1,22]
<org.apache.http.impl.conn.LoggingSessionInputBuffer: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.impl.conn.Wire)>:[1,22]
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void <init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.impl.conn.Wire)>:[1,22]
<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.lang.String getHost(java.net.InetSocketAddress)>:[1,22]
<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.net.Proxy chooseProxy(java.util.List,org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>:[1,22]
<org.apache.http.impl.conn.ProxySelectorRoutePlanner: org.apache.http.HttpHost determineProxy(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>:[1,22]
<org.apache.http.impl.conn.ProxySelectorRoutePlanner: void <init>(org.apache.http.conn.scheme.SchemeRegistry,java.net.ProxySelector)>:[1,22]
<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)>:[1,22]
<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.ManagedClientConnection getConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)>:[1,22]
<org.apache.http.impl.conn.SingleClientConnManager: void <init>(org.apache.http.params.HttpParams,org.apache.http.conn.scheme.SchemeRegistry)>:[1,22]
<org.apache.http.impl.conn.SingleClientConnManager: void assertStillUp()>:[1,22]
<org.apache.http.impl.conn.SingleClientConnManager: void closeExpiredConnections()>:[1,22]
<org.apache.http.impl.conn.SingleClientConnManager: void closeIdleConnections(long,java.util.concurrent.TimeUnit)>:[1,22]
<org.apache.http.impl.conn.SingleClientConnManager: void shutdown()>:[1,22]
<org.apache.http.impl.conn.Wire: boolean enabled()>:[1,22]
<org.apache.http.impl.conn.Wire: void <init>(org.apache.commons.logging.Log)>:[1,22]
<org.apache.http.impl.conn.Wire: void input(byte[])>:[1,22]
<org.apache.http.impl.conn.Wire: void input(byte[],int,int)>:[1,22]
<org.apache.http.impl.conn.Wire: void input(int)>:[1,22]
<org.apache.http.impl.conn.Wire: void input(java.lang.String)>:[1,22]
<org.apache.http.impl.conn.Wire: void output(byte[])>:[1,22]
<org.apache.http.impl.conn.Wire: void output(byte[],int,int)>:[1,22]
<org.apache.http.impl.conn.Wire: void output(int)>:[1,22]
<org.apache.http.impl.conn.Wire: void output(java.lang.String)>:[1,22]
<org.apache.http.impl.conn.tsccm.AbstractConnPool: org.apache.http.impl.conn.tsccm.PoolEntryRequest requestPoolEntry(org.apache.http.conn.routing.HttpRoute,java.lang.Object)>:[1,22]
<org.apache.http.impl.conn.tsccm.AbstractConnPool: void <init>()>:[1,22]
<org.apache.http.impl.conn.tsccm.AbstractConnPool: void closeConnection(org.apache.http.conn.OperatedClientConnection)>:[1,22]
<org.apache.http.impl.conn.tsccm.AbstractConnPool: void closeExpiredConnections()>:[1,22]
<org.apache.http.impl.conn.tsccm.AbstractConnPool: void closeIdleConnections(long,java.util.concurrent.TimeUnit)>:[1,22]
<org.apache.http.impl.conn.tsccm.AbstractConnPool: void deleteClosedConnections()>:[1,22]
<org.apache.http.impl.conn.tsccm.AbstractConnPool: void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry,boolean,long,java.util.concurrent.TimeUnit)>:[1,22]
<org.apache.http.impl.conn.tsccm.AbstractConnPool: void shutdown()>:[1,22]
<org.apache.http.impl.conn.tsccm.BasicPoolEntry: org.apache.http.conn.OperatedClientConnection getConnection()>:[1,22]
<org.apache.http.impl.conn.tsccm.BasicPoolEntry: org.apache.http.conn.routing.HttpRoute getPlannedRoute()>:[1,22]
<org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter: org.apache.http.impl.conn.AbstractPoolEntry getPoolEntry()>:[1,22]
<org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter: void <init>(org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager,org.apache.http.impl.conn.AbstractPoolEntry)>:[1,22]
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute)>:[1,22]
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: java.util.Map createRouteToPoolMap()>:[1,22]
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: java.util.Queue createFreeConnQueue()>:[1,22]
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: java.util.Queue createWaitingThreadQueue()>:[1,22]
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: org.apache.http.impl.conn.tsccm.BasicPoolEntry createEntry(org.apache.http.impl.conn.tsccm.RouteSpecificPool,org.apache.http.conn.ClientConnectionOperator)>:[1,22]
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: org.apache.http.impl.conn.tsccm.BasicPoolEntry getEntryBlocking(org.apache.http.conn.routing.HttpRoute,java.lang.Object,long,java.util.concurrent.TimeUnit,org.apache.http.impl.conn.tsccm.WaitingThreadAborter)>:[1,22]
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: org.apache.http.impl.conn.tsccm.BasicPoolEntry getFreeEntry(org.apache.http.impl.conn.tsccm.RouteSpecificPool,java.lang.Object)>:[1,22]
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: org.apache.http.impl.conn.tsccm.PoolEntryRequest requestPoolEntry(org.apache.http.conn.routing.HttpRoute,java.lang.Object)>:[1,22]
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: org.apache.http.impl.conn.tsccm.RouteSpecificPool getRoutePool(org.apache.http.conn.routing.HttpRoute,boolean)>:[1,22]
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: org.apache.http.impl.conn.tsccm.RouteSpecificPool newRouteSpecificPool(org.apache.http.conn.routing.HttpRoute)>:[1,22]
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: org.apache.http.impl.conn.tsccm.WaitingThread newWaitingThread(java.util.concurrent.locks.Condition,org.apache.http.impl.conn.tsccm.RouteSpecificPool)>:[1,22]
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: void <init>(org.apache.http.conn.ClientConnectionOperator,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: void deleteEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry)>:[1,22]
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: void deleteLeastUsedEntry()>:[1,22]
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry,boolean,long,java.util.concurrent.TimeUnit)>:[1,22]
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: void notifyWaitingThread(org.apache.http.impl.conn.tsccm.RouteSpecificPool)>:[1,22]
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: boolean deleteEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry)>:[1,22]
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: boolean hasThread()>:[1,22]
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: boolean isUnused()>:[1,22]
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: int getCapacity()>:[1,22]
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: int getEntryCount()>:[1,22]
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: int getMaxEntries()>:[1,22]
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: org.apache.http.conn.routing.HttpRoute getRoute()>:[1,22]
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: org.apache.http.impl.conn.tsccm.BasicPoolEntry allocEntry(java.lang.Object)>:[1,22]
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: org.apache.http.impl.conn.tsccm.WaitingThread nextThread()>:[1,22]
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: void <init>(org.apache.http.conn.routing.HttpRoute,int)>:[1,22]
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: void createdEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry)>:[1,22]
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: void dropEntry()>:[1,22]
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry)>:[1,22]
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: void queueThread(org.apache.http.impl.conn.tsccm.WaitingThread)>:[1,22]
<org.apache.http.impl.conn.tsccm.RouteSpecificPool: void removeThread(org.apache.http.impl.conn.tsccm.WaitingThread)>:[1,22]
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: int getConnectionsInPool()>:[1,22]
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)>:[1,22]
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)>:[1,22]
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry()>:[1,22]
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.impl.conn.tsccm.AbstractConnPool createConnectionPool(org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void <init>(org.apache.http.params.HttpParams,org.apache.http.conn.scheme.SchemeRegistry)>:[1,22]
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void shutdown()>:[1,22]
<org.apache.http.impl.conn.tsccm.WaitingThread: boolean await(java.util.Date)>:[1,22]
<org.apache.http.impl.conn.tsccm.WaitingThread: void <init>(java.util.concurrent.locks.Condition,org.apache.http.impl.conn.tsccm.RouteSpecificPool)>:[1,22]
<org.apache.http.impl.conn.tsccm.WaitingThread: void interrupt()>:[1,22]
<org.apache.http.impl.conn.tsccm.WaitingThread: void wakeup()>:[1,22]
<org.apache.http.impl.conn.tsccm.WaitingThreadAborter: void <init>()>:[1,22]
<org.apache.http.impl.conn.tsccm.WaitingThreadAborter: void abort()>:[1,22]
<org.apache.http.impl.conn.tsccm.WaitingThreadAborter: void setWaitingThread(org.apache.http.impl.conn.tsccm.WaitingThread)>:[1,22]
<org.apache.http.impl.cookie.AbstractCookieAttributeHandler: void <init>()>:[1,22]
<org.apache.http.impl.cookie.AbstractCookieSpec: org.apache.http.cookie.CookieAttributeHandler findAttribHandler(java.lang.String)>:[1,22]
<org.apache.http.impl.cookie.AbstractCookieSpec: void <init>()>:[1,22]
<org.apache.http.impl.cookie.BasicClientCookie2: void <init>(java.lang.String,java.lang.String)>:[1,22]
<org.apache.http.impl.cookie.BasicClientCookie2: void setCommentURL(java.lang.String)>:[1,22]
<org.apache.http.impl.cookie.BasicClientCookie2: void setDiscard(boolean)>:[1,22]
<org.apache.http.impl.cookie.BasicClientCookie2: void setPorts(int[])>:[1,22]
<org.apache.http.impl.cookie.BasicClientCookie: boolean isExpired(java.util.Date)>:[1,22]
<org.apache.http.impl.cookie.BasicClientCookie: boolean isPersistent()>:[1,22]
<org.apache.http.impl.cookie.BasicClientCookie: java.lang.Object clone()>:[1,22]
<org.apache.http.impl.cookie.BasicClientCookie: void <init>(java.lang.String,java.lang.String)>:[1,22]
<org.apache.http.impl.cookie.BasicClientCookie: void setAttribute(java.lang.String,java.lang.String)>:[1,22]
<org.apache.http.impl.cookie.BasicClientCookie: void setComment(java.lang.String)>:[1,22]
<org.apache.http.impl.cookie.BasicClientCookie: void setDomain(java.lang.String)>:[1,22]
<org.apache.http.impl.cookie.BasicClientCookie: void setExpiryDate(java.util.Date)>:[1,22]
<org.apache.http.impl.cookie.BasicClientCookie: void setPath(java.lang.String)>:[1,22]
<org.apache.http.impl.cookie.BasicClientCookie: void setSecure(boolean)>:[1,22]
<org.apache.http.impl.cookie.BasicClientCookie: void setVersion(int)>:[1,22]
<org.apache.http.impl.cookie.BasicCommentHandler: void <init>()>:[1,22]
<org.apache.http.impl.cookie.BasicDomainHandler: void <init>()>:[1,22]
<org.apache.http.impl.cookie.BasicDomainHandler: void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin)>:[1,22]
<org.apache.http.impl.cookie.BasicExpiresHandler: void <init>(java.lang.String[])>:[1,22]
<org.apache.http.impl.cookie.BasicMaxAgeHandler: void <init>()>:[1,22]
<org.apache.http.impl.cookie.BasicPathHandler: boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin)>:[1,22]
<org.apache.http.impl.cookie.BasicPathHandler: void <init>()>:[1,22]
<org.apache.http.impl.cookie.BasicSecureHandler: void <init>()>:[1,22]
<org.apache.http.impl.cookie.BestMatchSpec: void <init>()>:[1,22]
<org.apache.http.impl.cookie.BestMatchSpec: void <init>(java.lang.String[],boolean)>:[1,22]
<org.apache.http.impl.cookie.BestMatchSpecFactory: void <init>()>:[1,22]
<org.apache.http.impl.cookie.BrowserCompatSpec: java.util.List formatCookies(java.util.List)>:[1,22]
<org.apache.http.impl.cookie.BrowserCompatSpec: void <init>()>:[1,22]
<org.apache.http.impl.cookie.BrowserCompatSpec: void <init>(java.lang.String[])>:[1,22]
<org.apache.http.impl.cookie.BrowserCompatSpecFactory: void <init>()>:[1,22]
<org.apache.http.impl.cookie.CookieSpecBase: java.lang.String getDefaultDomain(org.apache.http.cookie.CookieOrigin)>:[1,22]
<org.apache.http.impl.cookie.CookieSpecBase: java.lang.String getDefaultPath(org.apache.http.cookie.CookieOrigin)>:[1,22]
<org.apache.http.impl.cookie.CookieSpecBase: void <init>()>:[1,22]
<org.apache.http.impl.cookie.CookieSpecBase: void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin)>:[1,22]
<org.apache.http.impl.cookie.DateUtils: java.lang.String formatDate(java.util.Date)>:[1,22]
<org.apache.http.impl.cookie.DateUtils: java.lang.String formatDate(java.util.Date,java.lang.String)>:[1,22]
<org.apache.http.impl.cookie.DateUtils: java.util.Date parseDate(java.lang.String)>:[1,22]
<org.apache.http.impl.cookie.DateUtils: java.util.Date parseDate(java.lang.String,java.lang.String[])>:[1,22]
<org.apache.http.impl.cookie.DateUtils: java.util.Date parseDate(java.lang.String,java.lang.String[],java.util.Date)>:[1,22]
<org.apache.http.impl.cookie.NetscapeDomainHandler: void <init>()>:[1,22]
<org.apache.http.impl.cookie.NetscapeDraftHeaderParser: org.apache.http.HeaderElement parseHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>:[1,22]
<org.apache.http.impl.cookie.NetscapeDraftHeaderParser: void <init>()>:[1,22]
<org.apache.http.impl.cookie.NetscapeDraftSpec: java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin)>:[1,22]
<org.apache.http.impl.cookie.NetscapeDraftSpec: void <init>()>:[1,22]
<org.apache.http.impl.cookie.NetscapeDraftSpec: void <init>(java.lang.String[])>:[1,22]
<org.apache.http.impl.cookie.NetscapeDraftSpecFactory: void <init>()>:[1,22]
<org.apache.http.impl.cookie.RFC2109DomainHandler: void <init>()>:[1,22]
<org.apache.http.impl.cookie.RFC2109Spec: java.util.List formatCookies(java.util.List)>:[1,22]
<org.apache.http.impl.cookie.RFC2109Spec: void <init>()>:[1,22]
<org.apache.http.impl.cookie.RFC2109Spec: void <init>(java.lang.String[],boolean)>:[1,22]
<org.apache.http.impl.cookie.RFC2109Spec: void formatCookieAsVer(org.apache.http.util.CharArrayBuffer,org.apache.http.cookie.Cookie,int)>:[1,22]
<org.apache.http.impl.cookie.RFC2109Spec: void formatParamAsVer(org.apache.http.util.CharArrayBuffer,java.lang.String,java.lang.String,int)>:[1,22]
<org.apache.http.impl.cookie.RFC2109SpecFactory: void <init>()>:[1,22]
<org.apache.http.impl.cookie.RFC2109VersionHandler: void <init>()>:[1,22]
<org.apache.http.impl.cookie.RFC2965CommentUrlAttributeHandler: void <init>()>:[1,22]
<org.apache.http.impl.cookie.RFC2965DiscardAttributeHandler: void <init>()>:[1,22]
<org.apache.http.impl.cookie.RFC2965DomainAttributeHandler: boolean domainMatch(java.lang.String,java.lang.String)>:[1,22]
<org.apache.http.impl.cookie.RFC2965DomainAttributeHandler: void <init>()>:[1,22]
<org.apache.http.impl.cookie.RFC2965PortAttributeHandler: void <init>()>:[1,22]
<org.apache.http.impl.cookie.RFC2965Spec: void <init>()>:[1,22]
<org.apache.http.impl.cookie.RFC2965Spec: void <init>(java.lang.String[],boolean)>:[1,22]
<org.apache.http.impl.cookie.RFC2965SpecFactory: void <init>()>:[1,22]
<org.apache.http.impl.cookie.RFC2965VersionAttributeHandler: void <init>()>:[1,22]
<org.apache.http.impl.entity.EntityDeserializer: org.apache.http.HttpEntity deserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage)>:[1,22]
<org.apache.http.impl.entity.EntityDeserializer: org.apache.http.entity.BasicHttpEntity doDeserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage)>:[1,22]
<org.apache.http.impl.entity.EntityDeserializer: void <init>(org.apache.http.entity.ContentLengthStrategy)>:[1,22]
<org.apache.http.impl.entity.EntitySerializer: java.io.OutputStream doSerialize(org.apache.http.io.SessionOutputBuffer,org.apache.http.HttpMessage)>:[1,22]
<org.apache.http.impl.entity.EntitySerializer: void <init>(org.apache.http.entity.ContentLengthStrategy)>:[1,22]
<org.apache.http.impl.entity.EntitySerializer: void serialize(org.apache.http.io.SessionOutputBuffer,org.apache.http.HttpMessage,org.apache.http.HttpEntity)>:[1,22]
<org.apache.http.impl.entity.LaxContentLengthStrategy: void <init>()>:[1,22]
<org.apache.http.impl.entity.StrictContentLengthStrategy: void <init>()>:[1,22]
<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser)>:[1,22]
<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer)>:[1,22]
<org.apache.http.impl.io.AbstractMessageParser: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.io.AbstractMessageWriter: void <init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.message.LineFormatter,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.io.AbstractMessageWriter: void writeHeadLine(org.apache.http.HttpMessage)>:[1,22]
<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean hasBufferedData()>:[1,22]
<org.apache.http.impl.io.AbstractSessionInputBuffer: int fillBuffer()>:[1,22]
<org.apache.http.impl.io.AbstractSessionInputBuffer: int read(byte[],int,int)>:[1,22]
<org.apache.http.impl.io.AbstractSessionInputBuffer: int readLine(org.apache.http.util.CharArrayBuffer)>:[1,22]
<org.apache.http.impl.io.AbstractSessionInputBuffer: void <init>()>:[1,22]
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void <init>()>:[1,22]
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void flushBuffer()>:[1,22]
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(byte[])>:[1,22]
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(byte[],int,int)>:[1,22]
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(int)>:[1,22]
<org.apache.http.impl.io.ChunkedInputStream: void <init>(org.apache.http.io.SessionInputBuffer)>:[1,22]
<org.apache.http.impl.io.ChunkedOutputStream: void <init>(org.apache.http.io.SessionOutputBuffer)>:[1,22]
<org.apache.http.impl.io.ChunkedOutputStream: void <init>(org.apache.http.io.SessionOutputBuffer,int)>:[1,22]
<org.apache.http.impl.io.ChunkedOutputStream: void finish()>:[1,22]
<org.apache.http.impl.io.ChunkedOutputStream: void flushCache()>:[1,22]
<org.apache.http.impl.io.ChunkedOutputStream: void flushCacheWithAppend(byte[],int,int)>:[1,22]
<org.apache.http.impl.io.ChunkedOutputStream: void writeClosingChunk()>:[1,22]
<org.apache.http.impl.io.ContentLengthInputStream: void <init>(org.apache.http.io.SessionInputBuffer,long)>:[1,22]
<org.apache.http.impl.io.ContentLengthOutputStream: void <init>(org.apache.http.io.SessionOutputBuffer,long)>:[1,22]
<org.apache.http.impl.io.HttpRequestParser: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpRequestFactory,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.io.HttpRequestWriter: void <init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.message.LineFormatter,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.io.HttpResponseParser: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.io.HttpResponseWriter: void <init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.message.LineFormatter,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.io.HttpTransportMetricsImpl: void <init>()>:[1,22]
<org.apache.http.impl.io.HttpTransportMetricsImpl: void incrementBytesTransferred(long)>:[1,22]
<org.apache.http.impl.io.IdentityInputStream: void <init>(org.apache.http.io.SessionInputBuffer)>:[1,22]
<org.apache.http.impl.io.IdentityOutputStream: void <init>(org.apache.http.io.SessionOutputBuffer)>:[1,22]
<org.apache.http.impl.io.SocketInputBuffer: void <init>(java.net.Socket,int,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.impl.io.SocketOutputBuffer: void <init>(java.net.Socket,int,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.message.AbstractHttpMessage: void <init>()>:[1,22]
<org.apache.http.message.AbstractHttpMessage: void <init>(org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.message.AbstractHttpMessage: void setHeader(java.lang.String,java.lang.String)>:[1,22]
<org.apache.http.message.BasicHeader: void <init>(java.lang.String,java.lang.String)>:[1,22]
<org.apache.http.message.BasicHeaderElement: void <init>(java.lang.String,java.lang.String)>:[1,22]
<org.apache.http.message.BasicHeaderElement: void <init>(java.lang.String,java.lang.String,org.apache.http.NameValuePair[])>:[1,22]
<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.HeaderElement nextElement()>:[1,22]
<org.apache.http.message.BasicHeaderElementIterator: void <init>(org.apache.http.HeaderIterator)>:[1,22]
<org.apache.http.message.BasicHeaderElementIterator: void <init>(org.apache.http.HeaderIterator,org.apache.http.message.HeaderValueParser)>:[1,22]
<org.apache.http.message.BasicHeaderIterator: boolean filterHeader(int)>:[1,22]
<org.apache.http.message.BasicHeaderIterator: int findNext(int)>:[1,22]
<org.apache.http.message.BasicHeaderIterator: org.apache.http.Header nextHeader()>:[1,22]
<org.apache.http.message.BasicHeaderIterator: void <init>(org.apache.http.Header[],java.lang.String)>:[1,22]
<org.apache.http.message.BasicHeaderValueFormatter: boolean isSeparator(char)>:[1,22]
<org.apache.http.message.BasicHeaderValueFormatter: boolean isUnsafe(char)>:[1,22]
<org.apache.http.message.BasicHeaderValueFormatter: int estimateElementsLen(org.apache.http.HeaderElement[])>:[1,22]
<org.apache.http.message.BasicHeaderValueFormatter: int estimateHeaderElementLen(org.apache.http.HeaderElement)>:[1,22]
<org.apache.http.message.BasicHeaderValueFormatter: int estimateNameValuePairLen(org.apache.http.NameValuePair)>:[1,22]
<org.apache.http.message.BasicHeaderValueFormatter: int estimateParametersLen(org.apache.http.NameValuePair[])>:[1,22]
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement,boolean)>:[1,22]
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair,boolean)>:[1,22]
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair[],boolean)>:[1,22]
<org.apache.http.message.BasicHeaderValueFormatter: void <init>()>:[1,22]
<org.apache.http.message.BasicHeaderValueFormatter: void doFormatValue(org.apache.http.util.CharArrayBuffer,java.lang.String,boolean)>:[1,22]
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement createHeaderElement(java.lang.String,java.lang.String,org.apache.http.NameValuePair[])>:[1,22]
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>:[1,22]
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement[] parseElements(java.lang.String,org.apache.http.message.HeaderValueParser)>:[1,22]
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>:[1,22]
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair createNameValuePair(java.lang.String,java.lang.String)>:[1,22]
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>:[1,22]
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,char[])>:[1,22]
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>:[1,22]
<org.apache.http.message.BasicHeaderValueParser: void <init>()>:[1,22]
<org.apache.http.message.BasicHttpEntityEnclosingRequest: void <init>(java.lang.String,java.lang.String)>:[1,22]
<org.apache.http.message.BasicHttpEntityEnclosingRequest: void <init>(org.apache.http.RequestLine)>:[1,22]
<org.apache.http.message.BasicHttpRequest: org.apache.http.RequestLine getRequestLine()>:[1,22]
<org.apache.http.message.BasicHttpRequest: void <init>(java.lang.String,java.lang.String)>:[1,22]
<org.apache.http.message.BasicHttpRequest: void <init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)>:[1,22]
<org.apache.http.message.BasicHttpRequest: void <init>(org.apache.http.RequestLine)>:[1,22]
<org.apache.http.message.BasicHttpResponse: java.lang.String getReason(int)>:[1,22]
<org.apache.http.message.BasicHttpResponse: org.apache.http.StatusLine getStatusLine()>:[1,22]
<org.apache.http.message.BasicHttpResponse: void <init>(org.apache.http.ProtocolVersion,int,java.lang.String)>:[1,22]
<org.apache.http.message.BasicHttpResponse: void <init>(org.apache.http.StatusLine)>:[1,22]
<org.apache.http.message.BasicHttpResponse: void <init>(org.apache.http.StatusLine,org.apache.http.ReasonPhraseCatalog,java.util.Locale)>:[1,22]
<org.apache.http.message.BasicHttpResponse: void setEntity(org.apache.http.HttpEntity)>:[1,22]
<org.apache.http.message.BasicLineFormatter: int estimateProtocolVersionLen(org.apache.http.ProtocolVersion)>:[1,22]
<org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer appendProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.ProtocolVersion)>:[1,22]
<org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer formatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header)>:[1,22]
<org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer formatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine)>:[1,22]
<org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer formatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine)>:[1,22]
<org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer initBuffer(org.apache.http.util.CharArrayBuffer)>:[1,22]
<org.apache.http.message.BasicLineFormatter: void <init>()>:[1,22]
<org.apache.http.message.BasicLineFormatter: void doFormatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header)>:[1,22]
<org.apache.http.message.BasicLineFormatter: void doFormatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine)>:[1,22]
<org.apache.http.message.BasicLineFormatter: void doFormatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine)>:[1,22]
<org.apache.http.message.BasicLineParser: boolean hasProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>:[1,22]
<org.apache.http.message.BasicLineParser: org.apache.http.Header parseHeader(java.lang.String,org.apache.http.message.LineParser)>:[1,22]
<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion createProtocolVersion(int,int)>:[1,22]
<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>:[1,22]
<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine createRequestLine(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)>:[1,22]
<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine createStatusLine(org.apache.http.ProtocolVersion,int,java.lang.String)>:[1,22]
<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine parseStatusLine(java.lang.String,org.apache.http.message.LineParser)>:[1,22]
<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>:[1,22]
<org.apache.http.message.BasicLineParser: void <init>()>:[1,22]
<org.apache.http.message.BasicLineParser: void <init>(org.apache.http.ProtocolVersion)>:[1,22]
<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>:[1,22]
<org.apache.http.message.BasicListHeaderIterator: boolean filterHeader(int)>:[1,22]
<org.apache.http.message.BasicListHeaderIterator: int findNext(int)>:[1,22]
<org.apache.http.message.BasicListHeaderIterator: org.apache.http.Header nextHeader()>:[1,22]
<org.apache.http.message.BasicListHeaderIterator: void <init>(java.util.List,java.lang.String)>:[1,22]
<org.apache.http.message.BasicNameValuePair: java.lang.String getName()>:[1,22]
<org.apache.http.message.BasicNameValuePair: java.lang.String getValue()>:[1,22]
<org.apache.http.message.BasicNameValuePair: void <init>(java.lang.String,java.lang.String)>:[1,22]
<org.apache.http.message.BasicRequestLine: void <init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)>:[1,22]
<org.apache.http.message.BasicStatusLine: void <init>(org.apache.http.ProtocolVersion,int,java.lang.String)>:[1,22]
<org.apache.http.message.BasicTokenIterator: boolean isHttpSeparator(char)>:[1,22]
<org.apache.http.message.BasicTokenIterator: boolean isTokenChar(char)>:[1,22]
<org.apache.http.message.BasicTokenIterator: boolean isTokenSeparator(char)>:[1,22]
<org.apache.http.message.BasicTokenIterator: boolean isWhitespace(char)>:[1,22]
<org.apache.http.message.BasicTokenIterator: int findNext(int)>:[1,22]
<org.apache.http.message.BasicTokenIterator: int findTokenEnd(int)>:[1,22]
<org.apache.http.message.BasicTokenIterator: int findTokenSeparator(int)>:[1,22]
<org.apache.http.message.BasicTokenIterator: int findTokenStart(int)>:[1,22]
<org.apache.http.message.BasicTokenIterator: java.lang.String createToken(java.lang.String,int,int)>:[1,22]
<org.apache.http.message.BasicTokenIterator: java.lang.String nextToken()>:[1,22]
<org.apache.http.message.BasicTokenIterator: void <init>(org.apache.http.HeaderIterator)>:[1,22]
<org.apache.http.message.BufferedHeader: void <init>(org.apache.http.util.CharArrayBuffer)>:[1,22]
<org.apache.http.message.HeaderGroup: boolean containsHeader(java.lang.String)>:[1,22]
<org.apache.http.message.HeaderGroup: org.apache.http.Header getFirstHeader(java.lang.String)>:[1,22]
<org.apache.http.message.HeaderGroup: org.apache.http.Header getLastHeader(java.lang.String)>:[1,22]
<org.apache.http.message.HeaderGroup: org.apache.http.HeaderIterator iterator()>:[1,22]
<org.apache.http.message.HeaderGroup: org.apache.http.HeaderIterator iterator(java.lang.String)>:[1,22]
<org.apache.http.message.HeaderGroup: org.apache.http.Header[] getAllHeaders()>:[1,22]
<org.apache.http.message.HeaderGroup: org.apache.http.Header[] getHeaders(java.lang.String)>:[1,22]
<org.apache.http.message.HeaderGroup: void <init>()>:[1,22]
<org.apache.http.message.HeaderGroup: void addHeader(org.apache.http.Header)>:[1,22]
<org.apache.http.message.HeaderGroup: void clear()>:[1,22]
<org.apache.http.message.HeaderGroup: void removeHeader(org.apache.http.Header)>:[1,22]
<org.apache.http.message.HeaderGroup: void setHeaders(org.apache.http.Header[])>:[1,22]
<org.apache.http.message.HeaderGroup: void updateHeader(org.apache.http.Header)>:[1,22]
<org.apache.http.message.ParserCursor: boolean atEnd()>:[1,22]
<org.apache.http.message.ParserCursor: int getPos()>:[1,22]
<org.apache.http.message.ParserCursor: int getUpperBound()>:[1,22]
<org.apache.http.message.ParserCursor: void <init>(int,int)>:[1,22]
<org.apache.http.message.ParserCursor: void updatePos(int)>:[1,22]
<org.apache.http.params.AbstractHttpParams: boolean getBooleanParameter(java.lang.String,boolean)>:[1,22]
<org.apache.http.params.AbstractHttpParams: void <init>()>:[1,22]
<org.apache.http.params.BasicHttpParams: boolean isParameterSet(java.lang.String)>:[1,22]
<org.apache.http.params.BasicHttpParams: boolean isParameterSetLocally(java.lang.String)>:[1,22]
<org.apache.http.params.BasicHttpParams: boolean removeParameter(java.lang.String)>:[1,22]
<org.apache.http.params.BasicHttpParams: java.lang.Object clone()>:[1,22]
<org.apache.http.params.BasicHttpParams: java.lang.Object getParameter(java.lang.String)>:[1,22]
<org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>:[1,22]
<org.apache.http.params.BasicHttpParams: void <init>()>:[1,22]
<org.apache.http.params.BasicHttpParams: void clear()>:[1,22]
<org.apache.http.params.BasicHttpParams: void copyParams(org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.params.BasicHttpParams: void setParameters(java.lang.String[],java.lang.Object)>:[1,22]
<org.apache.http.params.DefaultedHttpParams: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.params.HttpAbstractParamBean: void <init>(org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.params.HttpProtocolParams: boolean useExpectContinue(org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.params.HttpProtocolParams: java.lang.String getHttpElementCharset(org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.params.HttpProtocolParams: java.lang.String getUserAgent(org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.params.HttpProtocolParams: org.apache.http.ProtocolVersion getVersion(org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.params.HttpProtocolParams: void setContentCharset(org.apache.http.params.HttpParams,java.lang.String)>:[1,22]
<org.apache.http.params.HttpProtocolParams: void setHttpElementCharset(org.apache.http.params.HttpParams,java.lang.String)>:[1,22]
<org.apache.http.params.HttpProtocolParams: void setUseExpectContinue(org.apache.http.params.HttpParams,boolean)>:[1,22]
<org.apache.http.params.HttpProtocolParams: void setUserAgent(org.apache.http.params.HttpParams,java.lang.String)>:[1,22]
<org.apache.http.params.HttpProtocolParams: void setVersion(org.apache.http.params.HttpParams,org.apache.http.ProtocolVersion)>:[1,22]
<org.apache.http.protocol.BasicHttpContext: java.lang.Object getAttribute(java.lang.String)>:[1,22]
<org.apache.http.protocol.BasicHttpContext: java.lang.Object removeAttribute(java.lang.String)>:[1,22]
<org.apache.http.protocol.BasicHttpContext: void <init>()>:[1,22]
<org.apache.http.protocol.BasicHttpContext: void <init>(org.apache.http.protocol.HttpContext)>:[1,22]
<org.apache.http.protocol.BasicHttpContext: void setAttribute(java.lang.String,java.lang.Object)>:[1,22]
<org.apache.http.protocol.BasicHttpProcessor: int getRequestInterceptorCount()>:[1,22]
<org.apache.http.protocol.BasicHttpProcessor: int getResponseInterceptorCount()>:[1,22]
<org.apache.http.protocol.BasicHttpProcessor: org.apache.http.HttpRequestInterceptor getRequestInterceptor(int)>:[1,22]
<org.apache.http.protocol.BasicHttpProcessor: org.apache.http.HttpResponseInterceptor getResponseInterceptor(int)>:[1,22]
<org.apache.http.protocol.BasicHttpProcessor: org.apache.http.protocol.BasicHttpProcessor copy()>:[1,22]
<org.apache.http.protocol.BasicHttpProcessor: void <init>()>:[1,22]
<org.apache.http.protocol.BasicHttpProcessor: void addInterceptor(org.apache.http.HttpRequestInterceptor)>:[1,22]
<org.apache.http.protocol.BasicHttpProcessor: void addInterceptor(org.apache.http.HttpRequestInterceptor,int)>:[1,22]
<org.apache.http.protocol.BasicHttpProcessor: void addInterceptor(org.apache.http.HttpResponseInterceptor)>:[1,22]
<org.apache.http.protocol.BasicHttpProcessor: void addInterceptor(org.apache.http.HttpResponseInterceptor,int)>:[1,22]
<org.apache.http.protocol.BasicHttpProcessor: void addRequestInterceptor(org.apache.http.HttpRequestInterceptor)>:[1,22]
<org.apache.http.protocol.BasicHttpProcessor: void addRequestInterceptor(org.apache.http.HttpRequestInterceptor,int)>:[1,22]
<org.apache.http.protocol.BasicHttpProcessor: void addResponseInterceptor(org.apache.http.HttpResponseInterceptor)>:[1,22]
<org.apache.http.protocol.BasicHttpProcessor: void addResponseInterceptor(org.apache.http.HttpResponseInterceptor,int)>:[1,22]
<org.apache.http.protocol.BasicHttpProcessor: void clearRequestInterceptors()>:[1,22]
<org.apache.http.protocol.BasicHttpProcessor: void clearResponseInterceptors()>:[1,22]
<org.apache.http.protocol.BasicHttpProcessor: void copyInterceptors(org.apache.http.protocol.BasicHttpProcessor)>:[1,22]
<org.apache.http.protocol.BasicHttpProcessor: void removeRequestInterceptorByClass(java.lang.Class)>:[1,22]
<org.apache.http.protocol.BasicHttpProcessor: void removeResponseInterceptorByClass(java.lang.Class)>:[1,22]
<org.apache.http.protocol.DefaultedHttpContext: void <init>(org.apache.http.protocol.HttpContext,org.apache.http.protocol.HttpContext)>:[1,22]
<org.apache.http.protocol.HTTP: boolean isWhitespace(char)>:[1,22]
<org.apache.http.protocol.HttpDateGenerator: java.lang.String getCurrentDate()>:[1,22]
<org.apache.http.protocol.HttpDateGenerator: void <init>()>:[1,22]
<org.apache.http.protocol.HttpRequestExecutor: boolean canResponseHaveBody(org.apache.http.HttpRequest,org.apache.http.HttpResponse)>:[1,22]
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doReceiveResponse(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>:[1,22]
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>:[1,22]
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>:[1,22]
<org.apache.http.protocol.HttpRequestExecutor: void <init>()>:[1,22]
<org.apache.http.protocol.HttpRequestExecutor: void postProcess(org.apache.http.HttpResponse,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)>:[1,22]
<org.apache.http.protocol.HttpRequestExecutor: void preProcess(org.apache.http.HttpRequest,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)>:[1,22]
<org.apache.http.protocol.HttpRequestHandlerRegistry: void <init>()>:[1,22]
<org.apache.http.protocol.HttpRequestHandlerRegistry: void register(java.lang.String,org.apache.http.protocol.HttpRequestHandler)>:[1,22]
<org.apache.http.protocol.HttpService: void <init>(org.apache.http.protocol.HttpProcessor,org.apache.http.ConnectionReuseStrategy,org.apache.http.HttpResponseFactory)>:[1,22]
<org.apache.http.protocol.HttpService: void doService(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>:[1,22]
<org.apache.http.protocol.HttpService: void handleException(org.apache.http.HttpException,org.apache.http.HttpResponse)>:[1,22]
<org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)>:[1,22]
<org.apache.http.protocol.HttpService: void setConnReuseStrategy(org.apache.http.ConnectionReuseStrategy)>:[1,22]
<org.apache.http.protocol.HttpService: void setHandlerResolver(org.apache.http.protocol.HttpRequestHandlerResolver)>:[1,22]
<org.apache.http.protocol.HttpService: void setHttpProcessor(org.apache.http.protocol.HttpProcessor)>:[1,22]
<org.apache.http.protocol.HttpService: void setParams(org.apache.http.params.HttpParams)>:[1,22]
<org.apache.http.protocol.HttpService: void setResponseFactory(org.apache.http.HttpResponseFactory)>:[1,22]
<org.apache.http.protocol.RequestContent: void <init>()>:[1,22]
<org.apache.http.protocol.RequestExpectContinue: void <init>()>:[1,22]
<org.apache.http.protocol.RequestTargetHost: void <init>()>:[1,22]
<org.apache.http.protocol.RequestUserAgent: void <init>()>:[1,22]
<org.apache.http.protocol.ResponseConnControl: void <init>()>:[1,22]
<org.apache.http.protocol.ResponseContent: void <init>()>:[1,22]
<org.apache.http.protocol.ResponseDate: void <init>()>:[1,22]
<org.apache.http.protocol.ResponseServer: void <init>()>:[1,22]
<org.apache.http.protocol.SyncBasicHttpContext: void <init>(org.apache.http.protocol.HttpContext)>:[1,22]
<org.apache.http.protocol.UriPatternMatcher: boolean matchUriRequestPattern(java.lang.String,java.lang.String)>:[1,22]
<org.apache.http.protocol.UriPatternMatcher: java.lang.Object lookup(java.lang.String)>:[1,22]
<org.apache.http.protocol.UriPatternMatcher: void <init>()>:[1,22]
<org.apache.http.protocol.UriPatternMatcher: void register(java.lang.String,java.lang.Object)>:[1,22]
<org.apache.http.protocol.UriPatternMatcher: void setHandlers(java.util.Map)>:[1,22]
<org.apache.http.protocol.UriPatternMatcher: void unregister(java.lang.String)>:[1,22]
<org.apache.http.util.ByteArrayBuffer: boolean isEmpty()>:[1,22]
<org.apache.http.util.ByteArrayBuffer: boolean isFull()>:[1,22]
<org.apache.http.util.ByteArrayBuffer: byte[] buffer()>:[1,22]
<org.apache.http.util.ByteArrayBuffer: byte[] toByteArray()>:[1,22]
<org.apache.http.util.ByteArrayBuffer: int byteAt(int)>:[1,22]
<org.apache.http.util.ByteArrayBuffer: int capacity()>:[1,22]
<org.apache.http.util.ByteArrayBuffer: int length()>:[1,22]
<org.apache.http.util.ByteArrayBuffer: void <init>(int)>:[1,22]
<org.apache.http.util.ByteArrayBuffer: void append(byte[],int,int)>:[1,22]
<org.apache.http.util.ByteArrayBuffer: void append(char[],int,int)>:[1,22]
<org.apache.http.util.ByteArrayBuffer: void append(int)>:[1,22]
<org.apache.http.util.ByteArrayBuffer: void append(org.apache.http.util.CharArrayBuffer,int,int)>:[1,22]
<org.apache.http.util.ByteArrayBuffer: void clear()>:[1,22]
<org.apache.http.util.ByteArrayBuffer: void setLength(int)>:[1,22]
<org.apache.http.util.CharArrayBuffer: boolean isEmpty()>:[1,22]
<org.apache.http.util.CharArrayBuffer: char charAt(int)>:[1,22]
<org.apache.http.util.CharArrayBuffer: char[] buffer()>:[1,22]
<org.apache.http.util.CharArrayBuffer: int indexOf(int)>:[1,22]
<org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>:[1,22]
<org.apache.http.util.CharArrayBuffer: int length()>:[1,22]
<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>:[1,22]
<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>:[1,22]
<org.apache.http.util.CharArrayBuffer: void <init>(int)>:[1,22]
<org.apache.http.util.CharArrayBuffer: void append(byte[],int,int)>:[1,22]
<org.apache.http.util.CharArrayBuffer: void append(char)>:[1,22]
<org.apache.http.util.CharArrayBuffer: void append(char[],int,int)>:[1,22]
<org.apache.http.util.CharArrayBuffer: void append(java.lang.Object)>:[1,22]
<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>:[1,22]
<org.apache.http.util.CharArrayBuffer: void append(org.apache.http.util.ByteArrayBuffer,int,int)>:[1,22]
<org.apache.http.util.CharArrayBuffer: void append(org.apache.http.util.CharArrayBuffer,int,int)>:[1,22]
<org.apache.http.util.CharArrayBuffer: void clear()>:[1,22]
<org.apache.http.util.CharArrayBuffer: void ensureCapacity(int)>:[1,22]
<org.apache.http.util.EncodingUtils: byte[] getAsciiBytes(java.lang.String)>:[1,22]
<org.apache.http.util.EncodingUtils: byte[] getBytes(java.lang.String,java.lang.String)>:[1,22]
<org.apache.http.util.EncodingUtils: java.lang.String getAsciiString(byte[])>:[1,22]
<org.apache.http.util.EncodingUtils: java.lang.String getAsciiString(byte[],int,int)>:[1,22]
<org.apache.http.util.EncodingUtils: java.lang.String getString(byte[],int,int,java.lang.String)>:[1,22]
<org.apache.http.util.EntityUtils: byte[] toByteArray(org.apache.http.HttpEntity)>:[1,22]
<org.apache.http.util.EntityUtils: java.lang.String getContentCharSet(org.apache.http.HttpEntity)>:[1,22]
<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>:[1,22]
<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity,java.lang.String)>:[1,22]
<org.apache.http.util.ExceptionUtils: void initCause(java.lang.Throwable,java.lang.Throwable)>:[1,22]
<org.apache.http.util.LangUtils: boolean equals(java.lang.Object,java.lang.Object)>:[1,22]
<org.apache.http.util.LangUtils: boolean equals(java.lang.Object[],java.lang.Object[])>:[1,22]
<org.apache.http.util.LangUtils: int hashCode(int,boolean)>:[1,22]
<org.apache.http.util.LangUtils: int hashCode(int,int)>:[1,22]
<org.apache.http.util.LangUtils: int hashCode(int,java.lang.Object)>:[1,22]
<org.apache.http.util.VersionInfo: java.lang.String getRelease()>:[1,22]
<org.apache.http.util.VersionInfo: org.apache.http.util.VersionInfo fromMap(java.lang.String,java.util.Map,java.lang.ClassLoader)>:[1,22]
<org.apache.http.util.VersionInfo: org.apache.http.util.VersionInfo loadVersionInfo(java.lang.String,java.lang.ClassLoader)>:[1,22]
<org.apache.http.util.VersionInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>:[1,22]
<org.json.JSONArray: void <init>(java.lang.Object)>:[19,25]
